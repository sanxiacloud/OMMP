'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.8800
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="cmdb")>  _
Partial Public Class DBLinqDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertApplicationSolution(instance As ApplicationSolution)
    End Sub
  Partial Private Sub UpdateApplicationSolution(instance As ApplicationSolution)
    End Sub
  Partial Private Sub DeleteApplicationSolution(instance As ApplicationSolution)
    End Sub
  Partial Private Sub InsertWebServer(instance As WebServer)
    End Sub
  Partial Private Sub UpdateWebServer(instance As WebServer)
    End Sub
  Partial Private Sub DeleteWebServer(instance As WebServer)
    End Sub
  Partial Private Sub InsertBackups(instance As Backups)
    End Sub
  Partial Private Sub UpdateBackups(instance As Backups)
    End Sub
  Partial Private Sub DeleteBackups(instance As Backups)
    End Sub
  Partial Private Sub InsertBlank(instance As Blank)
    End Sub
  Partial Private Sub UpdateBlank(instance As Blank)
    End Sub
  Partial Private Sub DeleteBlank(instance As Blank)
    End Sub
  Partial Private Sub InsertChange(instance As Change)
    End Sub
  Partial Private Sub UpdateChange(instance As Change)
    End Sub
  Partial Private Sub DeleteChange(instance As Change)
    End Sub
  Partial Private Sub InsertChangeOp(instance As ChangeOp)
    End Sub
  Partial Private Sub UpdateChangeOp(instance As ChangeOp)
    End Sub
  Partial Private Sub DeleteChangeOp(instance As ChangeOp)
    End Sub
  Partial Private Sub InsertChangeOpCreate(instance As ChangeOpCreate)
    End Sub
  Partial Private Sub UpdateChangeOpCreate(instance As ChangeOpCreate)
    End Sub
  Partial Private Sub DeleteChangeOpCreate(instance As ChangeOpCreate)
    End Sub
  Partial Private Sub InsertChangeOpDelete(instance As ChangeOpDelete)
    End Sub
  Partial Private Sub UpdateChangeOpDelete(instance As ChangeOpDelete)
    End Sub
  Partial Private Sub DeleteChangeOpDelete(instance As ChangeOpDelete)
    End Sub
  Partial Private Sub InsertChangeOpLinks(instance As ChangeOpLinks)
    End Sub
  Partial Private Sub UpdateChangeOpLinks(instance As ChangeOpLinks)
    End Sub
  Partial Private Sub DeleteChangeOpLinks(instance As ChangeOpLinks)
    End Sub
  Partial Private Sub InsertChangeOpLinksAddRemove(instance As ChangeOpLinksAddRemove)
    End Sub
  Partial Private Sub UpdateChangeOpLinksAddRemove(instance As ChangeOpLinksAddRemove)
    End Sub
  Partial Private Sub DeleteChangeOpLinksAddRemove(instance As ChangeOpLinksAddRemove)
    End Sub
  Partial Private Sub InsertChangeOpSetAtt(instance As ChangeOpSetAtt)
    End Sub
  Partial Private Sub UpdateChangeOpSetAtt(instance As ChangeOpSetAtt)
    End Sub
  Partial Private Sub DeleteChangeOpSetAtt(instance As ChangeOpSetAtt)
    End Sub
  Partial Private Sub InsertChangeOpSetAttPwd(instance As ChangeOpSetAttPwd)
    End Sub
  Partial Private Sub UpdateChangeOpSetAttPwd(instance As ChangeOpSetAttPwd)
    End Sub
  Partial Private Sub DeleteChangeOpSetAttPwd(instance As ChangeOpSetAttPwd)
    End Sub
  Partial Private Sub InsertChangeOpSetAttScalar(instance As ChangeOpSetAttScalar)
    End Sub
  Partial Private Sub UpdateChangeOpSetAttScalar(instance As ChangeOpSetAttScalar)
    End Sub
  Partial Private Sub DeleteChangeOpSetAttScalar(instance As ChangeOpSetAttScalar)
    End Sub
  Partial Private Sub InsertChangeOpSetAttText(instance As ChangeOpSetAttText)
    End Sub
  Partial Private Sub UpdateChangeOpSetAttText(instance As ChangeOpSetAttText)
    End Sub
  Partial Private Sub DeleteChangeOpSetAttText(instance As ChangeOpSetAttText)
    End Sub
  Partial Private Sub InsertChangeOpSetAttUrl(instance As ChangeOpSetAttUrl)
    End Sub
  Partial Private Sub UpdateChangeOpSetAttUrl(instance As ChangeOpSetAttUrl)
    End Sub
  Partial Private Sub DeleteChangeOpSetAttUrl(instance As ChangeOpSetAttUrl)
    End Sub
  Partial Private Sub InsertCIGroup(instance As CIGroup)
    End Sub
  Partial Private Sub UpdateCIGroup(instance As CIGroup)
    End Sub
  Partial Private Sub DeleteCIGroup(instance As CIGroup)
    End Sub
  Partial Private Sub InsertCode(instance As Code)
    End Sub
  Partial Private Sub UpdateCode(instance As Code)
    End Sub
  Partial Private Sub DeleteCode(instance As Code)
    End Sub
  Partial Private Sub InsertConfigAccess(instance As ConfigAccess)
    End Sub
  Partial Private Sub UpdateConfigAccess(instance As ConfigAccess)
    End Sub
  Partial Private Sub DeleteConfigAccess(instance As ConfigAccess)
    End Sub
  Partial Private Sub InsertConfigPort(instance As ConfigPort)
    End Sub
  Partial Private Sub UpdateConfigPort(instance As ConfigPort)
    End Sub
  Partial Private Sub DeleteConfigPort(instance As ConfigPort)
    End Sub
  Partial Private Sub InsertConnectableCI(instance As ConnectableCI)
    End Sub
  Partial Private Sub UpdateConnectableCI(instance As ConnectableCI)
    End Sub
  Partial Private Sub DeleteConnectableCI(instance As ConnectableCI)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertContract(instance As Contract)
    End Sub
  Partial Private Sub UpdateContract(instance As Contract)
    End Sub
  Partial Private Sub DeleteContract(instance As Contract)
    End Sub
  Partial Private Sub InsertContractDetail(instance As ContractDetail)
    End Sub
  Partial Private Sub UpdateContractDetail(instance As ContractDetail)
    End Sub
  Partial Private Sub DeleteContractDetail(instance As ContractDetail)
    End Sub
  Partial Private Sub InsertCustomerContract(instance As CustomerContract)
    End Sub
  Partial Private Sub UpdateCustomerContract(instance As CustomerContract)
    End Sub
  Partial Private Sub DeleteCustomerContract(instance As CustomerContract)
    End Sub
  Partial Private Sub InsertDatabasesSchema(instance As DatabasesSchema)
    End Sub
  Partial Private Sub UpdateDatabasesSchema(instance As DatabasesSchema)
    End Sub
  Partial Private Sub DeleteDatabasesSchema(instance As DatabasesSchema)
    End Sub
  Partial Private Sub InsertDataCenterDevice(instance As DataCenterDevice)
    End Sub
  Partial Private Sub UpdateDataCenterDevice(instance As DataCenterDevice)
    End Sub
  Partial Private Sub DeleteDataCenterDevice(instance As DataCenterDevice)
    End Sub
  Partial Private Sub InsertDBServer(instance As DBServer)
    End Sub
  Partial Private Sub UpdateDBServer(instance As DBServer)
    End Sub
  Partial Private Sub DeleteDBServer(instance As DBServer)
    End Sub
  Partial Private Sub InsertDNSObject(instance As DNSObject)
    End Sub
  Partial Private Sub UpdateDNSObject(instance As DNSObject)
    End Sub
  Partial Private Sub DeleteDNSObject(instance As DNSObject)
    End Sub
  Partial Private Sub InsertDocuments(instance As Documents)
    End Sub
  Partial Private Sub UpdateDocuments(instance As Documents)
    End Sub
  Partial Private Sub DeleteDocuments(instance As Documents)
    End Sub
  Partial Private Sub InsertDomain(instance As Domain)
    End Sub
  Partial Private Sub UpdateDomain(instance As Domain)
    End Sub
  Partial Private Sub DeleteDomain(instance As Domain)
    End Sub
  Partial Private Sub InsertEnclosure(instance As Enclosure)
    End Sub
  Partial Private Sub UpdateEnclosure(instance As Enclosure)
    End Sub
  Partial Private Sub DeleteEnclosure(instance As Enclosure)
    End Sub
  Partial Private Sub InsertFarm(instance As Farm)
    End Sub
  Partial Private Sub UpdateFarm(instance As Farm)
    End Sub
  Partial Private Sub DeleteFarm(instance As Farm)
    End Sub
  Partial Private Sub InsertFiberChannelInterface(instance As FiberChannelInterface)
    End Sub
  Partial Private Sub UpdateFiberChannelInterface(instance As FiberChannelInterface)
    End Sub
  Partial Private Sub DeleteFiberChannelInterface(instance As FiberChannelInterface)
    End Sub
  Partial Private Sub InsertFunctionalCI(instance As FunctionalCI)
    End Sub
  Partial Private Sub UpdateFunctionalCI(instance As FunctionalCI)
    End Sub
  Partial Private Sub DeleteFunctionalCI(instance As FunctionalCI)
    End Sub
  Partial Private Sub InsertHypervisor(instance As Hypervisor)
    End Sub
  Partial Private Sub UpdateHypervisor(instance As Hypervisor)
    End Sub
  Partial Private Sub DeleteHypervisor(instance As Hypervisor)
    End Sub
  Partial Private Sub InsertIPAddress(instance As IPAddress)
    End Sub
  Partial Private Sub UpdateIPAddress(instance As IPAddress)
    End Sub
  Partial Private Sub DeleteIPAddress(instance As IPAddress)
    End Sub
  Partial Private Sub InsertIPAddressv4(instance As IPAddressv4)
    End Sub
  Partial Private Sub UpdateIPAddressv4(instance As IPAddressv4)
    End Sub
  Partial Private Sub DeleteIPAddressv4(instance As IPAddressv4)
    End Sub
  Partial Private Sub InsertIPBlock(instance As IPBlock)
    End Sub
  Partial Private Sub UpdateIPBlock(instance As IPBlock)
    End Sub
  Partial Private Sub DeleteIPBlock(instance As IPBlock)
    End Sub
  Partial Private Sub InsertIPBlockv4(instance As IPBlockv4)
    End Sub
  Partial Private Sub UpdateIPBlockv4(instance As IPBlockv4)
    End Sub
  Partial Private Sub DeleteIPBlockv4(instance As IPBlockv4)
    End Sub
  Partial Private Sub InsertIPInterface(instance As IPInterface)
    End Sub
  Partial Private Sub UpdateIPInterface(instance As IPInterface)
    End Sub
  Partial Private Sub DeleteIPInterface(instance As IPInterface)
    End Sub
  Partial Private Sub InsertIPObject(instance As IPObject)
    End Sub
  Partial Private Sub UpdateIPObject(instance As IPObject)
    End Sub
  Partial Private Sub DeleteIPObject(instance As IPObject)
    End Sub
  Partial Private Sub InsertIPSubnet(instance As IPSubnet)
    End Sub
  Partial Private Sub UpdateIPSubnet(instance As IPSubnet)
    End Sub
  Partial Private Sub DeleteIPSubnet(instance As IPSubnet)
    End Sub
  Partial Private Sub InsertIPSubnetv4(instance As IPSubnetv4)
    End Sub
  Partial Private Sub UpdateIPSubnetv4(instance As IPSubnetv4)
    End Sub
  Partial Private Sub DeleteIPSubnetv4(instance As IPSubnetv4)
    End Sub
  Partial Private Sub InsertLicence(instance As Licence)
    End Sub
  Partial Private Sub UpdateLicence(instance As Licence)
    End Sub
  Partial Private Sub DeleteLicence(instance As Licence)
    End Sub
  Partial Private Sub InsertLnkApplicationSolutionToFunctionalCI(instance As LnkApplicationSolutionToFunctionalCI)
    End Sub
  Partial Private Sub UpdateLnkApplicationSolutionToFunctionalCI(instance As LnkApplicationSolutionToFunctionalCI)
    End Sub
  Partial Private Sub DeleteLnkApplicationSolutionToFunctionalCI(instance As LnkApplicationSolutionToFunctionalCI)
    End Sub
  Partial Private Sub InsertLnkBackupsToFunctionalCI(instance As LnkBackupsToFunctionalCI)
    End Sub
  Partial Private Sub UpdateLnkBackupsToFunctionalCI(instance As LnkBackupsToFunctionalCI)
    End Sub
  Partial Private Sub DeleteLnkBackupsToFunctionalCI(instance As LnkBackupsToFunctionalCI)
    End Sub
  Partial Private Sub InsertLnkCIGroupToCI(instance As LnkCIGroupToCI)
    End Sub
  Partial Private Sub UpdateLnkCIGroupToCI(instance As LnkCIGroupToCI)
    End Sub
  Partial Private Sub DeleteLnkCIGroupToCI(instance As LnkCIGroupToCI)
    End Sub
  Partial Private Sub InsertLnkConnectableCIToNetworkDevice(instance As LnkConnectableCIToNetworkDevice)
    End Sub
  Partial Private Sub UpdateLnkConnectableCIToNetworkDevice(instance As LnkConnectableCIToNetworkDevice)
    End Sub
  Partial Private Sub DeleteLnkConnectableCIToNetworkDevice(instance As LnkConnectableCIToNetworkDevice)
    End Sub
  Partial Private Sub InsertLnkContactToContract(instance As LnkContactToContract)
    End Sub
  Partial Private Sub UpdateLnkContactToContract(instance As LnkContactToContract)
    End Sub
  Partial Private Sub DeleteLnkContactToContract(instance As LnkContactToContract)
    End Sub
  Partial Private Sub InsertLnkContactToFunctionalCI(instance As LnkContactToFunctionalCI)
    End Sub
  Partial Private Sub UpdateLnkContactToFunctionalCI(instance As LnkContactToFunctionalCI)
    End Sub
  Partial Private Sub DeleteLnkContactToFunctionalCI(instance As LnkContactToFunctionalCI)
    End Sub
  Partial Private Sub InsertLnkContactToIPObject(instance As LnkContactToIPObject)
    End Sub
  Partial Private Sub UpdateLnkContactToIPObject(instance As LnkContactToIPObject)
    End Sub
  Partial Private Sub DeleteLnkContactToIPObject(instance As LnkContactToIPObject)
    End Sub
  Partial Private Sub InsertLnkContractToDocument(instance As LnkContractToDocument)
    End Sub
  Partial Private Sub UpdateLnkContractToDocument(instance As LnkContractToDocument)
    End Sub
  Partial Private Sub DeleteLnkContractToDocument(instance As LnkContractToDocument)
    End Sub
  Partial Private Sub InsertLnkCustomerContractToProviderContract(instance As LnkCustomerContractToProviderContract)
    End Sub
  Partial Private Sub UpdateLnkCustomerContractToProviderContract(instance As LnkCustomerContractToProviderContract)
    End Sub
  Partial Private Sub DeleteLnkCustomerContractToProviderContract(instance As LnkCustomerContractToProviderContract)
    End Sub
  Partial Private Sub InsertLnkDatacenterDeviceToSan(instance As LnkDatacenterDeviceToSan)
    End Sub
  Partial Private Sub UpdateLnkDatacenterDeviceToSan(instance As LnkDatacenterDeviceToSan)
    End Sub
  Partial Private Sub DeleteLnkDatacenterDeviceToSan(instance As LnkDatacenterDeviceToSan)
    End Sub
  Partial Private Sub InsertLnkDocumentToFunctionalCI(instance As LnkDocumentToFunctionalCI)
    End Sub
  Partial Private Sub UpdateLnkDocumentToFunctionalCI(instance As LnkDocumentToFunctionalCI)
    End Sub
  Partial Private Sub DeleteLnkDocumentToFunctionalCI(instance As LnkDocumentToFunctionalCI)
    End Sub
  Partial Private Sub InsertLnkDocumentToIPObject(instance As LnkDocumentToIPObject)
    End Sub
  Partial Private Sub UpdateLnkDocumentToIPObject(instance As LnkDocumentToIPObject)
    End Sub
  Partial Private Sub DeleteLnkDocumentToIPObject(instance As LnkDocumentToIPObject)
    End Sub
  Partial Private Sub InsertLnkDocumentToLicence(instance As LnkDocumentToLicence)
    End Sub
  Partial Private Sub UpdateLnkDocumentToLicence(instance As LnkDocumentToLicence)
    End Sub
  Partial Private Sub DeleteLnkDocumentToLicence(instance As LnkDocumentToLicence)
    End Sub
  Partial Private Sub InsertLnkDocumentToSoftware(instance As LnkDocumentToSoftware)
    End Sub
  Partial Private Sub UpdateLnkDocumentToSoftware(instance As LnkDocumentToSoftware)
    End Sub
  Partial Private Sub DeleteLnkDocumentToSoftware(instance As LnkDocumentToSoftware)
    End Sub
  Partial Private Sub InsertLnkFunctionalCIToOrganization(instance As LnkFunctionalCIToOrganization)
    End Sub
  Partial Private Sub UpdateLnkFunctionalCIToOrganization(instance As LnkFunctionalCIToOrganization)
    End Sub
  Partial Private Sub DeleteLnkFunctionalCIToOrganization(instance As LnkFunctionalCIToOrganization)
    End Sub
  Partial Private Sub InsertLnkFunctionalCIToProviderContract(instance As LnkFunctionalCIToProviderContract)
    End Sub
  Partial Private Sub UpdateLnkFunctionalCIToProviderContract(instance As LnkFunctionalCIToProviderContract)
    End Sub
  Partial Private Sub DeleteLnkFunctionalCIToProviderContract(instance As LnkFunctionalCIToProviderContract)
    End Sub
  Partial Private Sub InsertLnkIPAddressToIPAddress(instance As LnkIPAddressToIPAddress)
    End Sub
  Partial Private Sub UpdateLnkIPAddressToIPAddress(instance As LnkIPAddressToIPAddress)
    End Sub
  Partial Private Sub DeleteLnkIPAddressToIPAddress(instance As LnkIPAddressToIPAddress)
    End Sub
  Partial Private Sub InsertLnkIPInterfaceToIPAddress(instance As LnkIPInterfaceToIPAddress)
    End Sub
  Partial Private Sub UpdateLnkIPInterfaceToIPAddress(instance As LnkIPInterfaceToIPAddress)
    End Sub
  Partial Private Sub DeleteLnkIPInterfaceToIPAddress(instance As LnkIPInterfaceToIPAddress)
    End Sub
  Partial Private Sub InsertLnkIPSubnetToLocation(instance As LnkIPSubnetToLocation)
    End Sub
  Partial Private Sub UpdateLnkIPSubnetToLocation(instance As LnkIPSubnetToLocation)
    End Sub
  Partial Private Sub DeleteLnkIPSubnetToLocation(instance As LnkIPSubnetToLocation)
    End Sub
  Partial Private Sub InsertLnkIPSubnetToVLAN(instance As LnkIPSubnetToVLAN)
    End Sub
  Partial Private Sub UpdateLnkIPSubnetToVLAN(instance As LnkIPSubnetToVLAN)
    End Sub
  Partial Private Sub DeleteLnkIPSubnetToVLAN(instance As LnkIPSubnetToVLAN)
    End Sub
  Partial Private Sub InsertLnkPasswdToFunctionalCI(instance As LnkPasswdToFunctionalCI)
    End Sub
  Partial Private Sub UpdateLnkPasswdToFunctionalCI(instance As LnkPasswdToFunctionalCI)
    End Sub
  Partial Private Sub DeleteLnkPasswdToFunctionalCI(instance As LnkPasswdToFunctionalCI)
    End Sub
  Partial Private Sub InsertLnkPhysicalInterfaceToVLAN(instance As LnkPhysicalInterfaceToVLAN)
    End Sub
  Partial Private Sub UpdateLnkPhysicalInterfaceToVLAN(instance As LnkPhysicalInterfaceToVLAN)
    End Sub
  Partial Private Sub DeleteLnkPhysicalInterfaceToVLAN(instance As LnkPhysicalInterfaceToVLAN)
    End Sub
  Partial Private Sub InsertLnkServerToVolume(instance As LnkServerToVolume)
    End Sub
  Partial Private Sub UpdateLnkServerToVolume(instance As LnkServerToVolume)
    End Sub
  Partial Private Sub DeleteLnkServerToVolume(instance As LnkServerToVolume)
    End Sub
  Partial Private Sub InsertLnkSubnetToVLAN(instance As LnkSubnetToVLAN)
    End Sub
  Partial Private Sub UpdateLnkSubnetToVLAN(instance As LnkSubnetToVLAN)
    End Sub
  Partial Private Sub DeleteLnkSubnetToVLAN(instance As LnkSubnetToVLAN)
    End Sub
  Partial Private Sub InsertLnkVirtualDeviceToVolume(instance As LnkVirtualDeviceToVolume)
    End Sub
  Partial Private Sub UpdateLnkVirtualDeviceToVolume(instance As LnkVirtualDeviceToVolume)
    End Sub
  Partial Private Sub DeleteLnkVirtualDeviceToVolume(instance As LnkVirtualDeviceToVolume)
    End Sub
  Partial Private Sub InsertLocation(instance As Location)
    End Sub
  Partial Private Sub UpdateLocation(instance As Location)
    End Sub
  Partial Private Sub DeleteLocation(instance As Location)
    End Sub
  Partial Private Sub InsertLogicalInterface(instance As LogicalInterface)
    End Sub
  Partial Private Sub UpdateLogicalInterface(instance As LogicalInterface)
    End Sub
  Partial Private Sub DeleteLogicalInterface(instance As LogicalInterface)
    End Sub
  Partial Private Sub InsertLogicalVolume(instance As LogicalVolume)
    End Sub
  Partial Private Sub UpdateLogicalVolume(instance As LogicalVolume)
    End Sub
  Partial Private Sub DeleteLogicalVolume(instance As LogicalVolume)
    End Sub
  Partial Private Sub InsertLogs(instance As Logs)
    End Sub
  Partial Private Sub UpdateLogs(instance As Logs)
    End Sub
  Partial Private Sub DeleteLogs(instance As Logs)
    End Sub
  Partial Private Sub InsertMessages(instance As Messages)
    End Sub
  Partial Private Sub UpdateMessages(instance As Messages)
    End Sub
  Partial Private Sub DeleteMessages(instance As Messages)
    End Sub
  Partial Private Sub InsertMiddleware(instance As Middleware)
    End Sub
  Partial Private Sub UpdateMiddleware(instance As Middleware)
    End Sub
  Partial Private Sub DeleteMiddleware(instance As Middleware)
    End Sub
  Partial Private Sub InsertMiddlewareInstance(instance As MiddlewareInstance)
    End Sub
  Partial Private Sub UpdateMiddlewareInstance(instance As MiddlewareInstance)
    End Sub
  Partial Private Sub DeleteMiddlewareInstance(instance As MiddlewareInstance)
    End Sub
  Partial Private Sub InsertNAS(instance As NAS)
    End Sub
  Partial Private Sub UpdateNAS(instance As NAS)
    End Sub
  Partial Private Sub DeleteNAS(instance As NAS)
    End Sub
  Partial Private Sub InsertNetworkDevice(instance As NetworkDevice)
    End Sub
  Partial Private Sub UpdateNetworkDevice(instance As NetworkDevice)
    End Sub
  Partial Private Sub DeleteNetworkDevice(instance As NetworkDevice)
    End Sub
  Partial Private Sub InsertNetworkInterface(instance As NetworkInterface)
    End Sub
  Partial Private Sub UpdateNetworkInterface(instance As NetworkInterface)
    End Sub
  Partial Private Sub DeleteNetworkInterface(instance As NetworkInterface)
    End Sub
  Partial Private Sub InsertOrganization(instance As Organization)
    End Sub
  Partial Private Sub UpdateOrganization(instance As Organization)
    End Sub
  Partial Private Sub DeleteOrganization(instance As Organization)
    End Sub
  Partial Private Sub InsertOSFamily(instance As OSFamily)
    End Sub
  Partial Private Sub UpdateOSFamily(instance As OSFamily)
    End Sub
  Partial Private Sub DeleteOSFamily(instance As OSFamily)
    End Sub
  Partial Private Sub InsertOSLicence(instance As OSLicence)
    End Sub
  Partial Private Sub UpdateOSLicence(instance As OSLicence)
    End Sub
  Partial Private Sub DeleteOSLicence(instance As OSLicence)
    End Sub
  Partial Private Sub InsertOSVersion(instance As OSVersion)
    End Sub
  Partial Private Sub UpdateOSVersion(instance As OSVersion)
    End Sub
  Partial Private Sub DeleteOSVersion(instance As OSVersion)
    End Sub
  Partial Private Sub InsertPasswd(instance As Passwd)
    End Sub
  Partial Private Sub UpdatePasswd(instance As Passwd)
    End Sub
  Partial Private Sub DeletePasswd(instance As Passwd)
    End Sub
  Partial Private Sub InsertPeripheral(instance As Peripheral)
    End Sub
  Partial Private Sub UpdatePeripheral(instance As Peripheral)
    End Sub
  Partial Private Sub DeletePeripheral(instance As Peripheral)
    End Sub
  Partial Private Sub InsertPhysicalDevice(instance As PhysicalDevice)
    End Sub
  Partial Private Sub UpdatePhysicalDevice(instance As PhysicalDevice)
    End Sub
  Partial Private Sub DeletePhysicalDevice(instance As PhysicalDevice)
    End Sub
  Partial Private Sub InsertPhysicalInterface(instance As PhysicalInterface)
    End Sub
  Partial Private Sub UpdatePhysicalInterface(instance As PhysicalInterface)
    End Sub
  Partial Private Sub DeletePhysicalInterface(instance As PhysicalInterface)
    End Sub
  Partial Private Sub InsertProviderContract(instance As ProviderContract)
    End Sub
  Partial Private Sub UpdateProviderContract(instance As ProviderContract)
    End Sub
  Partial Private Sub DeleteProviderContract(instance As ProviderContract)
    End Sub
  Partial Private Sub InsertRack(instance As Rack)
    End Sub
  Partial Private Sub UpdateRack(instance As Rack)
    End Sub
  Partial Private Sub DeleteRack(instance As Rack)
    End Sub
  Partial Private Sub InsertSANSwitch(instance As SANSwitch)
    End Sub
  Partial Private Sub UpdateSANSwitch(instance As SANSwitch)
    End Sub
  Partial Private Sub DeleteSANSwitch(instance As SANSwitch)
    End Sub
  Partial Private Sub InsertSecurityStrategy(instance As SecurityStrategy)
    End Sub
  Partial Private Sub UpdateSecurityStrategy(instance As SecurityStrategy)
    End Sub
  Partial Private Sub DeleteSecurityStrategy(instance As SecurityStrategy)
    End Sub
  Partial Private Sub InsertServer(instance As Server)
    End Sub
  Partial Private Sub UpdateServer(instance As Server)
    End Sub
  Partial Private Sub DeleteServer(instance As Server)
    End Sub
  Partial Private Sub InsertSoftware(instance As Software)
    End Sub
  Partial Private Sub UpdateSoftware(instance As Software)
    End Sub
  Partial Private Sub DeleteSoftware(instance As Software)
    End Sub
  Partial Private Sub InsertSoftwareInstance(instance As SoftwareInstance)
    End Sub
  Partial Private Sub UpdateSoftwareInstance(instance As SoftwareInstance)
    End Sub
  Partial Private Sub DeleteSoftwareInstance(instance As SoftwareInstance)
    End Sub
  Partial Private Sub InsertSoftwareLicence(instance As SoftwareLicence)
    End Sub
  Partial Private Sub UpdateSoftwareLicence(instance As SoftwareLicence)
    End Sub
  Partial Private Sub DeleteSoftwareLicence(instance As SoftwareLicence)
    End Sub
  Partial Private Sub InsertStorageSystem(instance As StorageSystem)
    End Sub
  Partial Private Sub UpdateStorageSystem(instance As StorageSystem)
    End Sub
  Partial Private Sub DeleteStorageSystem(instance As StorageSystem)
    End Sub
  Partial Private Sub InsertTypology(instance As Typology)
    End Sub
  Partial Private Sub UpdateTypology(instance As Typology)
    End Sub
  Partial Private Sub DeleteTypology(instance As Typology)
    End Sub
  Partial Private Sub InsertUsers(instance As Users)
    End Sub
  Partial Private Sub UpdateUsers(instance As Users)
    End Sub
  Partial Private Sub DeleteUsers(instance As Users)
    End Sub
  Partial Private Sub InsertVirtualDevice(instance As VirtualDevice)
    End Sub
  Partial Private Sub UpdateVirtualDevice(instance As VirtualDevice)
    End Sub
  Partial Private Sub DeleteVirtualDevice(instance As VirtualDevice)
    End Sub
  Partial Private Sub InsertVirtualHost(instance As VirtualHost)
    End Sub
  Partial Private Sub UpdateVirtualHost(instance As VirtualHost)
    End Sub
  Partial Private Sub DeleteVirtualHost(instance As VirtualHost)
    End Sub
  Partial Private Sub InsertVirtualMachine(instance As VirtualMachine)
    End Sub
  Partial Private Sub UpdateVirtualMachine(instance As VirtualMachine)
    End Sub
  Partial Private Sub DeleteVirtualMachine(instance As VirtualMachine)
    End Sub
  Partial Private Sub InsertVisualAuthorization(instance As VisualAuthorization)
    End Sub
  Partial Private Sub UpdateVisualAuthorization(instance As VisualAuthorization)
    End Sub
  Partial Private Sub DeleteVisualAuthorization(instance As VisualAuthorization)
    End Sub
  Partial Private Sub InsertVLAN(instance As VLAN)
    End Sub
  Partial Private Sub UpdateVLAN(instance As VLAN)
    End Sub
  Partial Private Sub DeleteVLAN(instance As VLAN)
    End Sub
  Partial Private Sub InsertWANLink(instance As WANLink)
    End Sub
  Partial Private Sub UpdateWANLink(instance As WANLink)
    End Sub
  Partial Private Sub DeleteWANLink(instance As WANLink)
    End Sub
  Partial Private Sub InsertWebApplication(instance As WebApplication)
    End Sub
  Partial Private Sub UpdateWebApplication(instance As WebApplication)
    End Sub
  Partial Private Sub DeleteWebApplication(instance As WebApplication)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.opdatalib.linq.My.MySettings.Default.cmdbConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ApplicationSolution() As System.Data.Linq.Table(Of ApplicationSolution)
		Get
			Return Me.GetTable(Of ApplicationSolution)
		End Get
	End Property
	
	Public ReadOnly Property WebServer() As System.Data.Linq.Table(Of WebServer)
		Get
			Return Me.GetTable(Of WebServer)
		End Get
	End Property
	
	Public ReadOnly Property Backups() As System.Data.Linq.Table(Of Backups)
		Get
			Return Me.GetTable(Of Backups)
		End Get
	End Property
	
	Public ReadOnly Property Blank() As System.Data.Linq.Table(Of Blank)
		Get
			Return Me.GetTable(Of Blank)
		End Get
	End Property
	
	Public ReadOnly Property Change() As System.Data.Linq.Table(Of Change)
		Get
			Return Me.GetTable(Of Change)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOp() As System.Data.Linq.Table(Of ChangeOp)
		Get
			Return Me.GetTable(Of ChangeOp)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpCreate() As System.Data.Linq.Table(Of ChangeOpCreate)
		Get
			Return Me.GetTable(Of ChangeOpCreate)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpDelete() As System.Data.Linq.Table(Of ChangeOpDelete)
		Get
			Return Me.GetTable(Of ChangeOpDelete)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpLinks() As System.Data.Linq.Table(Of ChangeOpLinks)
		Get
			Return Me.GetTable(Of ChangeOpLinks)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpLinksAddRemove() As System.Data.Linq.Table(Of ChangeOpLinksAddRemove)
		Get
			Return Me.GetTable(Of ChangeOpLinksAddRemove)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpSetAtt() As System.Data.Linq.Table(Of ChangeOpSetAtt)
		Get
			Return Me.GetTable(Of ChangeOpSetAtt)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpSetAttPwd() As System.Data.Linq.Table(Of ChangeOpSetAttPwd)
		Get
			Return Me.GetTable(Of ChangeOpSetAttPwd)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpSetAttScalar() As System.Data.Linq.Table(Of ChangeOpSetAttScalar)
		Get
			Return Me.GetTable(Of ChangeOpSetAttScalar)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpSetAttText() As System.Data.Linq.Table(Of ChangeOpSetAttText)
		Get
			Return Me.GetTable(Of ChangeOpSetAttText)
		End Get
	End Property
	
	Public ReadOnly Property ChangeOpSetAttUrl() As System.Data.Linq.Table(Of ChangeOpSetAttUrl)
		Get
			Return Me.GetTable(Of ChangeOpSetAttUrl)
		End Get
	End Property
	
	Public ReadOnly Property CIGroup() As System.Data.Linq.Table(Of CIGroup)
		Get
			Return Me.GetTable(Of CIGroup)
		End Get
	End Property
	
	Public ReadOnly Property Code() As System.Data.Linq.Table(Of Code)
		Get
			Return Me.GetTable(Of Code)
		End Get
	End Property
	
	Public ReadOnly Property ConfigAccess() As System.Data.Linq.Table(Of ConfigAccess)
		Get
			Return Me.GetTable(Of ConfigAccess)
		End Get
	End Property
	
	Public ReadOnly Property ConfigPort() As System.Data.Linq.Table(Of ConfigPort)
		Get
			Return Me.GetTable(Of ConfigPort)
		End Get
	End Property
	
	Public ReadOnly Property ConnectableCI() As System.Data.Linq.Table(Of ConnectableCI)
		Get
			Return Me.GetTable(Of ConnectableCI)
		End Get
	End Property
	
	Public ReadOnly Property Contact() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property Contract() As System.Data.Linq.Table(Of Contract)
		Get
			Return Me.GetTable(Of Contract)
		End Get
	End Property
	
	Public ReadOnly Property ContractDetail() As System.Data.Linq.Table(Of ContractDetail)
		Get
			Return Me.GetTable(Of ContractDetail)
		End Get
	End Property
	
	Public ReadOnly Property CustomerContract() As System.Data.Linq.Table(Of CustomerContract)
		Get
			Return Me.GetTable(Of CustomerContract)
		End Get
	End Property
	
	Public ReadOnly Property DatabasesSchema() As System.Data.Linq.Table(Of DatabasesSchema)
		Get
			Return Me.GetTable(Of DatabasesSchema)
		End Get
	End Property
	
	Public ReadOnly Property DataCenterDevice() As System.Data.Linq.Table(Of DataCenterDevice)
		Get
			Return Me.GetTable(Of DataCenterDevice)
		End Get
	End Property
	
	Public ReadOnly Property DBServer() As System.Data.Linq.Table(Of DBServer)
		Get
			Return Me.GetTable(Of DBServer)
		End Get
	End Property
	
	Public ReadOnly Property DNSObject() As System.Data.Linq.Table(Of DNSObject)
		Get
			Return Me.GetTable(Of DNSObject)
		End Get
	End Property
	
	Public ReadOnly Property Documents() As System.Data.Linq.Table(Of Documents)
		Get
			Return Me.GetTable(Of Documents)
		End Get
	End Property
	
	Public ReadOnly Property Domain() As System.Data.Linq.Table(Of Domain)
		Get
			Return Me.GetTable(Of Domain)
		End Get
	End Property
	
	Public ReadOnly Property Enclosure() As System.Data.Linq.Table(Of Enclosure)
		Get
			Return Me.GetTable(Of Enclosure)
		End Get
	End Property
	
	Public ReadOnly Property Farm() As System.Data.Linq.Table(Of Farm)
		Get
			Return Me.GetTable(Of Farm)
		End Get
	End Property
	
	Public ReadOnly Property FiberChannelInterface() As System.Data.Linq.Table(Of FiberChannelInterface)
		Get
			Return Me.GetTable(Of FiberChannelInterface)
		End Get
	End Property
	
	Public ReadOnly Property FunctionalCI() As System.Data.Linq.Table(Of FunctionalCI)
		Get
			Return Me.GetTable(Of FunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property Hypervisor() As System.Data.Linq.Table(Of Hypervisor)
		Get
			Return Me.GetTable(Of Hypervisor)
		End Get
	End Property
	
	Public ReadOnly Property IPAddress() As System.Data.Linq.Table(Of IPAddress)
		Get
			Return Me.GetTable(Of IPAddress)
		End Get
	End Property
	
	Public ReadOnly Property IPAddressv4() As System.Data.Linq.Table(Of IPAddressv4)
		Get
			Return Me.GetTable(Of IPAddressv4)
		End Get
	End Property
	
	Public ReadOnly Property IPBlock() As System.Data.Linq.Table(Of IPBlock)
		Get
			Return Me.GetTable(Of IPBlock)
		End Get
	End Property
	
	Public ReadOnly Property IPBlockv4() As System.Data.Linq.Table(Of IPBlockv4)
		Get
			Return Me.GetTable(Of IPBlockv4)
		End Get
	End Property
	
	Public ReadOnly Property IPInterface() As System.Data.Linq.Table(Of IPInterface)
		Get
			Return Me.GetTable(Of IPInterface)
		End Get
	End Property
	
	Public ReadOnly Property IPObject() As System.Data.Linq.Table(Of IPObject)
		Get
			Return Me.GetTable(Of IPObject)
		End Get
	End Property
	
	Public ReadOnly Property IPSubnet() As System.Data.Linq.Table(Of IPSubnet)
		Get
			Return Me.GetTable(Of IPSubnet)
		End Get
	End Property
	
	Public ReadOnly Property IPSubnetv4() As System.Data.Linq.Table(Of IPSubnetv4)
		Get
			Return Me.GetTable(Of IPSubnetv4)
		End Get
	End Property
	
	Public ReadOnly Property Licence() As System.Data.Linq.Table(Of Licence)
		Get
			Return Me.GetTable(Of Licence)
		End Get
	End Property
	
	Public ReadOnly Property LnkApplicationSolutionToFunctionalCI() As System.Data.Linq.Table(Of LnkApplicationSolutionToFunctionalCI)
		Get
			Return Me.GetTable(Of LnkApplicationSolutionToFunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkBackupsToFunctionalCI() As System.Data.Linq.Table(Of LnkBackupsToFunctionalCI)
		Get
			Return Me.GetTable(Of LnkBackupsToFunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkCIGroupToCI() As System.Data.Linq.Table(Of LnkCIGroupToCI)
		Get
			Return Me.GetTable(Of LnkCIGroupToCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkConnectableCIToNetworkDevice() As System.Data.Linq.Table(Of LnkConnectableCIToNetworkDevice)
		Get
			Return Me.GetTable(Of LnkConnectableCIToNetworkDevice)
		End Get
	End Property
	
	Public ReadOnly Property LnkContactToContract() As System.Data.Linq.Table(Of LnkContactToContract)
		Get
			Return Me.GetTable(Of LnkContactToContract)
		End Get
	End Property
	
	Public ReadOnly Property LnkContactToFunctionalCI() As System.Data.Linq.Table(Of LnkContactToFunctionalCI)
		Get
			Return Me.GetTable(Of LnkContactToFunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkContactToIPObject() As System.Data.Linq.Table(Of LnkContactToIPObject)
		Get
			Return Me.GetTable(Of LnkContactToIPObject)
		End Get
	End Property
	
	Public ReadOnly Property LnkContractToDocument() As System.Data.Linq.Table(Of LnkContractToDocument)
		Get
			Return Me.GetTable(Of LnkContractToDocument)
		End Get
	End Property
	
	Public ReadOnly Property LnkCustomerContractToProviderContract() As System.Data.Linq.Table(Of LnkCustomerContractToProviderContract)
		Get
			Return Me.GetTable(Of LnkCustomerContractToProviderContract)
		End Get
	End Property
	
	Public ReadOnly Property LnkDatacenterDeviceToSan() As System.Data.Linq.Table(Of LnkDatacenterDeviceToSan)
		Get
			Return Me.GetTable(Of LnkDatacenterDeviceToSan)
		End Get
	End Property
	
	Public ReadOnly Property LnkDocumentToFunctionalCI() As System.Data.Linq.Table(Of LnkDocumentToFunctionalCI)
		Get
			Return Me.GetTable(Of LnkDocumentToFunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkDocumentToIPObject() As System.Data.Linq.Table(Of LnkDocumentToIPObject)
		Get
			Return Me.GetTable(Of LnkDocumentToIPObject)
		End Get
	End Property
	
	Public ReadOnly Property LnkDocumentToLicence() As System.Data.Linq.Table(Of LnkDocumentToLicence)
		Get
			Return Me.GetTable(Of LnkDocumentToLicence)
		End Get
	End Property
	
	Public ReadOnly Property LnkDocumentToSoftware() As System.Data.Linq.Table(Of LnkDocumentToSoftware)
		Get
			Return Me.GetTable(Of LnkDocumentToSoftware)
		End Get
	End Property
	
	Public ReadOnly Property LnkFunctionalCIToOrganization() As System.Data.Linq.Table(Of LnkFunctionalCIToOrganization)
		Get
			Return Me.GetTable(Of LnkFunctionalCIToOrganization)
		End Get
	End Property
	
	Public ReadOnly Property LnkFunctionalCIToProviderContract() As System.Data.Linq.Table(Of LnkFunctionalCIToProviderContract)
		Get
			Return Me.GetTable(Of LnkFunctionalCIToProviderContract)
		End Get
	End Property
	
	Public ReadOnly Property LnkIPAddressToIPAddress() As System.Data.Linq.Table(Of LnkIPAddressToIPAddress)
		Get
			Return Me.GetTable(Of LnkIPAddressToIPAddress)
		End Get
	End Property
	
	Public ReadOnly Property LnkIPInterfaceToIPAddress() As System.Data.Linq.Table(Of LnkIPInterfaceToIPAddress)
		Get
			Return Me.GetTable(Of LnkIPInterfaceToIPAddress)
		End Get
	End Property
	
	Public ReadOnly Property LnkIPSubnetToLocation() As System.Data.Linq.Table(Of LnkIPSubnetToLocation)
		Get
			Return Me.GetTable(Of LnkIPSubnetToLocation)
		End Get
	End Property
	
	Public ReadOnly Property LnkIPSubnetToVLAN() As System.Data.Linq.Table(Of LnkIPSubnetToVLAN)
		Get
			Return Me.GetTable(Of LnkIPSubnetToVLAN)
		End Get
	End Property
	
	Public ReadOnly Property LnkPasswdToFunctionalCI() As System.Data.Linq.Table(Of LnkPasswdToFunctionalCI)
		Get
			Return Me.GetTable(Of LnkPasswdToFunctionalCI)
		End Get
	End Property
	
	Public ReadOnly Property LnkPhysicalInterfaceToVLAN() As System.Data.Linq.Table(Of LnkPhysicalInterfaceToVLAN)
		Get
			Return Me.GetTable(Of LnkPhysicalInterfaceToVLAN)
		End Get
	End Property
	
	Public ReadOnly Property LnkServerToVolume() As System.Data.Linq.Table(Of LnkServerToVolume)
		Get
			Return Me.GetTable(Of LnkServerToVolume)
		End Get
	End Property
	
	Public ReadOnly Property LnkSubnetToVLAN() As System.Data.Linq.Table(Of LnkSubnetToVLAN)
		Get
			Return Me.GetTable(Of LnkSubnetToVLAN)
		End Get
	End Property
	
	Public ReadOnly Property LnkVirtualDeviceToVolume() As System.Data.Linq.Table(Of LnkVirtualDeviceToVolume)
		Get
			Return Me.GetTable(Of LnkVirtualDeviceToVolume)
		End Get
	End Property
	
	Public ReadOnly Property Location() As System.Data.Linq.Table(Of Location)
		Get
			Return Me.GetTable(Of Location)
		End Get
	End Property
	
	Public ReadOnly Property LogicalInterface() As System.Data.Linq.Table(Of LogicalInterface)
		Get
			Return Me.GetTable(Of LogicalInterface)
		End Get
	End Property
	
	Public ReadOnly Property LogicalVolume() As System.Data.Linq.Table(Of LogicalVolume)
		Get
			Return Me.GetTable(Of LogicalVolume)
		End Get
	End Property
	
	Public ReadOnly Property Logs() As System.Data.Linq.Table(Of Logs)
		Get
			Return Me.GetTable(Of Logs)
		End Get
	End Property
	
	Public ReadOnly Property Messages() As System.Data.Linq.Table(Of Messages)
		Get
			Return Me.GetTable(Of Messages)
		End Get
	End Property
	
	Public ReadOnly Property Middleware() As System.Data.Linq.Table(Of Middleware)
		Get
			Return Me.GetTable(Of Middleware)
		End Get
	End Property
	
	Public ReadOnly Property MiddlewareInstance() As System.Data.Linq.Table(Of MiddlewareInstance)
		Get
			Return Me.GetTable(Of MiddlewareInstance)
		End Get
	End Property
	
	Public ReadOnly Property NAS() As System.Data.Linq.Table(Of NAS)
		Get
			Return Me.GetTable(Of NAS)
		End Get
	End Property
	
	Public ReadOnly Property NetworkDevice() As System.Data.Linq.Table(Of NetworkDevice)
		Get
			Return Me.GetTable(Of NetworkDevice)
		End Get
	End Property
	
	Public ReadOnly Property NetworkInterface() As System.Data.Linq.Table(Of NetworkInterface)
		Get
			Return Me.GetTable(Of NetworkInterface)
		End Get
	End Property
	
	Public ReadOnly Property Organization() As System.Data.Linq.Table(Of Organization)
		Get
			Return Me.GetTable(Of Organization)
		End Get
	End Property
	
	Public ReadOnly Property OSFamily() As System.Data.Linq.Table(Of OSFamily)
		Get
			Return Me.GetTable(Of OSFamily)
		End Get
	End Property
	
	Public ReadOnly Property OSLicence() As System.Data.Linq.Table(Of OSLicence)
		Get
			Return Me.GetTable(Of OSLicence)
		End Get
	End Property
	
	Public ReadOnly Property OSVersion() As System.Data.Linq.Table(Of OSVersion)
		Get
			Return Me.GetTable(Of OSVersion)
		End Get
	End Property
	
	Public ReadOnly Property Passwd() As System.Data.Linq.Table(Of Passwd)
		Get
			Return Me.GetTable(Of Passwd)
		End Get
	End Property
	
	Public ReadOnly Property Peripheral() As System.Data.Linq.Table(Of Peripheral)
		Get
			Return Me.GetTable(Of Peripheral)
		End Get
	End Property
	
	Public ReadOnly Property PhysicalDevice() As System.Data.Linq.Table(Of PhysicalDevice)
		Get
			Return Me.GetTable(Of PhysicalDevice)
		End Get
	End Property
	
	Public ReadOnly Property PhysicalInterface() As System.Data.Linq.Table(Of PhysicalInterface)
		Get
			Return Me.GetTable(Of PhysicalInterface)
		End Get
	End Property
	
	Public ReadOnly Property ProviderContract() As System.Data.Linq.Table(Of ProviderContract)
		Get
			Return Me.GetTable(Of ProviderContract)
		End Get
	End Property
	
	Public ReadOnly Property Rack() As System.Data.Linq.Table(Of Rack)
		Get
			Return Me.GetTable(Of Rack)
		End Get
	End Property
	
	Public ReadOnly Property SANSwitch() As System.Data.Linq.Table(Of SANSwitch)
		Get
			Return Me.GetTable(Of SANSwitch)
		End Get
	End Property
	
	Public ReadOnly Property SecurityStrategy() As System.Data.Linq.Table(Of SecurityStrategy)
		Get
			Return Me.GetTable(Of SecurityStrategy)
		End Get
	End Property
	
	Public ReadOnly Property Server() As System.Data.Linq.Table(Of Server)
		Get
			Return Me.GetTable(Of Server)
		End Get
	End Property
	
	Public ReadOnly Property Software() As System.Data.Linq.Table(Of Software)
		Get
			Return Me.GetTable(Of Software)
		End Get
	End Property
	
	Public ReadOnly Property SoftwareInstance() As System.Data.Linq.Table(Of SoftwareInstance)
		Get
			Return Me.GetTable(Of SoftwareInstance)
		End Get
	End Property
	
	Public ReadOnly Property SoftwareLicence() As System.Data.Linq.Table(Of SoftwareLicence)
		Get
			Return Me.GetTable(Of SoftwareLicence)
		End Get
	End Property
	
	Public ReadOnly Property StorageSystem() As System.Data.Linq.Table(Of StorageSystem)
		Get
			Return Me.GetTable(Of StorageSystem)
		End Get
	End Property
	
	Public ReadOnly Property Typology() As System.Data.Linq.Table(Of Typology)
		Get
			Return Me.GetTable(Of Typology)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of Users)
		Get
			Return Me.GetTable(Of Users)
		End Get
	End Property
	
	Public ReadOnly Property VirtualDevice() As System.Data.Linq.Table(Of VirtualDevice)
		Get
			Return Me.GetTable(Of VirtualDevice)
		End Get
	End Property
	
	Public ReadOnly Property VirtualHost() As System.Data.Linq.Table(Of VirtualHost)
		Get
			Return Me.GetTable(Of VirtualHost)
		End Get
	End Property
	
	Public ReadOnly Property VirtualMachine() As System.Data.Linq.Table(Of VirtualMachine)
		Get
			Return Me.GetTable(Of VirtualMachine)
		End Get
	End Property
	
	Public ReadOnly Property VisualAuthorization() As System.Data.Linq.Table(Of VisualAuthorization)
		Get
			Return Me.GetTable(Of VisualAuthorization)
		End Get
	End Property
	
	Public ReadOnly Property VLAN() As System.Data.Linq.Table(Of VLAN)
		Get
			Return Me.GetTable(Of VLAN)
		End Get
	End Property
	
	Public ReadOnly Property WANLink() As System.Data.Linq.Table(Of WANLink)
		Get
			Return Me.GetTable(Of WANLink)
		End Get
	End Property
	
	Public ReadOnly Property WebApplication() As System.Data.Linq.Table(Of WebApplication)
		Get
			Return Me.GetTable(Of WebApplication)
		End Get
	End Property
End Class

<Table(Name:="dbo.ApplicationSolution")>  _
Partial Public Class ApplicationSolution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_application_status As Integer
	
	Private _redundancy As String
	
	Private _code_sla As System.Nullable(Of Integer)
	
	Private _fault_effects As String
	
	Private _attention As String
	
	Private __IsDeleted As Boolean
	
	Private _LnkApplicationSolutionToFunctionalCI As EntitySet(Of LnkApplicationSolutionToFunctionalCI)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_application_statusChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_application_statusChanged()
    End Sub
    Partial Private Sub OnredundancyChanging(value As String)
    End Sub
    Partial Private Sub OnredundancyChanged()
    End Sub
    Partial Private Sub Oncode_slaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_slaChanged()
    End Sub
    Partial Private Sub Onfault_effectsChanging(value As String)
    End Sub
    Partial Private Sub Onfault_effectsChanged()
    End Sub
    Partial Private Sub OnattentionChanging(value As String)
    End Sub
    Partial Private Sub OnattentionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkApplicationSolutionToFunctionalCI = New EntitySet(Of LnkApplicationSolutionToFunctionalCI)(AddressOf Me.attach_LnkApplicationSolutionToFunctionalCI, AddressOf Me.detach_LnkApplicationSolutionToFunctionalCI)
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_application_status", DbType:="Int NOT NULL")>  _
	Public Property code_application_status() As Integer
		Get
			Return Me._code_application_status
		End Get
		Set
			If ((Me._code_application_status = value)  _
						= false) Then
				Me.Oncode_application_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_application_status = value
				Me.SendPropertyChanged("code_application_status")
				Me.Oncode_application_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_redundancy", DbType:="VarChar(50)")>  _
	Public Property redundancy() As String
		Get
			Return Me._redundancy
		End Get
		Set
			If (String.Equals(Me._redundancy, value) = false) Then
				Me.OnredundancyChanging(value)
				Me.SendPropertyChanging
				Me._redundancy = value
				Me.SendPropertyChanged("redundancy")
				Me.OnredundancyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_sla", DbType:="Int")>  _
	Public Property code_sla() As System.Nullable(Of Integer)
		Get
			Return Me._code_sla
		End Get
		Set
			If (Me._code_sla.Equals(value) = false) Then
				Me.Oncode_slaChanging(value)
				Me.SendPropertyChanging
				Me._code_sla = value
				Me.SendPropertyChanged("code_sla")
				Me.Oncode_slaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fault_effects", DbType:="NVarChar(50)")>  _
	Public Property fault_effects() As String
		Get
			Return Me._fault_effects
		End Get
		Set
			If (String.Equals(Me._fault_effects, value) = false) Then
				Me.Onfault_effectsChanging(value)
				Me.SendPropertyChanging
				Me._fault_effects = value
				Me.SendPropertyChanged("fault_effects")
				Me.Onfault_effectsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_attention", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property attention() As String
		Get
			Return Me._attention
		End Get
		Set
			If (String.Equals(Me._attention, value) = false) Then
				Me.OnattentionChanging(value)
				Me.SendPropertyChanging
				Me._attention = value
				Me.SendPropertyChanged("attention")
				Me.OnattentionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ApplicationSolution_LnkApplicationSolutionToFunctionalCI", Storage:="_LnkApplicationSolutionToFunctionalCI", OtherKey:="applicationsolution_identify")>  _
	Public Property LnkApplicationSolutionToFunctionalCI() As EntitySet(Of LnkApplicationSolutionToFunctionalCI)
		Get
			Return Me._LnkApplicationSolutionToFunctionalCI
		End Get
		Set
			Me._LnkApplicationSolutionToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_ApplicationSolution", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.ApplicationSolution = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationSolution = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkApplicationSolutionToFunctionalCI(ByVal entity As LnkApplicationSolutionToFunctionalCI)
		Me.SendPropertyChanging
		entity.ApplicationSolution = Me
	End Sub
	
	Private Sub detach_LnkApplicationSolutionToFunctionalCI(ByVal entity As LnkApplicationSolutionToFunctionalCI)
		Me.SendPropertyChanging
		entity.ApplicationSolution = Nothing
	End Sub
End Class

<Table(Name:="dbo.WebServer")>  _
Partial Public Class WebServer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _WebApplication As EntitySet(Of WebApplication)
	
	Private _SoftwareInstance As EntityRef(Of SoftwareInstance)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WebApplication = New EntitySet(Of WebApplication)(AddressOf Me.attach_WebApplication, AddressOf Me.detach_WebApplication)
		Me._SoftwareInstance = CType(Nothing, EntityRef(Of SoftwareInstance))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._SoftwareInstance.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="WebServer_WebApplication", Storage:="_WebApplication", OtherKey:="webserver_identify")>  _
	Public Property WebApplication() As EntitySet(Of WebApplication)
		Get
			Return Me._WebApplication
		End Get
		Set
			Me._WebApplication.Assign(value)
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_WebServer", Storage:="_SoftwareInstance", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property SoftwareInstance() As SoftwareInstance
		Get
			Return Me._SoftwareInstance.Entity
		End Get
		Set
			Dim previousValue As SoftwareInstance = Me._SoftwareInstance.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SoftwareInstance.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SoftwareInstance.Entity = Nothing
					previousValue.WebServer = Nothing
				End If
				Me._SoftwareInstance.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WebServer = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SoftwareInstance")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WebApplication(ByVal entity As WebApplication)
		Me.SendPropertyChanging
		entity.WebServer = Me
	End Sub
	
	Private Sub detach_WebApplication(ByVal entity As WebApplication)
		Me.SendPropertyChanging
		entity.WebServer = Nothing
	End Sub
End Class

<Table(Name:="dbo.Backups")>  _
Partial Public Class Backups
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _backuper_identify As Integer
	
	Private _name As String
	
	Private _code_backup_type As String
	
	Private _backup_content As String
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _LnkBackupsToFunctionalCI As EntitySet(Of LnkBackupsToFunctionalCI)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onbackuper_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onbackuper_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Oncode_backup_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncode_backup_typeChanged()
    End Sub
    Partial Private Sub Onbackup_contentChanging(value As String)
    End Sub
    Partial Private Sub Onbackup_contentChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkBackupsToFunctionalCI = New EntitySet(Of LnkBackupsToFunctionalCI)(AddressOf Me.attach_LnkBackupsToFunctionalCI, AddressOf Me.detach_LnkBackupsToFunctionalCI)
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_backuper_identify", DbType:="Int NOT NULL")>  _
	Public Property backuper_identify() As Integer
		Get
			Return Me._backuper_identify
		End Get
		Set
			If ((Me._backuper_identify = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onbackuper_identifyChanging(value)
				Me.SendPropertyChanging
				Me._backuper_identify = value
				Me.SendPropertyChanged("backuper_identify")
				Me.Onbackuper_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_backup_type", DbType:="NVarChar(50)")>  _
	Public Property code_backup_type() As String
		Get
			Return Me._code_backup_type
		End Get
		Set
			If (String.Equals(Me._code_backup_type, value) = false) Then
				Me.Oncode_backup_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_backup_type = value
				Me.SendPropertyChanged("code_backup_type")
				Me.Oncode_backup_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_backup_content", DbType:="NVarChar(100)")>  _
	Public Property backup_content() As String
		Get
			Return Me._backup_content
		End Get
		Set
			If (String.Equals(Me._backup_content, value) = false) Then
				Me.Onbackup_contentChanging(value)
				Me.SendPropertyChanging
				Me._backup_content = value
				Me.SendPropertyChanged("backup_content")
				Me.Onbackup_contentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Backups_LnkBackupsToFunctionalCI", Storage:="_LnkBackupsToFunctionalCI", ThisKey:="_Identify", OtherKey:="backups_identify")>  _
	Public Property LnkBackupsToFunctionalCI() As EntitySet(Of LnkBackupsToFunctionalCI)
		Get
			Return Me._LnkBackupsToFunctionalCI
		End Get
		Set
			Me._LnkBackupsToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Backups", Storage:="_PhysicalDevice", ThisKey:="backuper_identify", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.Backups.Remove(Me)
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Backups.Add(Me)
					Me._backuper_identify = value.id
				Else
					Me._backuper_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkBackupsToFunctionalCI(ByVal entity As LnkBackupsToFunctionalCI)
		Me.SendPropertyChanging
		entity.Backups = Me
	End Sub
	
	Private Sub detach_LnkBackupsToFunctionalCI(ByVal entity As LnkBackupsToFunctionalCI)
		Me.SendPropertyChanging
		entity.Backups = Nothing
	End Sub
End Class

<Table(Name:="dbo.Blank")>  _
Partial Public Class Blank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Change")>  _
Partial Public Class Change
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _date As Date
	
	Private _user_name As String
	
	Private _code_origin As Integer
	
	Private _ChangeOp As EntitySet(Of ChangeOp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub Oncode_originChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_originChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOp = New EntitySet(Of ChangeOp)(AddressOf Me.attach_ChangeOp, AddressOf Me.detach_ChangeOp)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="date", Storage:="_date", DbType:="DateTime NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_user_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_origin", DbType:="Int NOT NULL")>  _
	Public Property code_origin() As Integer
		Get
			Return Me._code_origin
		End Get
		Set
			If ((Me._code_origin = value)  _
						= false) Then
				Me.Oncode_originChanging(value)
				Me.SendPropertyChanging
				Me._code_origin = value
				Me.SendPropertyChanged("code_origin")
				Me.Oncode_originChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Change_ChangeOp", Storage:="_ChangeOp", ThisKey:="_Identify", OtherKey:="change_identify")>  _
	Public Property ChangeOp() As EntitySet(Of ChangeOp)
		Get
			Return Me._ChangeOp
		End Get
		Set
			Me._ChangeOp.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChangeOp(ByVal entity As ChangeOp)
		Me.SendPropertyChanging
		entity.Change = Me
	End Sub
	
	Private Sub detach_ChangeOp(ByVal entity As ChangeOp)
		Me.SendPropertyChanging
		entity.Change = Nothing
	End Sub
End Class

<Table(Name:="dbo.ChangeOp")>  _
Partial Public Class ChangeOp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _change_identify As Integer
	
	Private _objclass As String
	
	Private _objkey As Integer
	
	Private _optype As String
	
	Private _ChangeOpCreate As EntityRef(Of ChangeOpCreate)
	
	Private _ChangeOpDelete As EntityRef(Of ChangeOpDelete)
	
	Private _ChangeOpLinks As EntityRef(Of ChangeOpLinks)
	
	Private _ChangeOpSetAtt As EntityRef(Of ChangeOpSetAtt)
	
	Private _Change As EntityRef(Of Change)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onchange_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onchange_identifyChanged()
    End Sub
    Partial Private Sub OnobjclassChanging(value As String)
    End Sub
    Partial Private Sub OnobjclassChanged()
    End Sub
    Partial Private Sub OnobjkeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnobjkeyChanged()
    End Sub
    Partial Private Sub OnoptypeChanging(value As String)
    End Sub
    Partial Private Sub OnoptypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpCreate = CType(Nothing, EntityRef(Of ChangeOpCreate))
		Me._ChangeOpDelete = CType(Nothing, EntityRef(Of ChangeOpDelete))
		Me._ChangeOpLinks = CType(Nothing, EntityRef(Of ChangeOpLinks))
		Me._ChangeOpSetAtt = CType(Nothing, EntityRef(Of ChangeOpSetAtt))
		Me._Change = CType(Nothing, EntityRef(Of Change))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_change_identify", DbType:="Int NOT NULL")>  _
	Public Property change_identify() As Integer
		Get
			Return Me._change_identify
		End Get
		Set
			If ((Me._change_identify = value)  _
						= false) Then
				If Me._Change.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onchange_identifyChanging(value)
				Me.SendPropertyChanging
				Me._change_identify = value
				Me.SendPropertyChanged("change_identify")
				Me.Onchange_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_objclass", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property objclass() As String
		Get
			Return Me._objclass
		End Get
		Set
			If (String.Equals(Me._objclass, value) = false) Then
				Me.OnobjclassChanging(value)
				Me.SendPropertyChanging
				Me._objclass = value
				Me.SendPropertyChanged("objclass")
				Me.OnobjclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_objkey", DbType:="Int NOT NULL")>  _
	Public Property objkey() As Integer
		Get
			Return Me._objkey
		End Get
		Set
			If ((Me._objkey = value)  _
						= false) Then
				Me.OnobjkeyChanging(value)
				Me.SendPropertyChanging
				Me._objkey = value
				Me.SendPropertyChanged("objkey")
				Me.OnobjkeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_optype", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property optype() As String
		Get
			Return Me._optype
		End Get
		Set
			If (String.Equals(Me._optype, value) = false) Then
				Me.OnoptypeChanging(value)
				Me.SendPropertyChanging
				Me._optype = value
				Me.SendPropertyChanged("optype")
				Me.OnoptypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpCreate", Storage:="_ChangeOpCreate", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpCreate() As ChangeOpCreate
		Get
			Return Me._ChangeOpCreate.Entity
		End Get
		Set
			Dim previousValue As ChangeOpCreate = Me._ChangeOpCreate.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpCreate.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpCreate.Entity = Nothing
					previousValue.ChangeOp = Nothing
				End If
				Me._ChangeOpCreate.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOp = Me
				End If
				Me.SendPropertyChanged("ChangeOpCreate")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpDelete", Storage:="_ChangeOpDelete", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpDelete() As ChangeOpDelete
		Get
			Return Me._ChangeOpDelete.Entity
		End Get
		Set
			Dim previousValue As ChangeOpDelete = Me._ChangeOpDelete.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpDelete.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpDelete.Entity = Nothing
					previousValue.ChangeOp = Nothing
				End If
				Me._ChangeOpDelete.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOp = Me
				End If
				Me.SendPropertyChanged("ChangeOpDelete")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpLinks", Storage:="_ChangeOpLinks", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpLinks() As ChangeOpLinks
		Get
			Return Me._ChangeOpLinks.Entity
		End Get
		Set
			Dim previousValue As ChangeOpLinks = Me._ChangeOpLinks.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpLinks.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpLinks.Entity = Nothing
					previousValue.ChangeOp = Nothing
				End If
				Me._ChangeOpLinks.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOp = Me
				End If
				Me.SendPropertyChanged("ChangeOpLinks")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpSetAtt", Storage:="_ChangeOpSetAtt", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpSetAtt() As ChangeOpSetAtt
		Get
			Return Me._ChangeOpSetAtt.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAtt = Me._ChangeOpSetAtt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAtt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAtt.Entity = Nothing
					previousValue.ChangeOp = Nothing
				End If
				Me._ChangeOpSetAtt.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOp = Me
				End If
				Me.SendPropertyChanged("ChangeOpSetAtt")
			End If
		End Set
	End Property
	
	<Association(Name:="Change_ChangeOp", Storage:="_Change", ThisKey:="change_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Change() As Change
		Get
			Return Me._Change.Entity
		End Get
		Set
			Dim previousValue As Change = Me._Change.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Change.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Change.Entity = Nothing
					previousValue.ChangeOp.Remove(Me)
				End If
				Me._Change.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOp.Add(Me)
					Me._change_identify = value._Identify
				Else
					Me._change_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Change")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpCreate")>  _
Partial Public Class ChangeOpCreate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _ChangeOp As EntityRef(Of ChangeOp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOp = CType(Nothing, EntityRef(Of ChangeOp))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpCreate", Storage:="_ChangeOp", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property ChangeOp() As ChangeOp
		Get
			Return Me._ChangeOp.Entity
		End Get
		Set
			Dim previousValue As ChangeOp = Me._ChangeOp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOp.Entity = Nothing
					previousValue.ChangeOpCreate = Nothing
				End If
				Me._ChangeOp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpCreate = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpDelete")>  _
Partial Public Class ChangeOpDelete
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _fclass As String
	
	Private _fname As String
	
	Private _ChangeOp As EntityRef(Of ChangeOp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfclassChanging(value As String)
    End Sub
    Partial Private Sub OnfclassChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOp = CType(Nothing, EntityRef(Of ChangeOp))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fclass", DbType:="VarChar(100)")>  _
	Public Property fclass() As String
		Get
			Return Me._fclass
		End Get
		Set
			If (String.Equals(Me._fclass, value) = false) Then
				Me.OnfclassChanging(value)
				Me.SendPropertyChanging
				Me._fclass = value
				Me.SendPropertyChanged("fclass")
				Me.OnfclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fname", DbType:="VarChar(100)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpDelete", Storage:="_ChangeOp", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property ChangeOp() As ChangeOp
		Get
			Return Me._ChangeOp.Entity
		End Get
		Set
			Dim previousValue As ChangeOp = Me._ChangeOp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOp.Entity = Nothing
					previousValue.ChangeOpDelete = Nothing
				End If
				Me._ChangeOp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpDelete = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpLinks")>  _
Partial Public Class ChangeOpLinks
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _item_class As String
	
	Private _item_identify As System.Nullable(Of Integer)
	
	Private _ChangeOpLinksAddRemove As EntityRef(Of ChangeOpLinksAddRemove)
	
	Private _ChangeOp As EntityRef(Of ChangeOp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onitem_classChanging(value As String)
    End Sub
    Partial Private Sub Onitem_classChanged()
    End Sub
    Partial Private Sub Onitem_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onitem_identifyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpLinksAddRemove = CType(Nothing, EntityRef(Of ChangeOpLinksAddRemove))
		Me._ChangeOp = CType(Nothing, EntityRef(Of ChangeOp))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item_class", DbType:="VarChar(100)")>  _
	Public Property item_class() As String
		Get
			Return Me._item_class
		End Get
		Set
			If (String.Equals(Me._item_class, value) = false) Then
				Me.Onitem_classChanging(value)
				Me.SendPropertyChanging
				Me._item_class = value
				Me.SendPropertyChanged("item_class")
				Me.Onitem_classChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item_identify", DbType:="Int")>  _
	Public Property item_identify() As System.Nullable(Of Integer)
		Get
			Return Me._item_identify
		End Get
		Set
			If (Me._item_identify.Equals(value) = false) Then
				Me.Onitem_identifyChanging(value)
				Me.SendPropertyChanging
				Me._item_identify = value
				Me.SendPropertyChanged("item_identify")
				Me.Onitem_identifyChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpLinks_ChangeOpLinksAddRemove", Storage:="_ChangeOpLinksAddRemove", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpLinksAddRemove() As ChangeOpLinksAddRemove
		Get
			Return Me._ChangeOpLinksAddRemove.Entity
		End Get
		Set
			Dim previousValue As ChangeOpLinksAddRemove = Me._ChangeOpLinksAddRemove.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpLinksAddRemove.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpLinksAddRemove.Entity = Nothing
					previousValue.ChangeOpLinks = Nothing
				End If
				Me._ChangeOpLinksAddRemove.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOpLinks = Me
				End If
				Me.SendPropertyChanged("ChangeOpLinksAddRemove")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpLinks", Storage:="_ChangeOp", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property ChangeOp() As ChangeOp
		Get
			Return Me._ChangeOp.Entity
		End Get
		Set
			Dim previousValue As ChangeOp = Me._ChangeOp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOp.Entity = Nothing
					previousValue.ChangeOpLinks = Nothing
				End If
				Me._ChangeOp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpLinks = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpLinksAddRemove")>  _
Partial Public Class ChangeOpLinksAddRemove
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _type As String
	
	Private _ChangeOpLinks As EntityRef(Of ChangeOpLinks)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpLinks = CType(Nothing, EntityRef(Of ChangeOpLinks))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOpLinks.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="VarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpLinks_ChangeOpLinksAddRemove", Storage:="_ChangeOpLinks", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ChangeOpLinks() As ChangeOpLinks
		Get
			Return Me._ChangeOpLinks.Entity
		End Get
		Set
			Dim previousValue As ChangeOpLinks = Me._ChangeOpLinks.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpLinks.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpLinks.Entity = Nothing
					previousValue.ChangeOpLinksAddRemove = Nothing
				End If
				Me._ChangeOpLinks.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpLinksAddRemove = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOpLinks")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpSetAtt")>  _
Partial Public Class ChangeOpSetAtt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _attcode As String
	
	Private _ChangeOpSetAttPwd As EntityRef(Of ChangeOpSetAttPwd)
	
	Private _ChangeOpSetAttScalar As EntityRef(Of ChangeOpSetAttScalar)
	
	Private _ChangeOpSetAttText As EntityRef(Of ChangeOpSetAttText)
	
	Private _ChangeOpSetAttUrl As EntityRef(Of ChangeOpSetAttUrl)
	
	Private _ChangeOp As EntityRef(Of ChangeOp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnattcodeChanging(value As String)
    End Sub
    Partial Private Sub OnattcodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpSetAttPwd = CType(Nothing, EntityRef(Of ChangeOpSetAttPwd))
		Me._ChangeOpSetAttScalar = CType(Nothing, EntityRef(Of ChangeOpSetAttScalar))
		Me._ChangeOpSetAttText = CType(Nothing, EntityRef(Of ChangeOpSetAttText))
		Me._ChangeOpSetAttUrl = CType(Nothing, EntityRef(Of ChangeOpSetAttUrl))
		Me._ChangeOp = CType(Nothing, EntityRef(Of ChangeOp))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_attcode", DbType:="VarChar(50)")>  _
	Public Property attcode() As String
		Get
			Return Me._attcode
		End Get
		Set
			If (String.Equals(Me._attcode, value) = false) Then
				Me.OnattcodeChanging(value)
				Me.SendPropertyChanging
				Me._attcode = value
				Me.SendPropertyChanged("attcode")
				Me.OnattcodeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttPwd", Storage:="_ChangeOpSetAttPwd", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpSetAttPwd() As ChangeOpSetAttPwd
		Get
			Return Me._ChangeOpSetAttPwd.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAttPwd = Me._ChangeOpSetAttPwd.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAttPwd.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAttPwd.Entity = Nothing
					previousValue.ChangeOpSetAtt = Nothing
				End If
				Me._ChangeOpSetAttPwd.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOpSetAtt = Me
				End If
				Me.SendPropertyChanged("ChangeOpSetAttPwd")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttScalar", Storage:="_ChangeOpSetAttScalar", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpSetAttScalar() As ChangeOpSetAttScalar
		Get
			Return Me._ChangeOpSetAttScalar.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAttScalar = Me._ChangeOpSetAttScalar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAttScalar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAttScalar.Entity = Nothing
					previousValue.ChangeOpSetAtt = Nothing
				End If
				Me._ChangeOpSetAttScalar.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOpSetAtt = Me
				End If
				Me.SendPropertyChanged("ChangeOpSetAttScalar")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttText", Storage:="_ChangeOpSetAttText", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpSetAttText() As ChangeOpSetAttText
		Get
			Return Me._ChangeOpSetAttText.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAttText = Me._ChangeOpSetAttText.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAttText.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAttText.Entity = Nothing
					previousValue.ChangeOpSetAtt = Nothing
				End If
				Me._ChangeOpSetAttText.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOpSetAtt = Me
				End If
				Me.SendPropertyChanged("ChangeOpSetAttText")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttUrl", Storage:="_ChangeOpSetAttUrl", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ChangeOpSetAttUrl() As ChangeOpSetAttUrl
		Get
			Return Me._ChangeOpSetAttUrl.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAttUrl = Me._ChangeOpSetAttUrl.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAttUrl.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAttUrl.Entity = Nothing
					previousValue.ChangeOpSetAtt = Nothing
				End If
				Me._ChangeOpSetAttUrl.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ChangeOpSetAtt = Me
				End If
				Me.SendPropertyChanged("ChangeOpSetAttUrl")
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOp_ChangeOpSetAtt", Storage:="_ChangeOp", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property ChangeOp() As ChangeOp
		Get
			Return Me._ChangeOp.Entity
		End Get
		Set
			Dim previousValue As ChangeOp = Me._ChangeOp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOp.Entity = Nothing
					previousValue.ChangeOpSetAtt = Nothing
				End If
				Me._ChangeOp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpSetAtt = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpSetAttPwd")>  _
Partial Public Class ChangeOpSetAttPwd
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _prev_pwd_hash As String
	
	Private _prev_pwd_salt As String
	
	Private _ChangeOpSetAtt As EntityRef(Of ChangeOpSetAtt)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onprev_pwd_hashChanging(value As String)
    End Sub
    Partial Private Sub Onprev_pwd_hashChanged()
    End Sub
    Partial Private Sub Onprev_pwd_saltChanging(value As String)
    End Sub
    Partial Private Sub Onprev_pwd_saltChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpSetAtt = CType(Nothing, EntityRef(Of ChangeOpSetAtt))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOpSetAtt.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_prev_pwd_hash", DbType:="NVarChar(200)")>  _
	Public Property prev_pwd_hash() As String
		Get
			Return Me._prev_pwd_hash
		End Get
		Set
			If (String.Equals(Me._prev_pwd_hash, value) = false) Then
				Me.Onprev_pwd_hashChanging(value)
				Me.SendPropertyChanging
				Me._prev_pwd_hash = value
				Me.SendPropertyChanged("prev_pwd_hash")
				Me.Onprev_pwd_hashChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_prev_pwd_salt", DbType:="NVarChar(200)")>  _
	Public Property prev_pwd_salt() As String
		Get
			Return Me._prev_pwd_salt
		End Get
		Set
			If (String.Equals(Me._prev_pwd_salt, value) = false) Then
				Me.Onprev_pwd_saltChanging(value)
				Me.SendPropertyChanging
				Me._prev_pwd_salt = value
				Me.SendPropertyChanged("prev_pwd_salt")
				Me.Onprev_pwd_saltChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttPwd", Storage:="_ChangeOpSetAtt", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ChangeOpSetAtt() As ChangeOpSetAtt
		Get
			Return Me._ChangeOpSetAtt.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAtt = Me._ChangeOpSetAtt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAtt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAtt.Entity = Nothing
					previousValue.ChangeOpSetAttPwd = Nothing
				End If
				Me._ChangeOpSetAtt.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpSetAttPwd = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOpSetAtt")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpSetAttScalar")>  _
Partial Public Class ChangeOpSetAttScalar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _oldvalue As String
	
	Private _newvalue As String
	
	Private _ChangeOpSetAtt As EntityRef(Of ChangeOpSetAtt)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnoldvalueChanging(value As String)
    End Sub
    Partial Private Sub OnoldvalueChanged()
    End Sub
    Partial Private Sub OnnewvalueChanging(value As String)
    End Sub
    Partial Private Sub OnnewvalueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpSetAtt = CType(Nothing, EntityRef(Of ChangeOpSetAtt))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOpSetAtt.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_oldvalue", DbType:="VarChar(1000)")>  _
	Public Property oldvalue() As String
		Get
			Return Me._oldvalue
		End Get
		Set
			If (String.Equals(Me._oldvalue, value) = false) Then
				Me.OnoldvalueChanging(value)
				Me.SendPropertyChanging
				Me._oldvalue = value
				Me.SendPropertyChanged("oldvalue")
				Me.OnoldvalueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_newvalue", DbType:="VarChar(1000)")>  _
	Public Property newvalue() As String
		Get
			Return Me._newvalue
		End Get
		Set
			If (String.Equals(Me._newvalue, value) = false) Then
				Me.OnnewvalueChanging(value)
				Me.SendPropertyChanging
				Me._newvalue = value
				Me.SendPropertyChanged("newvalue")
				Me.OnnewvalueChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttScalar", Storage:="_ChangeOpSetAtt", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ChangeOpSetAtt() As ChangeOpSetAtt
		Get
			Return Me._ChangeOpSetAtt.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAtt = Me._ChangeOpSetAtt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAtt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAtt.Entity = Nothing
					previousValue.ChangeOpSetAttScalar = Nothing
				End If
				Me._ChangeOpSetAtt.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpSetAttScalar = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOpSetAtt")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpSetAttText")>  _
Partial Public Class ChangeOpSetAttText
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _oldvalue As String
	
	Private _newvalue As String
	
	Private _ChangeOpSetAtt As EntityRef(Of ChangeOpSetAtt)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnoldvalueChanging(value As String)
    End Sub
    Partial Private Sub OnoldvalueChanged()
    End Sub
    Partial Private Sub OnnewvalueChanging(value As String)
    End Sub
    Partial Private Sub OnnewvalueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpSetAtt = CType(Nothing, EntityRef(Of ChangeOpSetAtt))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOpSetAtt.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_oldvalue", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property oldvalue() As String
		Get
			Return Me._oldvalue
		End Get
		Set
			If (String.Equals(Me._oldvalue, value) = false) Then
				Me.OnoldvalueChanging(value)
				Me.SendPropertyChanging
				Me._oldvalue = value
				Me.SendPropertyChanged("oldvalue")
				Me.OnoldvalueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_newvalue", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property newvalue() As String
		Get
			Return Me._newvalue
		End Get
		Set
			If (String.Equals(Me._newvalue, value) = false) Then
				Me.OnnewvalueChanging(value)
				Me.SendPropertyChanging
				Me._newvalue = value
				Me.SendPropertyChanged("newvalue")
				Me.OnnewvalueChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttText", Storage:="_ChangeOpSetAtt", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ChangeOpSetAtt() As ChangeOpSetAtt
		Get
			Return Me._ChangeOpSetAtt.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAtt = Me._ChangeOpSetAtt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAtt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAtt.Entity = Nothing
					previousValue.ChangeOpSetAttText = Nothing
				End If
				Me._ChangeOpSetAtt.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpSetAttText = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOpSetAtt")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ChangeOpSetAttUrl")>  _
Partial Public Class ChangeOpSetAttUrl
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _oldvalue As String
	
	Private _newvalue As String
	
	Private _ChangeOpSetAtt As EntityRef(Of ChangeOpSetAtt)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnoldvalueChanging(value As String)
    End Sub
    Partial Private Sub OnoldvalueChanged()
    End Sub
    Partial Private Sub OnnewvalueChanging(value As String)
    End Sub
    Partial Private Sub OnnewvalueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChangeOpSetAtt = CType(Nothing, EntityRef(Of ChangeOpSetAtt))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ChangeOpSetAtt.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_oldvalue", DbType:="VarChar(2000)")>  _
	Public Property oldvalue() As String
		Get
			Return Me._oldvalue
		End Get
		Set
			If (String.Equals(Me._oldvalue, value) = false) Then
				Me.OnoldvalueChanging(value)
				Me.SendPropertyChanging
				Me._oldvalue = value
				Me.SendPropertyChanged("oldvalue")
				Me.OnoldvalueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_newvalue", DbType:="VarChar(2000)")>  _
	Public Property newvalue() As String
		Get
			Return Me._newvalue
		End Get
		Set
			If (String.Equals(Me._newvalue, value) = false) Then
				Me.OnnewvalueChanging(value)
				Me.SendPropertyChanging
				Me._newvalue = value
				Me.SendPropertyChanged("newvalue")
				Me.OnnewvalueChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ChangeOpSetAtt_ChangeOpSetAttUrl", Storage:="_ChangeOpSetAtt", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ChangeOpSetAtt() As ChangeOpSetAtt
		Get
			Return Me._ChangeOpSetAtt.Entity
		End Get
		Set
			Dim previousValue As ChangeOpSetAtt = Me._ChangeOpSetAtt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChangeOpSetAtt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChangeOpSetAtt.Entity = Nothing
					previousValue.ChangeOpSetAttUrl = Nothing
				End If
				Me._ChangeOpSetAtt.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChangeOpSetAttUrl = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ChangeOpSetAtt")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CIGroup")>  _
Partial Public Class CIGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _code_cigroup_status As System.Nullable(Of Integer)
	
	Private _organization_identify As System.Nullable(Of Integer)
	
	Private _description As String
	
	Private _code_cigroup_type As System.Nullable(Of Integer)
	
	Private _parent_identify As System.Nullable(Of Integer)
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _LnkCIGroupToCI As EntitySet(Of LnkCIGroupToCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Oncode_cigroup_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_cigroup_statusChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Oncode_cigroup_typeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_cigroup_typeChanged()
    End Sub
    Partial Private Sub Onparent_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identifyChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkCIGroupToCI = New EntitySet(Of LnkCIGroupToCI)(AddressOf Me.attach_LnkCIGroupToCI, AddressOf Me.detach_LnkCIGroupToCI)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_cigroup_status", DbType:="Int")>  _
	Public Property code_cigroup_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_cigroup_status
		End Get
		Set
			If (Me._code_cigroup_status.Equals(value) = false) Then
				Me.Oncode_cigroup_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_cigroup_status = value
				Me.SendPropertyChanged("code_cigroup_status")
				Me.Oncode_cigroup_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int")>  _
	Public Property organization_identify() As System.Nullable(Of Integer)
		Get
			Return Me._organization_identify
		End Get
		Set
			If (Me._organization_identify.Equals(value) = false) Then
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_cigroup_type", DbType:="Int")>  _
	Public Property code_cigroup_type() As System.Nullable(Of Integer)
		Get
			Return Me._code_cigroup_type
		End Get
		Set
			If (Me._code_cigroup_type.Equals(value) = false) Then
				Me.Oncode_cigroup_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_cigroup_type = value
				Me.SendPropertyChanged("code_cigroup_type")
				Me.Oncode_cigroup_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify", DbType:="Int")>  _
	Public Property parent_identify() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify
		End Get
		Set
			If (Me._parent_identify.Equals(value) = false) Then
				Me.Onparent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify = value
				Me.SendPropertyChanged("parent_identify")
				Me.Onparent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CIGroup_LnkCIGroupToCI", Storage:="_LnkCIGroupToCI", ThisKey:="_Identify", OtherKey:="cigroup_identify")>  _
	Public Property LnkCIGroupToCI() As EntitySet(Of LnkCIGroupToCI)
		Get
			Return Me._LnkCIGroupToCI
		End Get
		Set
			Me._LnkCIGroupToCI.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkCIGroupToCI(ByVal entity As LnkCIGroupToCI)
		Me.SendPropertyChanging
		entity.CIGroup = Me
	End Sub
	
	Private Sub detach_LnkCIGroupToCI(ByVal entity As LnkCIGroupToCI)
		Me.SendPropertyChanging
		entity.CIGroup = Nothing
	End Sub
End Class

<Table(Name:="dbo.Code")>  _
Partial Public Class Code
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _t As String
	
	Private _v As Integer
	
	Private _label As String
	
	Private _des As String
	
	Private __SortKey As System.Nullable(Of Decimal)
	
	Private __IsDeleted As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OntChanging(value As String)
    End Sub
    Partial Private Sub OntChanged()
    End Sub
    Partial Private Sub OnvChanging(value As Integer)
    End Sub
    Partial Private Sub OnvChanged()
    End Sub
    Partial Private Sub OnlabelChanging(value As String)
    End Sub
    Partial Private Sub OnlabelChanged()
    End Sub
    Partial Private Sub OndesChanging(value As String)
    End Sub
    Partial Private Sub OndesChanged()
    End Sub
    Partial Private Sub On_SortKeyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub On_SortKeyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_t", DbType:="NVarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property t() As String
		Get
			Return Me._t
		End Get
		Set
			If (String.Equals(Me._t, value) = false) Then
				Me.OntChanging(value)
				Me.SendPropertyChanging
				Me._t = value
				Me.SendPropertyChanged("t")
				Me.OntChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_v", DbType:="Int NOT NULL")>  _
	Public Property v() As Integer
		Get
			Return Me._v
		End Get
		Set
			If ((Me._v = value)  _
						= false) Then
				Me.OnvChanging(value)
				Me.SendPropertyChanging
				Me._v = value
				Me.SendPropertyChanged("v")
				Me.OnvChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_label", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property label() As String
		Get
			Return Me._label
		End Get
		Set
			If (String.Equals(Me._label, value) = false) Then
				Me.OnlabelChanging(value)
				Me.SendPropertyChanging
				Me._label = value
				Me.SendPropertyChanged("label")
				Me.OnlabelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_des", DbType:="NVarChar(100)")>  _
	Public Property des() As String
		Get
			Return Me._des
		End Get
		Set
			If (String.Equals(Me._des, value) = false) Then
				Me.OndesChanging(value)
				Me.SendPropertyChanging
				Me._des = value
				Me.SendPropertyChanged("des")
				Me.OndesChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_SortKey]", Storage:="__SortKey", DbType:="Decimal(28,14)")>  _
	Public Property _SortKey() As System.Nullable(Of Decimal)
		Get
			Return Me.__SortKey
		End Get
		Set
			If (Me.__SortKey.Equals(value) = false) Then
				Me.On_SortKeyChanging(value)
				Me.SendPropertyChanging
				Me.__SortKey = value
				Me.SendPropertyChanged("_SortKey")
				Me.On_SortKeyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ConfigAccess")>  _
Partial Public Class ConfigAccess
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _remote_ip1_identify As Integer
	
	Private _local_ip1_identify As Integer
	
	Private _remote_ip2_identify As System.Nullable(Of Integer)
	
	Private _local_ip2_identify As System.Nullable(Of Integer)
	
	Private _access_port As String
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _IPAddressv4 As EntityRef(Of IPAddressv4)
	
	Private _IPAddressv41 As EntityRef(Of IPAddressv4)
	
	Private _IPAddressv42 As EntityRef(Of IPAddressv4)
	
	Private _IPAddressv43 As EntityRef(Of IPAddressv4)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onremote_ip1_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onremote_ip1_identifyChanged()
    End Sub
    Partial Private Sub Onlocal_ip1_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onlocal_ip1_identifyChanged()
    End Sub
    Partial Private Sub Onremote_ip2_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onremote_ip2_identifyChanged()
    End Sub
    Partial Private Sub Onlocal_ip2_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlocal_ip2_identifyChanged()
    End Sub
    Partial Private Sub Onaccess_portChanging(value As String)
    End Sub
    Partial Private Sub Onaccess_portChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPAddressv4 = CType(Nothing, EntityRef(Of IPAddressv4))
		Me._IPAddressv41 = CType(Nothing, EntityRef(Of IPAddressv4))
		Me._IPAddressv42 = CType(Nothing, EntityRef(Of IPAddressv4))
		Me._IPAddressv43 = CType(Nothing, EntityRef(Of IPAddressv4))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_remote_ip1_identify", DbType:="Int NOT NULL")>  _
	Public Property remote_ip1_identify() As Integer
		Get
			Return Me._remote_ip1_identify
		End Get
		Set
			If ((Me._remote_ip1_identify = value)  _
						= false) Then
				If Me._IPAddressv42.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onremote_ip1_identifyChanging(value)
				Me.SendPropertyChanging
				Me._remote_ip1_identify = value
				Me.SendPropertyChanged("remote_ip1_identify")
				Me.Onremote_ip1_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_local_ip1_identify", DbType:="Int NOT NULL")>  _
	Public Property local_ip1_identify() As Integer
		Get
			Return Me._local_ip1_identify
		End Get
		Set
			If ((Me._local_ip1_identify = value)  _
						= false) Then
				If Me._IPAddressv4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocal_ip1_identifyChanging(value)
				Me.SendPropertyChanging
				Me._local_ip1_identify = value
				Me.SendPropertyChanged("local_ip1_identify")
				Me.Onlocal_ip1_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_remote_ip2_identify", DbType:="Int")>  _
	Public Property remote_ip2_identify() As System.Nullable(Of Integer)
		Get
			Return Me._remote_ip2_identify
		End Get
		Set
			If (Me._remote_ip2_identify.Equals(value) = false) Then
				If Me._IPAddressv43.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onremote_ip2_identifyChanging(value)
				Me.SendPropertyChanging
				Me._remote_ip2_identify = value
				Me.SendPropertyChanged("remote_ip2_identify")
				Me.Onremote_ip2_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_local_ip2_identify", DbType:="Int")>  _
	Public Property local_ip2_identify() As System.Nullable(Of Integer)
		Get
			Return Me._local_ip2_identify
		End Get
		Set
			If (Me._local_ip2_identify.Equals(value) = false) Then
				If Me._IPAddressv41.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocal_ip2_identifyChanging(value)
				Me.SendPropertyChanging
				Me._local_ip2_identify = value
				Me.SendPropertyChanged("local_ip2_identify")
				Me.Onlocal_ip2_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_access_port", DbType:="NVarChar(10)")>  _
	Public Property access_port() As String
		Get
			Return Me._access_port
		End Get
		Set
			If (String.Equals(Me._access_port, value) = false) Then
				Me.Onaccess_portChanging(value)
				Me.SendPropertyChanging
				Me._access_port = value
				Me.SendPropertyChanged("access_port")
				Me.Onaccess_portChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess", Storage:="_IPAddressv4", ThisKey:="local_ip1_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv4() As IPAddressv4
		Get
			Return Me._IPAddressv4.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv4.Entity = Nothing
					previousValue.ConfigAccess.Remove(Me)
				End If
				Me._IPAddressv4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigAccess.Add(Me)
					Me._local_ip1_identify = value.id
				Else
					Me._local_ip1_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddressv4")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess1", Storage:="_IPAddressv41", ThisKey:="local_ip2_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv41() As IPAddressv4
		Get
			Return Me._IPAddressv41.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv41.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv41.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv41.Entity = Nothing
					previousValue.ConfigAccess1.Remove(Me)
				End If
				Me._IPAddressv41.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigAccess1.Add(Me)
					Me._local_ip2_identify = value.id
				Else
					Me._local_ip2_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPAddressv41")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess2", Storage:="_IPAddressv42", ThisKey:="remote_ip1_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv42() As IPAddressv4
		Get
			Return Me._IPAddressv42.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv42.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv42.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv42.Entity = Nothing
					previousValue.ConfigAccess2.Remove(Me)
				End If
				Me._IPAddressv42.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigAccess2.Add(Me)
					Me._remote_ip1_identify = value.id
				Else
					Me._remote_ip1_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddressv42")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess3", Storage:="_IPAddressv43", ThisKey:="remote_ip2_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv43() As IPAddressv4
		Get
			Return Me._IPAddressv43.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv43.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv43.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv43.Entity = Nothing
					previousValue.ConfigAccess3.Remove(Me)
				End If
				Me._IPAddressv43.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigAccess3.Add(Me)
					Me._remote_ip2_identify = value.id
				Else
					Me._remote_ip2_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPAddressv43")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ConfigPort")>  _
Partial Public Class ConfigPort
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ip1_identify As Integer
	
	Private _ip2_identify As Integer
	
	Private _port1 As Integer
	
	Private _port2 As Integer
	
	Private _type As Integer
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _SecurityStrategy As EntitySet(Of SecurityStrategy)
	
	Private _IPAddressv4 As EntityRef(Of IPAddressv4)
	
	Private _IPAddressv41 As EntityRef(Of IPAddressv4)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onip1_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onip1_identifyChanged()
    End Sub
    Partial Private Sub Onip2_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onip2_identifyChanged()
    End Sub
    Partial Private Sub Onport1Changing(value As Integer)
    End Sub
    Partial Private Sub Onport1Changed()
    End Sub
    Partial Private Sub Onport2Changing(value As Integer)
    End Sub
    Partial Private Sub Onport2Changed()
    End Sub
    Partial Private Sub OntypeChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SecurityStrategy = New EntitySet(Of SecurityStrategy)(AddressOf Me.attach_SecurityStrategy, AddressOf Me.detach_SecurityStrategy)
		Me._IPAddressv4 = CType(Nothing, EntityRef(Of IPAddressv4))
		Me._IPAddressv41 = CType(Nothing, EntityRef(Of IPAddressv4))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip1_identify", DbType:="Int NOT NULL")>  _
	Public Property ip1_identify() As Integer
		Get
			Return Me._ip1_identify
		End Get
		Set
			If ((Me._ip1_identify = value)  _
						= false) Then
				If Me._IPAddressv41.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onip1_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ip1_identify = value
				Me.SendPropertyChanged("ip1_identify")
				Me.Onip1_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip2_identify", DbType:="Int NOT NULL")>  _
	Public Property ip2_identify() As Integer
		Get
			Return Me._ip2_identify
		End Get
		Set
			If ((Me._ip2_identify = value)  _
						= false) Then
				If Me._IPAddressv4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onip2_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ip2_identify = value
				Me.SendPropertyChanged("ip2_identify")
				Me.Onip2_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_port1", DbType:="Int NOT NULL")>  _
	Public Property port1() As Integer
		Get
			Return Me._port1
		End Get
		Set
			If ((Me._port1 = value)  _
						= false) Then
				Me.Onport1Changing(value)
				Me.SendPropertyChanging
				Me._port1 = value
				Me.SendPropertyChanged("port1")
				Me.Onport1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_port2", DbType:="Int NOT NULL")>  _
	Public Property port2() As Integer
		Get
			Return Me._port2
		End Get
		Set
			If ((Me._port2 = value)  _
						= false) Then
				Me.Onport2Changing(value)
				Me.SendPropertyChanging
				Me._port2 = value
				Me.SendPropertyChanged("port2")
				Me.Onport2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="Int NOT NULL")>  _
	Public Property type() As Integer
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ConfigPort_SecurityStrategy", Storage:="_SecurityStrategy", ThisKey:="_Identify", OtherKey:="config_port_identify")>  _
	Public Property SecurityStrategy() As EntitySet(Of SecurityStrategy)
		Get
			Return Me._SecurityStrategy
		End Get
		Set
			Me._SecurityStrategy.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigPort", Storage:="_IPAddressv4", ThisKey:="ip2_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv4() As IPAddressv4
		Get
			Return Me._IPAddressv4.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv4.Entity = Nothing
					previousValue.ConfigPort.Remove(Me)
				End If
				Me._IPAddressv4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigPort.Add(Me)
					Me._ip2_identify = value.id
				Else
					Me._ip2_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddressv4")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigPort1", Storage:="_IPAddressv41", ThisKey:="ip1_identify", IsForeignKey:=true)>  _
	Public Property IPAddressv41() As IPAddressv4
		Get
			Return Me._IPAddressv41.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv41.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv41.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv41.Entity = Nothing
					previousValue.ConfigPort1.Remove(Me)
				End If
				Me._IPAddressv41.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfigPort1.Add(Me)
					Me._ip1_identify = value.id
				Else
					Me._ip1_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddressv41")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SecurityStrategy(ByVal entity As SecurityStrategy)
		Me.SendPropertyChanging
		entity.ConfigPort = Me
	End Sub
	
	Private Sub detach_SecurityStrategy(ByVal entity As SecurityStrategy)
		Me.SendPropertyChanging
		entity.ConfigPort = Nothing
	End Sub
End Class

<Table(Name:="dbo.ConnectableCI")>  _
Partial Public Class ConnectableCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
	Private _LnkConnectableCIToNetworkDevice As EntitySet(Of LnkConnectableCIToNetworkDevice)
	
	Private _PhysicalInterface As EntityRef(Of PhysicalInterface)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		Me._LnkConnectableCIToNetworkDevice = New EntitySet(Of LnkConnectableCIToNetworkDevice)(AddressOf Me.attach_LnkConnectableCIToNetworkDevice, AddressOf Me.detach_LnkConnectableCIToNetworkDevice)
		Me._PhysicalInterface = CType(Nothing, EntityRef(Of PhysicalInterface))
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_DataCenterDevice", Storage:="_DataCenterDevice", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.ConnectableCI = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ConnectableCI = Me
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_LnkConnectableCIToNetworkDevice", Storage:="_LnkConnectableCIToNetworkDevice", OtherKey:="connectableci_identify")>  _
	Public Property LnkConnectableCIToNetworkDevice() As EntitySet(Of LnkConnectableCIToNetworkDevice)
		Get
			Return Me._LnkConnectableCIToNetworkDevice
		End Get
		Set
			Me._LnkConnectableCIToNetworkDevice.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_PhysicalInterface", Storage:="_PhysicalInterface", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property PhysicalInterface() As PhysicalInterface
		Get
			Return Me._PhysicalInterface.Entity
		End Get
		Set
			Dim previousValue As PhysicalInterface = Me._PhysicalInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalInterface.Entity = Nothing
					previousValue.ConnectableCI = Nothing
				End If
				Me._PhysicalInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ConnectableCI = Me
				End If
				Me.SendPropertyChanged("PhysicalInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_ConnectableCI", Storage:="_PhysicalDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.ConnectableCI = Nothing
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConnectableCI = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkConnectableCIToNetworkDevice(ByVal entity As LnkConnectableCIToNetworkDevice)
		Me.SendPropertyChanging
		entity.ConnectableCI = Me
	End Sub
	
	Private Sub detach_LnkConnectableCIToNetworkDevice(ByVal entity As LnkConnectableCIToNetworkDevice)
		Me.SendPropertyChanging
		entity.ConnectableCI = Nothing
	End Sub
End Class

<Table(Name:="dbo.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _location_identify As Integer
	
	Private _organization_identify As Integer
	
	Private _name As String
	
	Private _phone As String
	
	Private _mobile_phone As String
	
	Private _qq As String
	
	Private _weixin As String
	
	Private _email As String
	
	Private _duty As String
	
	Private _description As String
	
	Private _picture As String
	
	Private __IsDeleted As Boolean
	
	Private _Contract As EntitySet(Of Contract)
	
	Private _Contract1 As EntitySet(Of Contract)
	
	Private _LnkContactToContract As EntitySet(Of LnkContactToContract)
	
	Private _LnkContactToFunctionalCI As EntitySet(Of LnkContactToFunctionalCI)
	
	Private _LnkContactToIPObject As EntitySet(Of LnkContactToIPObject)
	
	Private _Users As EntitySet(Of Users)
	
	Private _Location As EntityRef(Of Location)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onlocation_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onlocation_identifyChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub Onmobile_phoneChanging(value As String)
    End Sub
    Partial Private Sub Onmobile_phoneChanged()
    End Sub
    Partial Private Sub OnqqChanging(value As String)
    End Sub
    Partial Private Sub OnqqChanged()
    End Sub
    Partial Private Sub OnweixinChanging(value As String)
    End Sub
    Partial Private Sub OnweixinChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OndutyChanging(value As String)
    End Sub
    Partial Private Sub OndutyChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnpictureChanging(value As String)
    End Sub
    Partial Private Sub OnpictureChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contract = New EntitySet(Of Contract)(AddressOf Me.attach_Contract, AddressOf Me.detach_Contract)
		Me._Contract1 = New EntitySet(Of Contract)(AddressOf Me.attach_Contract1, AddressOf Me.detach_Contract1)
		Me._LnkContactToContract = New EntitySet(Of LnkContactToContract)(AddressOf Me.attach_LnkContactToContract, AddressOf Me.detach_LnkContactToContract)
		Me._LnkContactToFunctionalCI = New EntitySet(Of LnkContactToFunctionalCI)(AddressOf Me.attach_LnkContactToFunctionalCI, AddressOf Me.detach_LnkContactToFunctionalCI)
		Me._LnkContactToIPObject = New EntitySet(Of LnkContactToIPObject)(AddressOf Me.attach_LnkContactToIPObject, AddressOf Me.detach_LnkContactToIPObject)
		Me._Users = New EntitySet(Of Users)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
		Me._Location = CType(Nothing, EntityRef(Of Location))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_location_identify", DbType:="Int NOT NULL")>  _
	Public Property location_identify() As Integer
		Get
			Return Me._location_identify
		End Get
		Set
			If ((Me._location_identify = value)  _
						= false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocation_identifyChanging(value)
				Me.SendPropertyChanging
				Me._location_identify = value
				Me.SendPropertyChanged("location_identify")
				Me.Onlocation_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int NOT NULL")>  _
	Public Property organization_identify() As Integer
		Get
			Return Me._organization_identify
		End Get
		Set
			If ((Me._organization_identify = value)  _
						= false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_phone", DbType:="NVarChar(16)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mobile_phone", DbType:="NVarChar(16)")>  _
	Public Property mobile_phone() As String
		Get
			Return Me._mobile_phone
		End Get
		Set
			If (String.Equals(Me._mobile_phone, value) = false) Then
				Me.Onmobile_phoneChanging(value)
				Me.SendPropertyChanging
				Me._mobile_phone = value
				Me.SendPropertyChanged("mobile_phone")
				Me.Onmobile_phoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_qq", DbType:="NVarChar(16)")>  _
	Public Property qq() As String
		Get
			Return Me._qq
		End Get
		Set
			If (String.Equals(Me._qq, value) = false) Then
				Me.OnqqChanging(value)
				Me.SendPropertyChanging
				Me._qq = value
				Me.SendPropertyChanged("qq")
				Me.OnqqChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_weixin", DbType:="NVarChar(16)")>  _
	Public Property weixin() As String
		Get
			Return Me._weixin
		End Get
		Set
			If (String.Equals(Me._weixin, value) = false) Then
				Me.OnweixinChanging(value)
				Me.SendPropertyChanging
				Me._weixin = value
				Me.SendPropertyChanged("weixin")
				Me.OnweixinChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_duty", DbType:="NVarChar(50)")>  _
	Public Property duty() As String
		Get
			Return Me._duty
		End Get
		Set
			If (String.Equals(Me._duty, value) = false) Then
				Me.OndutyChanging(value)
				Me.SendPropertyChanging
				Me._duty = value
				Me.SendPropertyChanged("duty")
				Me.OndutyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_picture", DbType:="NVarChar(100)")>  _
	Public Property picture() As String
		Get
			Return Me._picture
		End Get
		Set
			If (String.Equals(Me._picture, value) = false) Then
				Me.OnpictureChanging(value)
				Me.SendPropertyChanging
				Me._picture = value
				Me.SendPropertyChanged("picture")
				Me.OnpictureChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_Contract", Storage:="_Contract", ThisKey:="_Identify", OtherKey:="buyer_agent_identify")>  _
	Public Property Contract() As EntitySet(Of Contract)
		Get
			Return Me._Contract
		End Get
		Set
			Me._Contract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_Contract1", Storage:="_Contract1", ThisKey:="_Identify", OtherKey:="seller_agent_identify")>  _
	Public Property Contract1() As EntitySet(Of Contract)
		Get
			Return Me._Contract1
		End Get
		Set
			Me._Contract1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToContract", Storage:="_LnkContactToContract", ThisKey:="_Identify", OtherKey:="contact_identify")>  _
	Public Property LnkContactToContract() As EntitySet(Of LnkContactToContract)
		Get
			Return Me._LnkContactToContract
		End Get
		Set
			Me._LnkContactToContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToFunctionalCI", Storage:="_LnkContactToFunctionalCI", ThisKey:="_Identify", OtherKey:="contact_identify")>  _
	Public Property LnkContactToFunctionalCI() As EntitySet(Of LnkContactToFunctionalCI)
		Get
			Return Me._LnkContactToFunctionalCI
		End Get
		Set
			Me._LnkContactToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToIPObject", Storage:="_LnkContactToIPObject", ThisKey:="_Identify", OtherKey:="contact_identify")>  _
	Public Property LnkContactToIPObject() As EntitySet(Of LnkContactToIPObject)
		Get
			Return Me._LnkContactToIPObject
		End Get
		Set
			Me._LnkContactToIPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_Users", Storage:="_Users", ThisKey:="_Identify", OtherKey:="contact_identify")>  _
	Public Property Users() As EntitySet(Of Users)
		Get
			Return Me._Users
		End Get
		Set
			Me._Users.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Location_Contact", Storage:="_Location", ThisKey:="location_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.Contact.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contact.Add(Me)
					Me._location_identify = value._Identify
				Else
					Me._location_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Contact", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.Contact.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contact.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Contract(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_Contract(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
	
	Private Sub attach_Contract1(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Contact1 = Me
	End Sub
	
	Private Sub detach_Contract1(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Contact1 = Nothing
	End Sub
	
	Private Sub attach_LnkContactToContract(ByVal entity As LnkContactToContract)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_LnkContactToContract(ByVal entity As LnkContactToContract)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
	
	Private Sub attach_LnkContactToFunctionalCI(ByVal entity As LnkContactToFunctionalCI)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_LnkContactToFunctionalCI(ByVal entity As LnkContactToFunctionalCI)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
	
	Private Sub attach_LnkContactToIPObject(ByVal entity As LnkContactToIPObject)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_LnkContactToIPObject(ByVal entity As LnkContactToIPObject)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
	
	Private Sub attach_Users(ByVal entity As Users)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_Users(ByVal entity As Users)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
End Class

<Table(Name:="dbo.Contract")>  _
Partial Public Class Contract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _buyer_identify As Integer
	
	Private _seller_identify As Integer
	
	Private _buyer_agent_identify As Integer
	
	Private _seller_agent_identify As Integer
	
	Private _code As String
	
	Private _name As String
	
	Private _type As String
	
	Private _status As String
	
	Private _start_date As System.Nullable(Of Date)
	
	Private _end_date As System.Nullable(Of Date)
	
	Private _cost_unit As String
	
	Private _cost_currency As String
	
	Private _cost As System.Nullable(Of Double)
	
	Private _billing_frequency As String
	
	Private __IsDeleted As Boolean
	
	Private _ContractDetail As EntitySet(Of ContractDetail)
	
	Private _CustomerContract As EntityRef(Of CustomerContract)
	
	Private _LnkContactToContract As EntitySet(Of LnkContactToContract)
	
	Private _LnkContractToDocument As EntitySet(Of LnkContractToDocument)
	
	Private _ProviderContract As EntityRef(Of ProviderContract)
	
	Private _Contact As EntityRef(Of Contact)
	
	Private _Contact1 As EntityRef(Of Contact)
	
	Private _Organization As EntityRef(Of Organization)
	
	Private _Organization1 As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onbuyer_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onbuyer_identifyChanged()
    End Sub
    Partial Private Sub Onseller_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onseller_identifyChanged()
    End Sub
    Partial Private Sub Onbuyer_agent_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onbuyer_agent_identifyChanged()
    End Sub
    Partial Private Sub Onseller_agent_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onseller_agent_identifyChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onstart_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onstart_dateChanged()
    End Sub
    Partial Private Sub Onend_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_dateChanged()
    End Sub
    Partial Private Sub Oncost_unitChanging(value As String)
    End Sub
    Partial Private Sub Oncost_unitChanged()
    End Sub
    Partial Private Sub Oncost_currencyChanging(value As String)
    End Sub
    Partial Private Sub Oncost_currencyChanged()
    End Sub
    Partial Private Sub OncostChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncostChanged()
    End Sub
    Partial Private Sub Onbilling_frequencyChanging(value As String)
    End Sub
    Partial Private Sub Onbilling_frequencyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractDetail = New EntitySet(Of ContractDetail)(AddressOf Me.attach_ContractDetail, AddressOf Me.detach_ContractDetail)
		Me._CustomerContract = CType(Nothing, EntityRef(Of CustomerContract))
		Me._LnkContactToContract = New EntitySet(Of LnkContactToContract)(AddressOf Me.attach_LnkContactToContract, AddressOf Me.detach_LnkContactToContract)
		Me._LnkContractToDocument = New EntitySet(Of LnkContractToDocument)(AddressOf Me.attach_LnkContractToDocument, AddressOf Me.detach_LnkContractToDocument)
		Me._ProviderContract = CType(Nothing, EntityRef(Of ProviderContract))
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		Me._Contact1 = CType(Nothing, EntityRef(Of Contact))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		Me._Organization1 = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_buyer_identify", DbType:="Int NOT NULL")>  _
	Public Property buyer_identify() As Integer
		Get
			Return Me._buyer_identify
		End Get
		Set
			If ((Me._buyer_identify = value)  _
						= false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onbuyer_identifyChanging(value)
				Me.SendPropertyChanging
				Me._buyer_identify = value
				Me.SendPropertyChanged("buyer_identify")
				Me.Onbuyer_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_seller_identify", DbType:="Int NOT NULL")>  _
	Public Property seller_identify() As Integer
		Get
			Return Me._seller_identify
		End Get
		Set
			If ((Me._seller_identify = value)  _
						= false) Then
				If Me._Organization1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onseller_identifyChanging(value)
				Me.SendPropertyChanging
				Me._seller_identify = value
				Me.SendPropertyChanged("seller_identify")
				Me.Onseller_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_buyer_agent_identify", DbType:="Int NOT NULL")>  _
	Public Property buyer_agent_identify() As Integer
		Get
			Return Me._buyer_agent_identify
		End Get
		Set
			If ((Me._buyer_agent_identify = value)  _
						= false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onbuyer_agent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._buyer_agent_identify = value
				Me.SendPropertyChanged("buyer_agent_identify")
				Me.Onbuyer_agent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_seller_agent_identify", DbType:="Int NOT NULL")>  _
	Public Property seller_agent_identify() As Integer
		Get
			Return Me._seller_agent_identify
		End Get
		Set
			If ((Me._seller_agent_identify = value)  _
						= false) Then
				If Me._Contact1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onseller_agent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._seller_agent_identify = value
				Me.SendPropertyChanged("seller_agent_identify")
				Me.Onseller_agent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="NVarChar(20)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="NVarChar(16)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_status", DbType:="NVarChar(4)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_start_date", DbType:="DateTime")>  _
	Public Property start_date() As System.Nullable(Of Date)
		Get
			Return Me._start_date
		End Get
		Set
			If (Me._start_date.Equals(value) = false) Then
				Me.Onstart_dateChanging(value)
				Me.SendPropertyChanging
				Me._start_date = value
				Me.SendPropertyChanged("start_date")
				Me.Onstart_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_end_date", DbType:="DateTime")>  _
	Public Property end_date() As System.Nullable(Of Date)
		Get
			Return Me._end_date
		End Get
		Set
			If (Me._end_date.Equals(value) = false) Then
				Me.Onend_dateChanging(value)
				Me.SendPropertyChanging
				Me._end_date = value
				Me.SendPropertyChanged("end_date")
				Me.Onend_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cost_unit", DbType:="NVarChar(4)")>  _
	Public Property cost_unit() As String
		Get
			Return Me._cost_unit
		End Get
		Set
			If (String.Equals(Me._cost_unit, value) = false) Then
				Me.Oncost_unitChanging(value)
				Me.SendPropertyChanging
				Me._cost_unit = value
				Me.SendPropertyChanged("cost_unit")
				Me.Oncost_unitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cost_currency", DbType:="NVarChar(16)")>  _
	Public Property cost_currency() As String
		Get
			Return Me._cost_currency
		End Get
		Set
			If (String.Equals(Me._cost_currency, value) = false) Then
				Me.Oncost_currencyChanging(value)
				Me.SendPropertyChanging
				Me._cost_currency = value
				Me.SendPropertyChanged("cost_currency")
				Me.Oncost_currencyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cost", DbType:="Float")>  _
	Public Property cost() As System.Nullable(Of Double)
		Get
			Return Me._cost
		End Get
		Set
			If (Me._cost.Equals(value) = false) Then
				Me.OncostChanging(value)
				Me.SendPropertyChanging
				Me._cost = value
				Me.SendPropertyChanged("cost")
				Me.OncostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_billing_frequency", DbType:="NVarChar(20)")>  _
	Public Property billing_frequency() As String
		Get
			Return Me._billing_frequency
		End Get
		Set
			If (String.Equals(Me._billing_frequency, value) = false) Then
				Me.Onbilling_frequencyChanging(value)
				Me.SendPropertyChanging
				Me._billing_frequency = value
				Me.SendPropertyChanged("billing_frequency")
				Me.Onbilling_frequencyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contract_ContractDetail", Storage:="_ContractDetail", ThisKey:="_Identify", OtherKey:="contract_identify")>  _
	Public Property ContractDetail() As EntitySet(Of ContractDetail)
		Get
			Return Me._ContractDetail
		End Get
		Set
			Me._ContractDetail.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contract_CustomerContract", Storage:="_CustomerContract", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property CustomerContract() As CustomerContract
		Get
			Return Me._CustomerContract.Entity
		End Get
		Set
			Dim previousValue As CustomerContract = Me._CustomerContract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CustomerContract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CustomerContract.Entity = Nothing
					previousValue.Contract = Nothing
				End If
				Me._CustomerContract.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Contract = Me
				End If
				Me.SendPropertyChanged("CustomerContract")
			End If
		End Set
	End Property
	
	<Association(Name:="Contract_LnkContactToContract", Storage:="_LnkContactToContract", ThisKey:="_Identify", OtherKey:="contract_identify")>  _
	Public Property LnkContactToContract() As EntitySet(Of LnkContactToContract)
		Get
			Return Me._LnkContactToContract
		End Get
		Set
			Me._LnkContactToContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contract_LnkContractToDocument", Storage:="_LnkContractToDocument", ThisKey:="_Identify", OtherKey:="contract_identify")>  _
	Public Property LnkContractToDocument() As EntitySet(Of LnkContractToDocument)
		Get
			Return Me._LnkContractToDocument
		End Get
		Set
			Me._LnkContractToDocument.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contract_ProviderContract", Storage:="_ProviderContract", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ProviderContract() As ProviderContract
		Get
			Return Me._ProviderContract.Entity
		End Get
		Set
			Dim previousValue As ProviderContract = Me._ProviderContract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProviderContract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProviderContract.Entity = Nothing
					previousValue.Contract = Nothing
				End If
				Me._ProviderContract.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Contract = Me
				End If
				Me.SendPropertyChanged("ProviderContract")
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_Contract", Storage:="_Contact", ThisKey:="buyer_agent_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.Contract.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contract.Add(Me)
					Me._buyer_agent_identify = value._Identify
				Else
					Me._buyer_agent_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_Contract1", Storage:="_Contact1", ThisKey:="seller_agent_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact1() As Contact
		Get
			Return Me._Contact1.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact1.Entity = Nothing
					previousValue.Contract1.Remove(Me)
				End If
				Me._Contact1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contract1.Add(Me)
					Me._seller_agent_identify = value._Identify
				Else
					Me._seller_agent_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contact1")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Contract", Storage:="_Organization", ThisKey:="buyer_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.Contract.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contract.Add(Me)
					Me._buyer_identify = value._Identify
				Else
					Me._buyer_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Contract1", Storage:="_Organization1", ThisKey:="seller_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization1() As Organization
		Get
			Return Me._Organization1.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization1.Entity = Nothing
					previousValue.Contract1.Remove(Me)
				End If
				Me._Organization1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contract1.Add(Me)
					Me._seller_identify = value._Identify
				Else
					Me._seller_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContractDetail(ByVal entity As ContractDetail)
		Me.SendPropertyChanging
		entity.Contract = Me
	End Sub
	
	Private Sub detach_ContractDetail(ByVal entity As ContractDetail)
		Me.SendPropertyChanging
		entity.Contract = Nothing
	End Sub
	
	Private Sub attach_LnkContactToContract(ByVal entity As LnkContactToContract)
		Me.SendPropertyChanging
		entity.Contract = Me
	End Sub
	
	Private Sub detach_LnkContactToContract(ByVal entity As LnkContactToContract)
		Me.SendPropertyChanging
		entity.Contract = Nothing
	End Sub
	
	Private Sub attach_LnkContractToDocument(ByVal entity As LnkContractToDocument)
		Me.SendPropertyChanging
		entity.Contract = Me
	End Sub
	
	Private Sub detach_LnkContractToDocument(ByVal entity As LnkContractToDocument)
		Me.SendPropertyChanging
		entity.Contract = Nothing
	End Sub
End Class

<Table(Name:="dbo.ContractDetail")>  _
Partial Public Class ContractDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _contract_identify As Integer
	
	Private _no As System.Nullable(Of Integer)
	
	Private _name As String
	
	Private _model As String
	
	Private _price As System.Nullable(Of Double)
	
	Private _amount As System.Nullable(Of Short)
	
	Private _purchase_date As System.Nullable(Of Date)
	
	Private _end_of_warranty As System.Nullable(Of Date)
	
	Private _manufacturer As String
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _Contract As EntityRef(Of Contract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncontract_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontract_identifyChanged()
    End Sub
    Partial Private Sub OnnoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnoChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnmodelChanging(value As String)
    End Sub
    Partial Private Sub OnmodelChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub Onpurchase_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onpurchase_dateChanged()
    End Sub
    Partial Private Sub Onend_of_warrantyChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_of_warrantyChanged()
    End Sub
    Partial Private Sub OnmanufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnmanufacturerChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contract = CType(Nothing, EntityRef(Of Contract))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contract_identify", DbType:="Int NOT NULL")>  _
	Public Property contract_identify() As Integer
		Get
			Return Me._contract_identify
		End Get
		Set
			If ((Me._contract_identify = value)  _
						= false) Then
				If Me._Contract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contract_identify = value
				Me.SendPropertyChanged("contract_identify")
				Me.Oncontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_no", DbType:="Int")>  _
	Public Property no() As System.Nullable(Of Integer)
		Get
			Return Me._no
		End Get
		Set
			If (Me._no.Equals(value) = false) Then
				Me.OnnoChanging(value)
				Me.SendPropertyChanging
				Me._no = value
				Me.SendPropertyChanged("no")
				Me.OnnoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_model", DbType:="NVarChar(50)")>  _
	Public Property model() As String
		Get
			Return Me._model
		End Get
		Set
			If (String.Equals(Me._model, value) = false) Then
				Me.OnmodelChanging(value)
				Me.SendPropertyChanging
				Me._model = value
				Me.SendPropertyChanged("model")
				Me.OnmodelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_price", DbType:="Float")>  _
	Public Property price() As System.Nullable(Of Double)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_amount", DbType:="SmallInt")>  _
	Public Property amount() As System.Nullable(Of Short)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_purchase_date", DbType:="DateTime")>  _
	Public Property purchase_date() As System.Nullable(Of Date)
		Get
			Return Me._purchase_date
		End Get
		Set
			If (Me._purchase_date.Equals(value) = false) Then
				Me.Onpurchase_dateChanging(value)
				Me.SendPropertyChanging
				Me._purchase_date = value
				Me.SendPropertyChanged("purchase_date")
				Me.Onpurchase_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_end_of_warranty", DbType:="DateTime")>  _
	Public Property end_of_warranty() As System.Nullable(Of Date)
		Get
			Return Me._end_of_warranty
		End Get
		Set
			If (Me._end_of_warranty.Equals(value) = false) Then
				Me.Onend_of_warrantyChanging(value)
				Me.SendPropertyChanging
				Me._end_of_warranty = value
				Me.SendPropertyChanged("end_of_warranty")
				Me.Onend_of_warrantyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_manufacturer", DbType:="NVarChar(50)")>  _
	Public Property manufacturer() As String
		Get
			Return Me._manufacturer
		End Get
		Set
			If (String.Equals(Me._manufacturer, value) = false) Then
				Me.OnmanufacturerChanging(value)
				Me.SendPropertyChanging
				Me._manufacturer = value
				Me.SendPropertyChanged("manufacturer")
				Me.OnmanufacturerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contract_ContractDetail", Storage:="_Contract", ThisKey:="contract_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contract() As Contract
		Get
			Return Me._Contract.Entity
		End Get
		Set
			Dim previousValue As Contract = Me._Contract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contract.Entity = Nothing
					previousValue.ContractDetail.Remove(Me)
				End If
				Me._Contract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractDetail.Add(Me)
					Me._contract_identify = value._Identify
				Else
					Me._contract_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CustomerContract")>  _
Partial Public Class CustomerContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LnkCustomerContractToProviderContract As EntitySet(Of LnkCustomerContractToProviderContract)
	
	Private _Contract As EntityRef(Of Contract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkCustomerContractToProviderContract = New EntitySet(Of LnkCustomerContractToProviderContract)(AddressOf Me.attach_LnkCustomerContractToProviderContract, AddressOf Me.detach_LnkCustomerContractToProviderContract)
		Me._Contract = CType(Nothing, EntityRef(Of Contract))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Contract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CustomerContract_LnkCustomerContractToProviderContract", Storage:="_LnkCustomerContractToProviderContract", OtherKey:="customercontract_identify")>  _
	Public Property LnkCustomerContractToProviderContract() As EntitySet(Of LnkCustomerContractToProviderContract)
		Get
			Return Me._LnkCustomerContractToProviderContract
		End Get
		Set
			Me._LnkCustomerContractToProviderContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contract_CustomerContract", Storage:="_Contract", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contract() As Contract
		Get
			Return Me._Contract.Entity
		End Get
		Set
			Dim previousValue As Contract = Me._Contract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contract.Entity = Nothing
					previousValue.CustomerContract = Nothing
				End If
				Me._Contract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CustomerContract = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkCustomerContractToProviderContract(ByVal entity As LnkCustomerContractToProviderContract)
		Me.SendPropertyChanging
		entity.CustomerContract = Me
	End Sub
	
	Private Sub detach_LnkCustomerContractToProviderContract(ByVal entity As LnkCustomerContractToProviderContract)
		Me.SendPropertyChanging
		entity.CustomerContract = Nothing
	End Sub
End Class

<Table(Name:="dbo.DatabasesSchema")>  _
Partial Public Class DatabasesSchema
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _dbserver_identify As Integer
	
	Private _farm_identify As Integer
	
	Private _pdb_name As String
	
	Private _comment As String
	
	Private _create_time As System.Nullable(Of Date)
	
	Private _individual As String
	
	Private __IsDeleted As Boolean
	
	Private _DBServer As EntityRef(Of DBServer)
	
	Private _Farm As EntityRef(Of Farm)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ondbserver_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Ondbserver_identifyChanged()
    End Sub
    Partial Private Sub Onfarm_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfarm_identifyChanged()
    End Sub
    Partial Private Sub Onpdb_nameChanging(value As String)
    End Sub
    Partial Private Sub Onpdb_nameChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Oncreate_timeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreate_timeChanged()
    End Sub
    Partial Private Sub OnindividualChanging(value As String)
    End Sub
    Partial Private Sub OnindividualChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DBServer = CType(Nothing, EntityRef(Of DBServer))
		Me._Farm = CType(Nothing, EntityRef(Of Farm))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_dbserver_identify", DbType:="Int NOT NULL")>  _
	Public Property dbserver_identify() As Integer
		Get
			Return Me._dbserver_identify
		End Get
		Set
			If ((Me._dbserver_identify = value)  _
						= false) Then
				If Me._DBServer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondbserver_identifyChanging(value)
				Me.SendPropertyChanging
				Me._dbserver_identify = value
				Me.SendPropertyChanged("dbserver_identify")
				Me.Ondbserver_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_farm_identify", DbType:="Int NOT NULL")>  _
	Public Property farm_identify() As Integer
		Get
			Return Me._farm_identify
		End Get
		Set
			If ((Me._farm_identify = value)  _
						= false) Then
				If Me._Farm.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfarm_identifyChanging(value)
				Me.SendPropertyChanging
				Me._farm_identify = value
				Me.SendPropertyChanged("farm_identify")
				Me.Onfarm_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_pdb_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pdb_name() As String
		Get
			Return Me._pdb_name
		End Get
		Set
			If (String.Equals(Me._pdb_name, value) = false) Then
				Me.Onpdb_nameChanging(value)
				Me.SendPropertyChanging
				Me._pdb_name = value
				Me.SendPropertyChanged("pdb_name")
				Me.Onpdb_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_comment", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_create_time", DbType:="DateTime")>  _
	Public Property create_time() As System.Nullable(Of Date)
		Get
			Return Me._create_time
		End Get
		Set
			If (Me._create_time.Equals(value) = false) Then
				Me.Oncreate_timeChanging(value)
				Me.SendPropertyChanging
				Me._create_time = value
				Me.SendPropertyChanged("create_time")
				Me.Oncreate_timeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_individual", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property individual() As String
		Get
			Return Me._individual
		End Get
		Set
			If (String.Equals(Me._individual, value) = false) Then
				Me.OnindividualChanging(value)
				Me.SendPropertyChanging
				Me._individual = value
				Me.SendPropertyChanged("individual")
				Me.OnindividualChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DBServer_DatabasesSchema", Storage:="_DBServer", ThisKey:="dbserver_identify", IsForeignKey:=true)>  _
	Public Property DBServer() As DBServer
		Get
			Return Me._DBServer.Entity
		End Get
		Set
			Dim previousValue As DBServer = Me._DBServer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DBServer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DBServer.Entity = Nothing
					previousValue.DatabasesSchema.Remove(Me)
				End If
				Me._DBServer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DatabasesSchema.Add(Me)
					Me._dbserver_identify = value.id
				Else
					Me._dbserver_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DBServer")
			End If
		End Set
	End Property
	
	<Association(Name:="Farm_DatabasesSchema", Storage:="_Farm", ThisKey:="farm_identify", IsForeignKey:=true)>  _
	Public Property Farm() As Farm
		Get
			Return Me._Farm.Entity
		End Get
		Set
			Dim previousValue As Farm = Me._Farm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Farm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Farm.Entity = Nothing
					previousValue.DatabasesSchema.Remove(Me)
				End If
				Me._Farm.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DatabasesSchema.Add(Me)
					Me._farm_identify = value.id
				Else
					Me._farm_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Farm")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_DatabasesSchema", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.DatabasesSchema = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DatabasesSchema = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.DataCenterDevice")>  _
Partial Public Class DataCenterDevice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _rack_identify As System.Nullable(Of Integer)
	
	Private _enclosure_identity As System.Nullable(Of Integer)
	
	Private _nb_u As System.Nullable(Of Integer)
	
	Private _managementip As System.Nullable(Of Integer)
	
	Private _redundancy As String
	
	Private __IsDeleted As Boolean
	
	Private _FiberChannelInterface As EntitySet(Of FiberChannelInterface)
	
	Private _LnkDatacenterDeviceToSan As EntitySet(Of LnkDatacenterDeviceToSan)
	
	Private _NAS As EntityRef(Of NAS)
	
	Private _NetworkDevice As EntityRef(Of NetworkDevice)
	
	Private _SANSwitch As EntityRef(Of SANSwitch)
	
	Private _Server As EntityRef(Of Server)
	
	Private _StorageSystem As EntityRef(Of StorageSystem)
	
	Private _ConnectableCI As EntityRef(Of ConnectableCI)
	
	Private _Enclosure As EntityRef(Of Enclosure)
	
	Private _Rack As EntityRef(Of Rack)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onrack_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrack_identifyChanged()
    End Sub
    Partial Private Sub Onenclosure_identityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onenclosure_identityChanged()
    End Sub
    Partial Private Sub Onnb_uChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnb_uChanged()
    End Sub
    Partial Private Sub OnmanagementipChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmanagementipChanged()
    End Sub
    Partial Private Sub OnredundancyChanging(value As String)
    End Sub
    Partial Private Sub OnredundancyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FiberChannelInterface = New EntitySet(Of FiberChannelInterface)(AddressOf Me.attach_FiberChannelInterface, AddressOf Me.detach_FiberChannelInterface)
		Me._LnkDatacenterDeviceToSan = New EntitySet(Of LnkDatacenterDeviceToSan)(AddressOf Me.attach_LnkDatacenterDeviceToSan, AddressOf Me.detach_LnkDatacenterDeviceToSan)
		Me._NAS = CType(Nothing, EntityRef(Of NAS))
		Me._NetworkDevice = CType(Nothing, EntityRef(Of NetworkDevice))
		Me._SANSwitch = CType(Nothing, EntityRef(Of SANSwitch))
		Me._Server = CType(Nothing, EntityRef(Of Server))
		Me._StorageSystem = CType(Nothing, EntityRef(Of StorageSystem))
		Me._ConnectableCI = CType(Nothing, EntityRef(Of ConnectableCI))
		Me._Enclosure = CType(Nothing, EntityRef(Of Enclosure))
		Me._Rack = CType(Nothing, EntityRef(Of Rack))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ConnectableCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rack_identify", DbType:="Int")>  _
	Public Property rack_identify() As System.Nullable(Of Integer)
		Get
			Return Me._rack_identify
		End Get
		Set
			If (Me._rack_identify.Equals(value) = false) Then
				If Me._Rack.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onrack_identifyChanging(value)
				Me.SendPropertyChanging
				Me._rack_identify = value
				Me.SendPropertyChanged("rack_identify")
				Me.Onrack_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_enclosure_identity", DbType:="Int")>  _
	Public Property enclosure_identity() As System.Nullable(Of Integer)
		Get
			Return Me._enclosure_identity
		End Get
		Set
			If (Me._enclosure_identity.Equals(value) = false) Then
				If Me._Enclosure.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onenclosure_identityChanging(value)
				Me.SendPropertyChanging
				Me._enclosure_identity = value
				Me.SendPropertyChanged("enclosure_identity")
				Me.Onenclosure_identityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_nb_u", DbType:="Int")>  _
	Public Property nb_u() As System.Nullable(Of Integer)
		Get
			Return Me._nb_u
		End Get
		Set
			If (Me._nb_u.Equals(value) = false) Then
				Me.Onnb_uChanging(value)
				Me.SendPropertyChanging
				Me._nb_u = value
				Me.SendPropertyChanged("nb_u")
				Me.Onnb_uChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_managementip", DbType:="Int")>  _
	Public Property managementip() As System.Nullable(Of Integer)
		Get
			Return Me._managementip
		End Get
		Set
			If (Me._managementip.Equals(value) = false) Then
				Me.OnmanagementipChanging(value)
				Me.SendPropertyChanging
				Me._managementip = value
				Me.SendPropertyChanged("managementip")
				Me.OnmanagementipChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_redundancy", DbType:="VarChar(50)")>  _
	Public Property redundancy() As String
		Get
			Return Me._redundancy
		End Get
		Set
			If (String.Equals(Me._redundancy, value) = false) Then
				Me.OnredundancyChanging(value)
				Me.SendPropertyChanging
				Me._redundancy = value
				Me.SendPropertyChanged("redundancy")
				Me.OnredundancyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_FiberChannelInterface", Storage:="_FiberChannelInterface", OtherKey:="datacenterdevice_identify")>  _
	Public Property FiberChannelInterface() As EntitySet(Of FiberChannelInterface)
		Get
			Return Me._FiberChannelInterface
		End Get
		Set
			Me._FiberChannelInterface.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_LnkDatacenterDeviceToSan", Storage:="_LnkDatacenterDeviceToSan", OtherKey:="datacenterdevice_id")>  _
	Public Property LnkDatacenterDeviceToSan() As EntitySet(Of LnkDatacenterDeviceToSan)
		Get
			Return Me._LnkDatacenterDeviceToSan
		End Get
		Set
			Me._LnkDatacenterDeviceToSan.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_NAS", Storage:="_NAS", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property NAS() As NAS
		Get
			Return Me._NAS.Entity
		End Get
		Set
			Dim previousValue As NAS = Me._NAS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NAS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NAS.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._NAS.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DataCenterDevice = Me
				End If
				Me.SendPropertyChanged("NAS")
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_NetworkDevice", Storage:="_NetworkDevice", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property NetworkDevice() As NetworkDevice
		Get
			Return Me._NetworkDevice.Entity
		End Get
		Set
			Dim previousValue As NetworkDevice = Me._NetworkDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkDevice.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._NetworkDevice.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DataCenterDevice = Me
				End If
				Me.SendPropertyChanged("NetworkDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_SANSwitch", Storage:="_SANSwitch", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property SANSwitch() As SANSwitch
		Get
			Return Me._SANSwitch.Entity
		End Get
		Set
			Dim previousValue As SANSwitch = Me._SANSwitch.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SANSwitch.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SANSwitch.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._SANSwitch.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DataCenterDevice = Me
				End If
				Me.SendPropertyChanged("SANSwitch")
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_Server", Storage:="_Server", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Server() As Server
		Get
			Return Me._Server.Entity
		End Get
		Set
			Dim previousValue As Server = Me._Server.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Server.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Server.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._Server.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DataCenterDevice = Me
				End If
				Me.SendPropertyChanged("Server")
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_StorageSystem", Storage:="_StorageSystem", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property StorageSystem() As StorageSystem
		Get
			Return Me._StorageSystem.Entity
		End Get
		Set
			Dim previousValue As StorageSystem = Me._StorageSystem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StorageSystem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StorageSystem.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._StorageSystem.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DataCenterDevice = Me
				End If
				Me.SendPropertyChanged("StorageSystem")
			End If
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_DataCenterDevice", Storage:="_ConnectableCI", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ConnectableCI() As ConnectableCI
		Get
			Return Me._ConnectableCI.Entity
		End Get
		Set
			Dim previousValue As ConnectableCI = Me._ConnectableCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConnectableCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConnectableCI.Entity = Nothing
					previousValue.DataCenterDevice = Nothing
				End If
				Me._ConnectableCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataCenterDevice = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ConnectableCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Enclosure_DataCenterDevice", Storage:="_Enclosure", ThisKey:="enclosure_identity", IsForeignKey:=true)>  _
	Public Property Enclosure() As Enclosure
		Get
			Return Me._Enclosure.Entity
		End Get
		Set
			Dim previousValue As Enclosure = Me._Enclosure.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enclosure.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enclosure.Entity = Nothing
					previousValue.DataCenterDevice.Remove(Me)
				End If
				Me._Enclosure.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataCenterDevice.Add(Me)
					Me._enclosure_identity = value.id
				Else
					Me._enclosure_identity = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Enclosure")
			End If
		End Set
	End Property
	
	<Association(Name:="Rack_DataCenterDevice", Storage:="_Rack", ThisKey:="rack_identify", IsForeignKey:=true)>  _
	Public Property Rack() As Rack
		Get
			Return Me._Rack.Entity
		End Get
		Set
			Dim previousValue As Rack = Me._Rack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Rack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Rack.Entity = Nothing
					previousValue.DataCenterDevice.Remove(Me)
				End If
				Me._Rack.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataCenterDevice.Add(Me)
					Me._rack_identify = value.id
				Else
					Me._rack_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Rack")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FiberChannelInterface(ByVal entity As FiberChannelInterface)
		Me.SendPropertyChanging
		entity.DataCenterDevice = Me
	End Sub
	
	Private Sub detach_FiberChannelInterface(ByVal entity As FiberChannelInterface)
		Me.SendPropertyChanging
		entity.DataCenterDevice = Nothing
	End Sub
	
	Private Sub attach_LnkDatacenterDeviceToSan(ByVal entity As LnkDatacenterDeviceToSan)
		Me.SendPropertyChanging
		entity.DataCenterDevice = Me
	End Sub
	
	Private Sub detach_LnkDatacenterDeviceToSan(ByVal entity As LnkDatacenterDeviceToSan)
		Me.SendPropertyChanging
		entity.DataCenterDevice = Nothing
	End Sub
End Class

<Table(Name:="dbo.DBServer")>  _
Partial Public Class DBServer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _DatabasesSchema As EntitySet(Of DatabasesSchema)
	
	Private _SoftwareInstance As EntityRef(Of SoftwareInstance)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DatabasesSchema = New EntitySet(Of DatabasesSchema)(AddressOf Me.attach_DatabasesSchema, AddressOf Me.detach_DatabasesSchema)
		Me._SoftwareInstance = CType(Nothing, EntityRef(Of SoftwareInstance))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._SoftwareInstance.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DBServer_DatabasesSchema", Storage:="_DatabasesSchema", OtherKey:="dbserver_identify")>  _
	Public Property DatabasesSchema() As EntitySet(Of DatabasesSchema)
		Get
			Return Me._DatabasesSchema
		End Get
		Set
			Me._DatabasesSchema.Assign(value)
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_DBServer", Storage:="_SoftwareInstance", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property SoftwareInstance() As SoftwareInstance
		Get
			Return Me._SoftwareInstance.Entity
		End Get
		Set
			Dim previousValue As SoftwareInstance = Me._SoftwareInstance.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SoftwareInstance.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SoftwareInstance.Entity = Nothing
					previousValue.DBServer = Nothing
				End If
				Me._SoftwareInstance.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DBServer = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SoftwareInstance")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DatabasesSchema(ByVal entity As DatabasesSchema)
		Me.SendPropertyChanging
		entity.DBServer = Me
	End Sub
	
	Private Sub detach_DatabasesSchema(ByVal entity As DatabasesSchema)
		Me.SendPropertyChanging
		entity.DBServer = Nothing
	End Sub
End Class

<Table(Name:="dbo.DNSObject")>  _
Partial Public Class DNSObject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _organization_identify As System.Nullable(Of Integer)
	
	Private _name As String
	
	Private _comment As String
	
	Private _finalclass As String
	
	Private __IsDeleted As Boolean
	
	Private _Domain As EntityRef(Of Domain)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Domain = CType(Nothing, EntityRef(Of Domain))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int")>  _
	Public Property organization_identify() As System.Nullable(Of Integer)
		Get
			Return Me._organization_identify
		End Get
		Set
			If (Me._organization_identify.Equals(value) = false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50)")>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DNSObject_Domain", Storage:="_Domain", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Domain() As Domain
		Get
			Return Me._Domain.Entity
		End Get
		Set
			Dim previousValue As Domain = Me._Domain.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Domain.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Domain.Entity = Nothing
					previousValue.DNSObject = Nothing
				End If
				Me._Domain.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DNSObject = Me
				End If
				Me.SendPropertyChanged("Domain")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_DNSObject", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.DNSObject.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DNSObject.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Documents")>  _
Partial Public Class Documents
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _code_document_tyype As System.Nullable(Of Integer)
	
	Private _version As String
	
	Private _code_document_status As System.Nullable(Of Integer)
	
	Private _finalclass As String
	
	Private _description As String
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _LnkContractToDocument As EntitySet(Of LnkContractToDocument)
	
	Private _LnkDocumentToFunctionalCI As EntitySet(Of LnkDocumentToFunctionalCI)
	
	Private _LnkDocumentToIPObject As EntitySet(Of LnkDocumentToIPObject)
	
	Private _LnkDocumentToLicence As EntitySet(Of LnkDocumentToLicence)
	
	Private _LnkDocumentToSoftware As EntitySet(Of LnkDocumentToSoftware)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Oncode_document_tyypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_document_tyypeChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As String)
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    Partial Private Sub Oncode_document_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_document_statusChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkContractToDocument = New EntitySet(Of LnkContractToDocument)(AddressOf Me.attach_LnkContractToDocument, AddressOf Me.detach_LnkContractToDocument)
		Me._LnkDocumentToFunctionalCI = New EntitySet(Of LnkDocumentToFunctionalCI)(AddressOf Me.attach_LnkDocumentToFunctionalCI, AddressOf Me.detach_LnkDocumentToFunctionalCI)
		Me._LnkDocumentToIPObject = New EntitySet(Of LnkDocumentToIPObject)(AddressOf Me.attach_LnkDocumentToIPObject, AddressOf Me.detach_LnkDocumentToIPObject)
		Me._LnkDocumentToLicence = New EntitySet(Of LnkDocumentToLicence)(AddressOf Me.attach_LnkDocumentToLicence, AddressOf Me.detach_LnkDocumentToLicence)
		Me._LnkDocumentToSoftware = New EntitySet(Of LnkDocumentToSoftware)(AddressOf Me.attach_LnkDocumentToSoftware, AddressOf Me.detach_LnkDocumentToSoftware)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_document_tyype", DbType:="Int")>  _
	Public Property code_document_tyype() As System.Nullable(Of Integer)
		Get
			Return Me._code_document_tyype
		End Get
		Set
			If (Me._code_document_tyype.Equals(value) = false) Then
				Me.Oncode_document_tyypeChanging(value)
				Me.SendPropertyChanging
				Me._code_document_tyype = value
				Me.SendPropertyChanged("code_document_tyype")
				Me.Oncode_document_tyypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_version", DbType:="NVarChar(50)")>  _
	Public Property version() As String
		Get
			Return Me._version
		End Get
		Set
			If (String.Equals(Me._version, value) = false) Then
				Me.OnversionChanging(value)
				Me.SendPropertyChanging
				Me._version = value
				Me.SendPropertyChanged("version")
				Me.OnversionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_document_status", DbType:="Int")>  _
	Public Property code_document_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_document_status
		End Get
		Set
			If (Me._code_document_status.Equals(value) = false) Then
				Me.Oncode_document_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_document_status = value
				Me.SendPropertyChanged("code_document_status")
				Me.Oncode_document_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkContractToDocument", Storage:="_LnkContractToDocument", ThisKey:="_Identify", OtherKey:="document_identify")>  _
	Public Property LnkContractToDocument() As EntitySet(Of LnkContractToDocument)
		Get
			Return Me._LnkContractToDocument
		End Get
		Set
			Me._LnkContractToDocument.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToFunctionalCI", Storage:="_LnkDocumentToFunctionalCI", ThisKey:="_Identify", OtherKey:="document_identify")>  _
	Public Property LnkDocumentToFunctionalCI() As EntitySet(Of LnkDocumentToFunctionalCI)
		Get
			Return Me._LnkDocumentToFunctionalCI
		End Get
		Set
			Me._LnkDocumentToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToIPObject", Storage:="_LnkDocumentToIPObject", ThisKey:="_Identify", OtherKey:="document_identify")>  _
	Public Property LnkDocumentToIPObject() As EntitySet(Of LnkDocumentToIPObject)
		Get
			Return Me._LnkDocumentToIPObject
		End Get
		Set
			Me._LnkDocumentToIPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToLicence", Storage:="_LnkDocumentToLicence", ThisKey:="_Identify", OtherKey:="document_identify")>  _
	Public Property LnkDocumentToLicence() As EntitySet(Of LnkDocumentToLicence)
		Get
			Return Me._LnkDocumentToLicence
		End Get
		Set
			Me._LnkDocumentToLicence.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToSoftware", Storage:="_LnkDocumentToSoftware", ThisKey:="_Identify", OtherKey:="document_identify")>  _
	Public Property LnkDocumentToSoftware() As EntitySet(Of LnkDocumentToSoftware)
		Get
			Return Me._LnkDocumentToSoftware
		End Get
		Set
			Me._LnkDocumentToSoftware.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkContractToDocument(ByVal entity As LnkContractToDocument)
		Me.SendPropertyChanging
		entity.Documents = Me
	End Sub
	
	Private Sub detach_LnkContractToDocument(ByVal entity As LnkContractToDocument)
		Me.SendPropertyChanging
		entity.Documents = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToFunctionalCI(ByVal entity As LnkDocumentToFunctionalCI)
		Me.SendPropertyChanging
		entity.Documents = Me
	End Sub
	
	Private Sub detach_LnkDocumentToFunctionalCI(ByVal entity As LnkDocumentToFunctionalCI)
		Me.SendPropertyChanging
		entity.Documents = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToIPObject(ByVal entity As LnkDocumentToIPObject)
		Me.SendPropertyChanging
		entity.Documents = Me
	End Sub
	
	Private Sub detach_LnkDocumentToIPObject(ByVal entity As LnkDocumentToIPObject)
		Me.SendPropertyChanging
		entity.Documents = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToLicence(ByVal entity As LnkDocumentToLicence)
		Me.SendPropertyChanging
		entity.Documents = Me
	End Sub
	
	Private Sub detach_LnkDocumentToLicence(ByVal entity As LnkDocumentToLicence)
		Me.SendPropertyChanging
		entity.Documents = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToSoftware(ByVal entity As LnkDocumentToSoftware)
		Me.SendPropertyChanging
		entity.Documents = Me
	End Sub
	
	Private Sub detach_LnkDocumentToSoftware(ByVal entity As LnkDocumentToSoftware)
		Me.SendPropertyChanging
		entity.Documents = Nothing
	End Sub
End Class

<Table(Name:="dbo.Domain")>  _
Partial Public Class Domain
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _parent_identify As System.Nullable(Of Integer)
	
	Private _requestor_identify As System.Nullable(Of Integer)
	
	Private _release_date As System.Nullable(Of Date)
	
	Private _registrar_identify As System.Nullable(Of Integer)
	
	Private _validity_start As System.Nullable(Of Date)
	
	Private _validity_end As System.Nullable(Of Date)
	
	Private _code_renewal As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _DNSObject As EntityRef(Of DNSObject)
	
	Private _Organization As EntityRef(Of Organization)
	
	Private _Users As EntityRef(Of Users)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onparent_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identifyChanged()
    End Sub
    Partial Private Sub Onrequestor_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrequestor_identifyChanged()
    End Sub
    Partial Private Sub Onrelease_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onrelease_dateChanged()
    End Sub
    Partial Private Sub Onregistrar_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onregistrar_identifyChanged()
    End Sub
    Partial Private Sub Onvalidity_startChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onvalidity_startChanged()
    End Sub
    Partial Private Sub Onvalidity_endChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onvalidity_endChanged()
    End Sub
    Partial Private Sub Oncode_renewalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_renewalChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DNSObject = CType(Nothing, EntityRef(Of DNSObject))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		Me._Users = CType(Nothing, EntityRef(Of Users))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DNSObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify", DbType:="Int")>  _
	Public Property parent_identify() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify
		End Get
		Set
			If (Me._parent_identify.Equals(value) = false) Then
				Me.Onparent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify = value
				Me.SendPropertyChanged("parent_identify")
				Me.Onparent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_requestor_identify", DbType:="Int")>  _
	Public Property requestor_identify() As System.Nullable(Of Integer)
		Get
			Return Me._requestor_identify
		End Get
		Set
			If (Me._requestor_identify.Equals(value) = false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onrequestor_identifyChanging(value)
				Me.SendPropertyChanging
				Me._requestor_identify = value
				Me.SendPropertyChanged("requestor_identify")
				Me.Onrequestor_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_release_date", DbType:="DateTime")>  _
	Public Property release_date() As System.Nullable(Of Date)
		Get
			Return Me._release_date
		End Get
		Set
			If (Me._release_date.Equals(value) = false) Then
				Me.Onrelease_dateChanging(value)
				Me.SendPropertyChanging
				Me._release_date = value
				Me.SendPropertyChanged("release_date")
				Me.Onrelease_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_registrar_identify", DbType:="Int")>  _
	Public Property registrar_identify() As System.Nullable(Of Integer)
		Get
			Return Me._registrar_identify
		End Get
		Set
			If (Me._registrar_identify.Equals(value) = false) Then
				Me.Onregistrar_identifyChanging(value)
				Me.SendPropertyChanging
				Me._registrar_identify = value
				Me.SendPropertyChanged("registrar_identify")
				Me.Onregistrar_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_validity_start", DbType:="DateTime")>  _
	Public Property validity_start() As System.Nullable(Of Date)
		Get
			Return Me._validity_start
		End Get
		Set
			If (Me._validity_start.Equals(value) = false) Then
				Me.Onvalidity_startChanging(value)
				Me.SendPropertyChanging
				Me._validity_start = value
				Me.SendPropertyChanged("validity_start")
				Me.Onvalidity_startChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_validity_end", DbType:="DateTime")>  _
	Public Property validity_end() As System.Nullable(Of Date)
		Get
			Return Me._validity_end
		End Get
		Set
			If (Me._validity_end.Equals(value) = false) Then
				Me.Onvalidity_endChanging(value)
				Me.SendPropertyChanging
				Me._validity_end = value
				Me.SendPropertyChanged("validity_end")
				Me.Onvalidity_endChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_renewal", DbType:="Int")>  _
	Public Property code_renewal() As System.Nullable(Of Integer)
		Get
			Return Me._code_renewal
		End Get
		Set
			If (Me._code_renewal.Equals(value) = false) Then
				Me.Oncode_renewalChanging(value)
				Me.SendPropertyChanging
				Me._code_renewal = value
				Me.SendPropertyChanged("code_renewal")
				Me.Oncode_renewalChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DNSObject_Domain", Storage:="_DNSObject", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property DNSObject() As DNSObject
		Get
			Return Me._DNSObject.Entity
		End Get
		Set
			Dim previousValue As DNSObject = Me._DNSObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DNSObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DNSObject.Entity = Nothing
					previousValue.Domain = Nothing
				End If
				Me._DNSObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Domain = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DNSObject")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Domain", Storage:="_Organization", ThisKey:="requestor_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.Domain.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Domain.Add(Me)
					Me._requestor_identify = value._Identify
				Else
					Me._requestor_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	<Association(Name:="Users_Domain", Storage:="_Users", ThisKey:="requestor_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Users() As Users
		Get
			Return Me._Users.Entity
		End Get
		Set
			Dim previousValue As Users = Me._Users.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Users.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Users.Entity = Nothing
					previousValue.Domain.Remove(Me)
				End If
				Me._Users.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Domain.Add(Me)
					Me._requestor_identify = value._Identify
				Else
					Me._requestor_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Users")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Enclosure")>  _
Partial Public Class Enclosure
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _rack_identify As Integer
	
	Private _nb_u As String
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntitySet(Of DataCenterDevice)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
	Private _Rack As EntityRef(Of Rack)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onrack_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onrack_identifyChanged()
    End Sub
    Partial Private Sub Onnb_uChanging(value As String)
    End Sub
    Partial Private Sub Onnb_uChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = New EntitySet(Of DataCenterDevice)(AddressOf Me.attach_DataCenterDevice, AddressOf Me.detach_DataCenterDevice)
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		Me._Rack = CType(Nothing, EntityRef(Of Rack))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rack_identify", DbType:="Int NOT NULL")>  _
	Public Property rack_identify() As Integer
		Get
			Return Me._rack_identify
		End Get
		Set
			If ((Me._rack_identify = value)  _
						= false) Then
				If Me._Rack.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onrack_identifyChanging(value)
				Me.SendPropertyChanging
				Me._rack_identify = value
				Me.SendPropertyChanged("rack_identify")
				Me.Onrack_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_nb_u", DbType:="NVarChar(50)")>  _
	Public Property nb_u() As String
		Get
			Return Me._nb_u
		End Get
		Set
			If (String.Equals(Me._nb_u, value) = false) Then
				Me.Onnb_uChanging(value)
				Me.SendPropertyChanging
				Me._nb_u = value
				Me.SendPropertyChanged("nb_u")
				Me.Onnb_uChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Enclosure_DataCenterDevice", Storage:="_DataCenterDevice", OtherKey:="enclosure_identity")>  _
	Public Property DataCenterDevice() As EntitySet(Of DataCenterDevice)
		Get
			Return Me._DataCenterDevice
		End Get
		Set
			Me._DataCenterDevice.Assign(value)
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Enclosure", Storage:="_PhysicalDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.Enclosure = Nothing
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enclosure = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="Rack_Enclosure", Storage:="_Rack", ThisKey:="rack_identify", IsForeignKey:=true)>  _
	Public Property Rack() As Rack
		Get
			Return Me._Rack.Entity
		End Get
		Set
			Dim previousValue As Rack = Me._Rack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Rack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Rack.Entity = Nothing
					previousValue.Enclosure.Remove(Me)
				End If
				Me._Rack.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enclosure.Add(Me)
					Me._rack_identify = value.id
				Else
					Me._rack_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Rack")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataCenterDevice(ByVal entity As DataCenterDevice)
		Me.SendPropertyChanging
		entity.Enclosure = Me
	End Sub
	
	Private Sub detach_DataCenterDevice(ByVal entity As DataCenterDevice)
		Me.SendPropertyChanging
		entity.Enclosure = Nothing
	End Sub
End Class

<Table(Name:="dbo.Farm")>  _
Partial Public Class Farm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_farm_type As System.Nullable(Of Integer)
	
	Private _code_farm_status As System.Nullable(Of Integer)
	
	Private _code_deployment_area As System.Nullable(Of Integer)
	
	Private _redundancy As System.Nullable(Of Boolean)
	
	Private __IsDeleted As Boolean
	
	Private _DatabasesSchema As EntitySet(Of DatabasesSchema)
	
	Private _Hypervisor As EntitySet(Of Hypervisor)
	
	Private _VirtualHost As EntityRef(Of VirtualHost)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_farm_typeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_farm_typeChanged()
    End Sub
    Partial Private Sub Oncode_farm_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_farm_statusChanged()
    End Sub
    Partial Private Sub Oncode_deployment_areaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_deployment_areaChanged()
    End Sub
    Partial Private Sub OnredundancyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnredundancyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DatabasesSchema = New EntitySet(Of DatabasesSchema)(AddressOf Me.attach_DatabasesSchema, AddressOf Me.detach_DatabasesSchema)
		Me._Hypervisor = New EntitySet(Of Hypervisor)(AddressOf Me.attach_Hypervisor, AddressOf Me.detach_Hypervisor)
		Me._VirtualHost = CType(Nothing, EntityRef(Of VirtualHost))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._VirtualHost.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_farm_type", DbType:="Int")>  _
	Public Property code_farm_type() As System.Nullable(Of Integer)
		Get
			Return Me._code_farm_type
		End Get
		Set
			If (Me._code_farm_type.Equals(value) = false) Then
				Me.Oncode_farm_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_farm_type = value
				Me.SendPropertyChanged("code_farm_type")
				Me.Oncode_farm_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_farm_status", DbType:="Int")>  _
	Public Property code_farm_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_farm_status
		End Get
		Set
			If (Me._code_farm_status.Equals(value) = false) Then
				Me.Oncode_farm_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_farm_status = value
				Me.SendPropertyChanged("code_farm_status")
				Me.Oncode_farm_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_deployment_area", DbType:="Int")>  _
	Public Property code_deployment_area() As System.Nullable(Of Integer)
		Get
			Return Me._code_deployment_area
		End Get
		Set
			If (Me._code_deployment_area.Equals(value) = false) Then
				Me.Oncode_deployment_areaChanging(value)
				Me.SendPropertyChanging
				Me._code_deployment_area = value
				Me.SendPropertyChanged("code_deployment_area")
				Me.Oncode_deployment_areaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_redundancy", DbType:="Bit")>  _
	Public Property redundancy() As System.Nullable(Of Boolean)
		Get
			Return Me._redundancy
		End Get
		Set
			If (Me._redundancy.Equals(value) = false) Then
				Me.OnredundancyChanging(value)
				Me.SendPropertyChanging
				Me._redundancy = value
				Me.SendPropertyChanged("redundancy")
				Me.OnredundancyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Farm_DatabasesSchema", Storage:="_DatabasesSchema", OtherKey:="farm_identify")>  _
	Public Property DatabasesSchema() As EntitySet(Of DatabasesSchema)
		Get
			Return Me._DatabasesSchema
		End Get
		Set
			Me._DatabasesSchema.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Farm_Hypervisor", Storage:="_Hypervisor", OtherKey:="farm_identify")>  _
	Public Property Hypervisor() As EntitySet(Of Hypervisor)
		Get
			Return Me._Hypervisor
		End Get
		Set
			Me._Hypervisor.Assign(value)
		End Set
	End Property
	
	<Association(Name:="VirtualHost_Farm", Storage:="_VirtualHost", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property VirtualHost() As VirtualHost
		Get
			Return Me._VirtualHost.Entity
		End Get
		Set
			Dim previousValue As VirtualHost = Me._VirtualHost.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualHost.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualHost.Entity = Nothing
					previousValue.Farm = Nothing
				End If
				Me._VirtualHost.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Farm = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VirtualHost")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DatabasesSchema(ByVal entity As DatabasesSchema)
		Me.SendPropertyChanging
		entity.Farm = Me
	End Sub
	
	Private Sub detach_DatabasesSchema(ByVal entity As DatabasesSchema)
		Me.SendPropertyChanging
		entity.Farm = Nothing
	End Sub
	
	Private Sub attach_Hypervisor(ByVal entity As Hypervisor)
		Me.SendPropertyChanging
		entity.Farm = Me
	End Sub
	
	Private Sub detach_Hypervisor(ByVal entity As Hypervisor)
		Me.SendPropertyChanging
		entity.Farm = Nothing
	End Sub
End Class

<Table(Name:="dbo.FiberChannelInterface")>  _
Partial Public Class FiberChannelInterface
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _speed As System.Nullable(Of Decimal)
	
	Private _topology As String
	
	Private _wwn As String
	
	Private _datacenterdevice_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
	Private _NetworkInterface As EntityRef(Of NetworkInterface)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnspeedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnspeedChanged()
    End Sub
    Partial Private Sub OntopologyChanging(value As String)
    End Sub
    Partial Private Sub OntopologyChanged()
    End Sub
    Partial Private Sub OnwwnChanging(value As String)
    End Sub
    Partial Private Sub OnwwnChanged()
    End Sub
    Partial Private Sub Ondatacenterdevice_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondatacenterdevice_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		Me._NetworkInterface = CType(Nothing, EntityRef(Of NetworkInterface))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._NetworkInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_speed", DbType:="Decimal(6,2)")>  _
	Public Property speed() As System.Nullable(Of Decimal)
		Get
			Return Me._speed
		End Get
		Set
			If (Me._speed.Equals(value) = false) Then
				Me.OnspeedChanging(value)
				Me.SendPropertyChanging
				Me._speed = value
				Me.SendPropertyChanged("speed")
				Me.OnspeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_topology", DbType:="VarChar(100)")>  _
	Public Property topology() As String
		Get
			Return Me._topology
		End Get
		Set
			If (String.Equals(Me._topology, value) = false) Then
				Me.OntopologyChanging(value)
				Me.SendPropertyChanging
				Me._topology = value
				Me.SendPropertyChanged("topology")
				Me.OntopologyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_wwn", DbType:="VarChar(100)")>  _
	Public Property wwn() As String
		Get
			Return Me._wwn
		End Get
		Set
			If (String.Equals(Me._wwn, value) = false) Then
				Me.OnwwnChanging(value)
				Me.SendPropertyChanging
				Me._wwn = value
				Me.SendPropertyChanged("wwn")
				Me.OnwwnChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_datacenterdevice_identify", DbType:="Int")>  _
	Public Property datacenterdevice_identify() As System.Nullable(Of Integer)
		Get
			Return Me._datacenterdevice_identify
		End Get
		Set
			If (Me._datacenterdevice_identify.Equals(value) = false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondatacenterdevice_identifyChanging(value)
				Me.SendPropertyChanging
				Me._datacenterdevice_identify = value
				Me.SendPropertyChanged("datacenterdevice_identify")
				Me.Ondatacenterdevice_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_FiberChannelInterface", Storage:="_DataCenterDevice", ThisKey:="datacenterdevice_identify", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.FiberChannelInterface.Remove(Me)
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FiberChannelInterface.Add(Me)
					Me._datacenterdevice_identify = value.id
				Else
					Me._datacenterdevice_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_FiberChannelInterface", Storage:="_NetworkInterface", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property NetworkInterface() As NetworkInterface
		Get
			Return Me._NetworkInterface.Entity
		End Get
		Set
			Dim previousValue As NetworkInterface = Me._NetworkInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkInterface.Entity = Nothing
					previousValue.FiberChannelInterface = Nothing
				End If
				Me._NetworkInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FiberChannelInterface = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NetworkInterface")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.FunctionalCI")>  _
Partial Public Class FunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _description As String
	
	Private _code_risk_rating As System.Nullable(Of Integer)
	
	Private _move2production As System.Nullable(Of Date)
	
	Private _finalclass As String
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _ApplicationSolution As EntityRef(Of ApplicationSolution)
	
	Private _DatabasesSchema As EntityRef(Of DatabasesSchema)
	
	Private _LnkApplicationSolutionToFunctionalCI As EntitySet(Of LnkApplicationSolutionToFunctionalCI)
	
	Private _LnkBackupsToFunctionalCI As EntitySet(Of LnkBackupsToFunctionalCI)
	
	Private _LnkCIGroupToCI As EntitySet(Of LnkCIGroupToCI)
	
	Private _LnkContactToFunctionalCI As EntitySet(Of LnkContactToFunctionalCI)
	
	Private _LnkDocumentToFunctionalCI As EntitySet(Of LnkDocumentToFunctionalCI)
	
	Private _LnkFunctionalCIToOrganization As EntitySet(Of LnkFunctionalCIToOrganization)
	
	Private _LnkFunctionalCIToProviderContract As EntitySet(Of LnkFunctionalCIToProviderContract)
	
	Private _LnkPasswdToFunctionalCI As EntitySet(Of LnkPasswdToFunctionalCI)
	
	Private _MiddlewareInstance As EntityRef(Of MiddlewareInstance)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
	Private _SoftwareInstance As EntitySet(Of SoftwareInstance)
	
	Private _VirtualDevice As EntityRef(Of VirtualDevice)
	
	Private _WANLink As EntityRef(Of WANLink)
	
	Private _WebApplication As EntityRef(Of WebApplication)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Oncode_risk_ratingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_risk_ratingChanged()
    End Sub
    Partial Private Sub Onmove2productionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onmove2productionChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationSolution = CType(Nothing, EntityRef(Of ApplicationSolution))
		Me._DatabasesSchema = CType(Nothing, EntityRef(Of DatabasesSchema))
		Me._LnkApplicationSolutionToFunctionalCI = New EntitySet(Of LnkApplicationSolutionToFunctionalCI)(AddressOf Me.attach_LnkApplicationSolutionToFunctionalCI, AddressOf Me.detach_LnkApplicationSolutionToFunctionalCI)
		Me._LnkBackupsToFunctionalCI = New EntitySet(Of LnkBackupsToFunctionalCI)(AddressOf Me.attach_LnkBackupsToFunctionalCI, AddressOf Me.detach_LnkBackupsToFunctionalCI)
		Me._LnkCIGroupToCI = New EntitySet(Of LnkCIGroupToCI)(AddressOf Me.attach_LnkCIGroupToCI, AddressOf Me.detach_LnkCIGroupToCI)
		Me._LnkContactToFunctionalCI = New EntitySet(Of LnkContactToFunctionalCI)(AddressOf Me.attach_LnkContactToFunctionalCI, AddressOf Me.detach_LnkContactToFunctionalCI)
		Me._LnkDocumentToFunctionalCI = New EntitySet(Of LnkDocumentToFunctionalCI)(AddressOf Me.attach_LnkDocumentToFunctionalCI, AddressOf Me.detach_LnkDocumentToFunctionalCI)
		Me._LnkFunctionalCIToOrganization = New EntitySet(Of LnkFunctionalCIToOrganization)(AddressOf Me.attach_LnkFunctionalCIToOrganization, AddressOf Me.detach_LnkFunctionalCIToOrganization)
		Me._LnkFunctionalCIToProviderContract = New EntitySet(Of LnkFunctionalCIToProviderContract)(AddressOf Me.attach_LnkFunctionalCIToProviderContract, AddressOf Me.detach_LnkFunctionalCIToProviderContract)
		Me._LnkPasswdToFunctionalCI = New EntitySet(Of LnkPasswdToFunctionalCI)(AddressOf Me.attach_LnkPasswdToFunctionalCI, AddressOf Me.detach_LnkPasswdToFunctionalCI)
		Me._MiddlewareInstance = CType(Nothing, EntityRef(Of MiddlewareInstance))
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		Me._SoftwareInstance = New EntitySet(Of SoftwareInstance)(AddressOf Me.attach_SoftwareInstance, AddressOf Me.detach_SoftwareInstance)
		Me._VirtualDevice = CType(Nothing, EntityRef(Of VirtualDevice))
		Me._WANLink = CType(Nothing, EntityRef(Of WANLink))
		Me._WebApplication = CType(Nothing, EntityRef(Of WebApplication))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_risk_rating", DbType:="Int")>  _
	Public Property code_risk_rating() As System.Nullable(Of Integer)
		Get
			Return Me._code_risk_rating
		End Get
		Set
			If (Me._code_risk_rating.Equals(value) = false) Then
				Me.Oncode_risk_ratingChanging(value)
				Me.SendPropertyChanging
				Me._code_risk_rating = value
				Me.SendPropertyChanged("code_risk_rating")
				Me.Oncode_risk_ratingChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_move2production", DbType:="DateTime")>  _
	Public Property move2production() As System.Nullable(Of Date)
		Get
			Return Me._move2production
		End Get
		Set
			If (Me._move2production.Equals(value) = false) Then
				Me.Onmove2productionChanging(value)
				Me.SendPropertyChanging
				Me._move2production = value
				Me.SendPropertyChanged("move2production")
				Me.Onmove2productionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_ApplicationSolution", Storage:="_ApplicationSolution", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ApplicationSolution() As ApplicationSolution
		Get
			Return Me._ApplicationSolution.Entity
		End Get
		Set
			Dim previousValue As ApplicationSolution = Me._ApplicationSolution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationSolution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationSolution.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._ApplicationSolution.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("ApplicationSolution")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_DatabasesSchema", Storage:="_DatabasesSchema", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property DatabasesSchema() As DatabasesSchema
		Get
			Return Me._DatabasesSchema.Entity
		End Get
		Set
			Dim previousValue As DatabasesSchema = Me._DatabasesSchema.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DatabasesSchema.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DatabasesSchema.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._DatabasesSchema.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("DatabasesSchema")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkApplicationSolutionToFunctionalCI", Storage:="_LnkApplicationSolutionToFunctionalCI", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkApplicationSolutionToFunctionalCI() As EntitySet(Of LnkApplicationSolutionToFunctionalCI)
		Get
			Return Me._LnkApplicationSolutionToFunctionalCI
		End Get
		Set
			Me._LnkApplicationSolutionToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkBackupsToFunctionalCI", Storage:="_LnkBackupsToFunctionalCI", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkBackupsToFunctionalCI() As EntitySet(Of LnkBackupsToFunctionalCI)
		Get
			Return Me._LnkBackupsToFunctionalCI
		End Get
		Set
			Me._LnkBackupsToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkCIGroupToCI", Storage:="_LnkCIGroupToCI", ThisKey:="_Identify", OtherKey:="ci_identify")>  _
	Public Property LnkCIGroupToCI() As EntitySet(Of LnkCIGroupToCI)
		Get
			Return Me._LnkCIGroupToCI
		End Get
		Set
			Me._LnkCIGroupToCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkContactToFunctionalCI", Storage:="_LnkContactToFunctionalCI", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkContactToFunctionalCI() As EntitySet(Of LnkContactToFunctionalCI)
		Get
			Return Me._LnkContactToFunctionalCI
		End Get
		Set
			Me._LnkContactToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkDocumentToFunctionalCI", Storage:="_LnkDocumentToFunctionalCI", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkDocumentToFunctionalCI() As EntitySet(Of LnkDocumentToFunctionalCI)
		Get
			Return Me._LnkDocumentToFunctionalCI
		End Get
		Set
			Me._LnkDocumentToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkFunctionalCIToOrganization", Storage:="_LnkFunctionalCIToOrganization", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkFunctionalCIToOrganization() As EntitySet(Of LnkFunctionalCIToOrganization)
		Get
			Return Me._LnkFunctionalCIToOrganization
		End Get
		Set
			Me._LnkFunctionalCIToOrganization.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkFunctionalCIToProviderContract", Storage:="_LnkFunctionalCIToProviderContract", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkFunctionalCIToProviderContract() As EntitySet(Of LnkFunctionalCIToProviderContract)
		Get
			Return Me._LnkFunctionalCIToProviderContract
		End Get
		Set
			Me._LnkFunctionalCIToProviderContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkPasswdToFunctionalCI", Storage:="_LnkPasswdToFunctionalCI", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property LnkPasswdToFunctionalCI() As EntitySet(Of LnkPasswdToFunctionalCI)
		Get
			Return Me._LnkPasswdToFunctionalCI
		End Get
		Set
			Me._LnkPasswdToFunctionalCI.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_MiddlewareInstance", Storage:="_MiddlewareInstance", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property MiddlewareInstance() As MiddlewareInstance
		Get
			Return Me._MiddlewareInstance.Entity
		End Get
		Set
			Dim previousValue As MiddlewareInstance = Me._MiddlewareInstance.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MiddlewareInstance.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MiddlewareInstance.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._MiddlewareInstance.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("MiddlewareInstance")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_PhysicalDevice", Storage:="_PhysicalDevice", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._PhysicalDevice.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_SoftwareInstance", Storage:="_SoftwareInstance", ThisKey:="_Identify", OtherKey:="functionalci_identify")>  _
	Public Property SoftwareInstance() As EntitySet(Of SoftwareInstance)
		Get
			Return Me._SoftwareInstance
		End Get
		Set
			Me._SoftwareInstance.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_VirtualDevice", Storage:="_VirtualDevice", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property VirtualDevice() As VirtualDevice
		Get
			Return Me._VirtualDevice.Entity
		End Get
		Set
			Dim previousValue As VirtualDevice = Me._VirtualDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualDevice.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._VirtualDevice.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("VirtualDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_WANLink", Storage:="_WANLink", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property WANLink() As WANLink
		Get
			Return Me._WANLink.Entity
		End Get
		Set
			Dim previousValue As WANLink = Me._WANLink.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WANLink.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WANLink.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._WANLink.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("WANLink")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_WebApplication", Storage:="_WebApplication", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property WebApplication() As WebApplication
		Get
			Return Me._WebApplication.Entity
		End Get
		Set
			Dim previousValue As WebApplication = Me._WebApplication.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WebApplication.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WebApplication.Entity = Nothing
					previousValue.FunctionalCI = Nothing
				End If
				Me._WebApplication.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FunctionalCI = Me
				End If
				Me.SendPropertyChanged("WebApplication")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkApplicationSolutionToFunctionalCI(ByVal entity As LnkApplicationSolutionToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkApplicationSolutionToFunctionalCI(ByVal entity As LnkApplicationSolutionToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkBackupsToFunctionalCI(ByVal entity As LnkBackupsToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkBackupsToFunctionalCI(ByVal entity As LnkBackupsToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkCIGroupToCI(ByVal entity As LnkCIGroupToCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkCIGroupToCI(ByVal entity As LnkCIGroupToCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkContactToFunctionalCI(ByVal entity As LnkContactToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkContactToFunctionalCI(ByVal entity As LnkContactToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToFunctionalCI(ByVal entity As LnkDocumentToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkDocumentToFunctionalCI(ByVal entity As LnkDocumentToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkFunctionalCIToOrganization(ByVal entity As LnkFunctionalCIToOrganization)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkFunctionalCIToOrganization(ByVal entity As LnkFunctionalCIToOrganization)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkFunctionalCIToProviderContract(ByVal entity As LnkFunctionalCIToProviderContract)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkFunctionalCIToProviderContract(ByVal entity As LnkFunctionalCIToProviderContract)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_LnkPasswdToFunctionalCI(ByVal entity As LnkPasswdToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_LnkPasswdToFunctionalCI(ByVal entity As LnkPasswdToFunctionalCI)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
	
	Private Sub attach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.FunctionalCI = Me
	End Sub
	
	Private Sub detach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.FunctionalCI = Nothing
	End Sub
End Class

<Table(Name:="dbo.Hypervisor")>  _
Partial Public Class Hypervisor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _farm_identify As System.Nullable(Of Integer)
	
	Private _server_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Farm As EntityRef(Of Farm)
	
	Private _Server As EntityRef(Of Server)
	
	Private _VirtualHost As EntityRef(Of VirtualHost)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onfarm_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfarm_identifyChanged()
    End Sub
    Partial Private Sub Onserver_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onserver_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Farm = CType(Nothing, EntityRef(Of Farm))
		Me._Server = CType(Nothing, EntityRef(Of Server))
		Me._VirtualHost = CType(Nothing, EntityRef(Of VirtualHost))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._VirtualHost.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_farm_identify", DbType:="Int")>  _
	Public Property farm_identify() As System.Nullable(Of Integer)
		Get
			Return Me._farm_identify
		End Get
		Set
			If (Me._farm_identify.Equals(value) = false) Then
				If Me._Farm.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfarm_identifyChanging(value)
				Me.SendPropertyChanging
				Me._farm_identify = value
				Me.SendPropertyChanged("farm_identify")
				Me.Onfarm_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_server_identify", DbType:="Int")>  _
	Public Property server_identify() As System.Nullable(Of Integer)
		Get
			Return Me._server_identify
		End Get
		Set
			If (Me._server_identify.Equals(value) = false) Then
				If Me._Server.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onserver_identifyChanging(value)
				Me.SendPropertyChanging
				Me._server_identify = value
				Me.SendPropertyChanged("server_identify")
				Me.Onserver_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Farm_Hypervisor", Storage:="_Farm", ThisKey:="farm_identify", IsForeignKey:=true)>  _
	Public Property Farm() As Farm
		Get
			Return Me._Farm.Entity
		End Get
		Set
			Dim previousValue As Farm = Me._Farm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Farm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Farm.Entity = Nothing
					previousValue.Hypervisor.Remove(Me)
				End If
				Me._Farm.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hypervisor.Add(Me)
					Me._farm_identify = value.id
				Else
					Me._farm_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Farm")
			End If
		End Set
	End Property
	
	<Association(Name:="Server_Hypervisor", Storage:="_Server", ThisKey:="server_identify", IsForeignKey:=true)>  _
	Public Property Server() As Server
		Get
			Return Me._Server.Entity
		End Get
		Set
			Dim previousValue As Server = Me._Server.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Server.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Server.Entity = Nothing
					previousValue.Hypervisor.Remove(Me)
				End If
				Me._Server.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hypervisor.Add(Me)
					Me._server_identify = value.id
				Else
					Me._server_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Server")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualHost_Hypervisor", Storage:="_VirtualHost", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property VirtualHost() As VirtualHost
		Get
			Return Me._VirtualHost.Entity
		End Get
		Set
			Dim previousValue As VirtualHost = Me._VirtualHost.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualHost.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualHost.Entity = Nothing
					previousValue.Hypervisor = Nothing
				End If
				Me._VirtualHost.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hypervisor = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VirtualHost")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.IPAddress")>  _
Partial Public Class IPAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _short_name As String
	
	Private _code_ipaddress_usage As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPAddressv4 As EntityRef(Of IPAddressv4)
	
	Private _LnkIPAddressToIPAddress As EntitySet(Of LnkIPAddressToIPAddress)
	
	Private _LnkIPAddressToIPAddress1 As EntitySet(Of LnkIPAddressToIPAddress)
	
	Private _LnkIPInterfaceToIPAddress As EntitySet(Of LnkIPInterfaceToIPAddress)
	
	Private _VirtualMachine As EntitySet(Of VirtualMachine)
	
	Private _IPObject As EntityRef(Of IPObject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onshort_nameChanging(value As String)
    End Sub
    Partial Private Sub Onshort_nameChanged()
    End Sub
    Partial Private Sub Oncode_ipaddress_usageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_ipaddress_usageChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPAddressv4 = CType(Nothing, EntityRef(Of IPAddressv4))
		Me._LnkIPAddressToIPAddress = New EntitySet(Of LnkIPAddressToIPAddress)(AddressOf Me.attach_LnkIPAddressToIPAddress, AddressOf Me.detach_LnkIPAddressToIPAddress)
		Me._LnkIPAddressToIPAddress1 = New EntitySet(Of LnkIPAddressToIPAddress)(AddressOf Me.attach_LnkIPAddressToIPAddress1, AddressOf Me.detach_LnkIPAddressToIPAddress1)
		Me._LnkIPInterfaceToIPAddress = New EntitySet(Of LnkIPInterfaceToIPAddress)(AddressOf Me.attach_LnkIPInterfaceToIPAddress, AddressOf Me.detach_LnkIPInterfaceToIPAddress)
		Me._VirtualMachine = New EntitySet(Of VirtualMachine)(AddressOf Me.attach_VirtualMachine, AddressOf Me.detach_VirtualMachine)
		Me._IPObject = CType(Nothing, EntityRef(Of IPObject))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_short_name", DbType:="VarChar(50)")>  _
	Public Property short_name() As String
		Get
			Return Me._short_name
		End Get
		Set
			If (String.Equals(Me._short_name, value) = false) Then
				Me.Onshort_nameChanging(value)
				Me.SendPropertyChanging
				Me._short_name = value
				Me.SendPropertyChanged("short_name")
				Me.Onshort_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_ipaddress_usage", DbType:="Int")>  _
	Public Property code_ipaddress_usage() As System.Nullable(Of Integer)
		Get
			Return Me._code_ipaddress_usage
		End Get
		Set
			If (Me._code_ipaddress_usage.Equals(value) = false) Then
				Me.Oncode_ipaddress_usageChanging(value)
				Me.SendPropertyChanging
				Me._code_ipaddress_usage = value
				Me.SendPropertyChanged("code_ipaddress_usage")
				Me.Oncode_ipaddress_usageChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_IPAddressv4", Storage:="_IPAddressv4", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPAddressv4() As IPAddressv4
		Get
			Return Me._IPAddressv4.Entity
		End Get
		Set
			Dim previousValue As IPAddressv4 = Me._IPAddressv4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddressv4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddressv4.Entity = Nothing
					previousValue.IPAddress = Nothing
				End If
				Me._IPAddressv4.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPAddress = Me
				End If
				Me.SendPropertyChanged("IPAddressv4")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPAddressToIPAddress", Storage:="_LnkIPAddressToIPAddress", OtherKey:="ip1_identify")>  _
	Public Property LnkIPAddressToIPAddress() As EntitySet(Of LnkIPAddressToIPAddress)
		Get
			Return Me._LnkIPAddressToIPAddress
		End Get
		Set
			Me._LnkIPAddressToIPAddress.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPAddressToIPAddress1", Storage:="_LnkIPAddressToIPAddress1", OtherKey:="ip2_identify")>  _
	Public Property LnkIPAddressToIPAddress1() As EntitySet(Of LnkIPAddressToIPAddress)
		Get
			Return Me._LnkIPAddressToIPAddress1
		End Get
		Set
			Me._LnkIPAddressToIPAddress1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPInterfaceToIPAddress", Storage:="_LnkIPInterfaceToIPAddress", OtherKey:="ipaddress_identify")>  _
	Public Property LnkIPInterfaceToIPAddress() As EntitySet(Of LnkIPInterfaceToIPAddress)
		Get
			Return Me._LnkIPInterfaceToIPAddress
		End Get
		Set
			Me._LnkIPInterfaceToIPAddress.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddress_VirtualMachine", Storage:="_VirtualMachine", OtherKey:="managementip_identify")>  _
	Public Property VirtualMachine() As EntitySet(Of VirtualMachine)
		Get
			Return Me._VirtualMachine
		End Get
		Set
			Me._VirtualMachine.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPObject_IPAddress", Storage:="_IPObject", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property IPObject() As IPObject
		Get
			Return Me._IPObject.Entity
		End Get
		Set
			Dim previousValue As IPObject = Me._IPObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPObject.Entity = Nothing
					previousValue.IPAddress = Nothing
				End If
				Me._IPObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPAddress = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPObject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkIPAddressToIPAddress(ByVal entity As LnkIPAddressToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress = Me
	End Sub
	
	Private Sub detach_LnkIPAddressToIPAddress(ByVal entity As LnkIPAddressToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress = Nothing
	End Sub
	
	Private Sub attach_LnkIPAddressToIPAddress1(ByVal entity As LnkIPAddressToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress1 = Me
	End Sub
	
	Private Sub detach_LnkIPAddressToIPAddress1(ByVal entity As LnkIPAddressToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress1 = Nothing
	End Sub
	
	Private Sub attach_LnkIPInterfaceToIPAddress(ByVal entity As LnkIPInterfaceToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress = Me
	End Sub
	
	Private Sub detach_LnkIPInterfaceToIPAddress(ByVal entity As LnkIPInterfaceToIPAddress)
		Me.SendPropertyChanging
		entity.IPAddress = Nothing
	End Sub
	
	Private Sub attach_VirtualMachine(ByVal entity As VirtualMachine)
		Me.SendPropertyChanging
		entity.IPAddress = Me
	End Sub
	
	Private Sub detach_VirtualMachine(ByVal entity As VirtualMachine)
		Me.SendPropertyChanging
		entity.IPAddress = Nothing
	End Sub
End Class

<Table(Name:="dbo.IPAddressv4")>  _
Partial Public Class IPAddressv4
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _vlan_identify As System.Nullable(Of Integer)
	
	Private _ip As String
	
	Private _code_ipv4address_usage As Integer
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _ConfigAccess As EntitySet(Of ConfigAccess)
	
	Private _ConfigAccess1 As EntitySet(Of ConfigAccess)
	
	Private _ConfigAccess2 As EntitySet(Of ConfigAccess)
	
	Private _ConfigAccess3 As EntitySet(Of ConfigAccess)
	
	Private _ConfigPort As EntitySet(Of ConfigPort)
	
	Private _ConfigPort1 As EntitySet(Of ConfigPort)
	
	Private _IPAddress As EntityRef(Of IPAddress)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onvlan_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvlan_identifyChanged()
    End Sub
    Partial Private Sub OnipChanging(value As String)
    End Sub
    Partial Private Sub OnipChanged()
    End Sub
    Partial Private Sub Oncode_ipv4address_usageChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_ipv4address_usageChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConfigAccess = New EntitySet(Of ConfigAccess)(AddressOf Me.attach_ConfigAccess, AddressOf Me.detach_ConfigAccess)
		Me._ConfigAccess1 = New EntitySet(Of ConfigAccess)(AddressOf Me.attach_ConfigAccess1, AddressOf Me.detach_ConfigAccess1)
		Me._ConfigAccess2 = New EntitySet(Of ConfigAccess)(AddressOf Me.attach_ConfigAccess2, AddressOf Me.detach_ConfigAccess2)
		Me._ConfigAccess3 = New EntitySet(Of ConfigAccess)(AddressOf Me.attach_ConfigAccess3, AddressOf Me.detach_ConfigAccess3)
		Me._ConfigPort = New EntitySet(Of ConfigPort)(AddressOf Me.attach_ConfigPort, AddressOf Me.detach_ConfigPort)
		Me._ConfigPort1 = New EntitySet(Of ConfigPort)(AddressOf Me.attach_ConfigPort1, AddressOf Me.detach_ConfigPort1)
		Me._IPAddress = CType(Nothing, EntityRef(Of IPAddress))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vlan_identify", DbType:="Int")>  _
	Public Property vlan_identify() As System.Nullable(Of Integer)
		Get
			Return Me._vlan_identify
		End Get
		Set
			If (Me._vlan_identify.Equals(value) = false) Then
				Me.Onvlan_identifyChanging(value)
				Me.SendPropertyChanging
				Me._vlan_identify = value
				Me.SendPropertyChanged("vlan_identify")
				Me.Onvlan_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property ip() As String
		Get
			Return Me._ip
		End Get
		Set
			If (String.Equals(Me._ip, value) = false) Then
				Me.OnipChanging(value)
				Me.SendPropertyChanging
				Me._ip = value
				Me.SendPropertyChanged("ip")
				Me.OnipChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_ipv4address_usage", DbType:="Int NOT NULL")>  _
	Public Property code_ipv4address_usage() As Integer
		Get
			Return Me._code_ipv4address_usage
		End Get
		Set
			If ((Me._code_ipv4address_usage = value)  _
						= false) Then
				Me.Oncode_ipv4address_usageChanging(value)
				Me.SendPropertyChanging
				Me._code_ipv4address_usage = value
				Me.SendPropertyChanged("code_ipv4address_usage")
				Me.Oncode_ipv4address_usageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess", Storage:="_ConfigAccess", OtherKey:="local_ip1_identify")>  _
	Public Property ConfigAccess() As EntitySet(Of ConfigAccess)
		Get
			Return Me._ConfigAccess
		End Get
		Set
			Me._ConfigAccess.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess1", Storage:="_ConfigAccess1", OtherKey:="local_ip2_identify")>  _
	Public Property ConfigAccess1() As EntitySet(Of ConfigAccess)
		Get
			Return Me._ConfigAccess1
		End Get
		Set
			Me._ConfigAccess1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess2", Storage:="_ConfigAccess2", OtherKey:="remote_ip1_identify")>  _
	Public Property ConfigAccess2() As EntitySet(Of ConfigAccess)
		Get
			Return Me._ConfigAccess2
		End Get
		Set
			Me._ConfigAccess2.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigAccess3", Storage:="_ConfigAccess3", OtherKey:="remote_ip2_identify")>  _
	Public Property ConfigAccess3() As EntitySet(Of ConfigAccess)
		Get
			Return Me._ConfigAccess3
		End Get
		Set
			Me._ConfigAccess3.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigPort", Storage:="_ConfigPort", OtherKey:="ip2_identify")>  _
	Public Property ConfigPort() As EntitySet(Of ConfigPort)
		Get
			Return Me._ConfigPort
		End Get
		Set
			Me._ConfigPort.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddressv4_ConfigPort1", Storage:="_ConfigPort1", OtherKey:="ip1_identify")>  _
	Public Property ConfigPort1() As EntitySet(Of ConfigPort)
		Get
			Return Me._ConfigPort1
		End Get
		Set
			Me._ConfigPort1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPAddress_IPAddressv4", Storage:="_IPAddress", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property IPAddress() As IPAddress
		Get
			Return Me._IPAddress.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress.Entity = Nothing
					previousValue.IPAddressv4 = Nothing
				End If
				Me._IPAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPAddressv4 = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddress")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ConfigAccess(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv4 = Me
	End Sub
	
	Private Sub detach_ConfigAccess(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv4 = Nothing
	End Sub
	
	Private Sub attach_ConfigAccess1(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv41 = Me
	End Sub
	
	Private Sub detach_ConfigAccess1(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv41 = Nothing
	End Sub
	
	Private Sub attach_ConfigAccess2(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv42 = Me
	End Sub
	
	Private Sub detach_ConfigAccess2(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv42 = Nothing
	End Sub
	
	Private Sub attach_ConfigAccess3(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv43 = Me
	End Sub
	
	Private Sub detach_ConfigAccess3(ByVal entity As ConfigAccess)
		Me.SendPropertyChanging
		entity.IPAddressv43 = Nothing
	End Sub
	
	Private Sub attach_ConfigPort(ByVal entity As ConfigPort)
		Me.SendPropertyChanging
		entity.IPAddressv4 = Me
	End Sub
	
	Private Sub detach_ConfigPort(ByVal entity As ConfigPort)
		Me.SendPropertyChanging
		entity.IPAddressv4 = Nothing
	End Sub
	
	Private Sub attach_ConfigPort1(ByVal entity As ConfigPort)
		Me.SendPropertyChanging
		entity.IPAddressv41 = Me
	End Sub
	
	Private Sub detach_ConfigPort1(ByVal entity As ConfigPort)
		Me.SendPropertyChanging
		entity.IPAddressv41 = Nothing
	End Sub
End Class

<Table(Name:="dbo.IPBlock")>  _
Partial Public Class IPBlock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _type As String
	
	Private _parent_identify As System.Nullable(Of Integer)
	
	Private _write_reason As String
	
	Private _occupancy As System.Nullable(Of Integer)
	
	Private _children_occupancy As System.Nullable(Of Integer)
	
	Private _subnet_occupancy As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPBlockv4 As EntityRef(Of IPBlockv4)
	
	Private _IPObject As EntityRef(Of IPObject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub Onparent_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identifyChanged()
    End Sub
    Partial Private Sub Onwrite_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onwrite_reasonChanged()
    End Sub
    Partial Private Sub OnoccupancyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnoccupancyChanged()
    End Sub
    Partial Private Sub Onchildren_occupancyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onchildren_occupancyChanged()
    End Sub
    Partial Private Sub Onsubnet_occupancyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsubnet_occupancyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPBlockv4 = CType(Nothing, EntityRef(Of IPBlockv4))
		Me._IPObject = CType(Nothing, EntityRef(Of IPObject))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="VarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify", DbType:="Int")>  _
	Public Property parent_identify() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify
		End Get
		Set
			If (Me._parent_identify.Equals(value) = false) Then
				Me.Onparent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify = value
				Me.SendPropertyChanged("parent_identify")
				Me.Onparent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_write_reason", DbType:="VarChar(50)")>  _
	Public Property write_reason() As String
		Get
			Return Me._write_reason
		End Get
		Set
			If (String.Equals(Me._write_reason, value) = false) Then
				Me.Onwrite_reasonChanging(value)
				Me.SendPropertyChanging
				Me._write_reason = value
				Me.SendPropertyChanged("write_reason")
				Me.Onwrite_reasonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_occupancy", DbType:="Int")>  _
	Public Property occupancy() As System.Nullable(Of Integer)
		Get
			Return Me._occupancy
		End Get
		Set
			If (Me._occupancy.Equals(value) = false) Then
				Me.OnoccupancyChanging(value)
				Me.SendPropertyChanging
				Me._occupancy = value
				Me.SendPropertyChanged("occupancy")
				Me.OnoccupancyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_children_occupancy", DbType:="Int")>  _
	Public Property children_occupancy() As System.Nullable(Of Integer)
		Get
			Return Me._children_occupancy
		End Get
		Set
			If (Me._children_occupancy.Equals(value) = false) Then
				Me.Onchildren_occupancyChanging(value)
				Me.SendPropertyChanging
				Me._children_occupancy = value
				Me.SendPropertyChanged("children_occupancy")
				Me.Onchildren_occupancyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_subnet_occupancy", DbType:="Int")>  _
	Public Property subnet_occupancy() As System.Nullable(Of Integer)
		Get
			Return Me._subnet_occupancy
		End Get
		Set
			If (Me._subnet_occupancy.Equals(value) = false) Then
				Me.Onsubnet_occupancyChanging(value)
				Me.SendPropertyChanging
				Me._subnet_occupancy = value
				Me.SendPropertyChanged("subnet_occupancy")
				Me.Onsubnet_occupancyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPBlock_IPBlockv4", Storage:="_IPBlockv4", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPBlockv4() As IPBlockv4
		Get
			Return Me._IPBlockv4.Entity
		End Get
		Set
			Dim previousValue As IPBlockv4 = Me._IPBlockv4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPBlockv4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPBlockv4.Entity = Nothing
					previousValue.IPBlock = Nothing
				End If
				Me._IPBlockv4.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPBlock = Me
				End If
				Me.SendPropertyChanged("IPBlockv4")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_IPBlock", Storage:="_IPObject", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property IPObject() As IPObject
		Get
			Return Me._IPObject.Entity
		End Get
		Set
			Dim previousValue As IPObject = Me._IPObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPObject.Entity = Nothing
					previousValue.IPBlock = Nothing
				End If
				Me._IPObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPBlock = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPObject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.IPBlockv4")>  _
Partial Public Class IPBlockv4
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _parent_identify As System.Nullable(Of Integer)
	
	Private _parent_identify_left As System.Nullable(Of Integer)
	
	Private _parent_identify_right As System.Nullable(Of Integer)
	
	Private _firstip As String
	
	Private _lastip As String
	
	Private __IsDeleted As Boolean
	
	Private _IPBlock As EntityRef(Of IPBlock)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onparent_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identifyChanged()
    End Sub
    Partial Private Sub Onparent_identify_leftChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identify_leftChanged()
    End Sub
    Partial Private Sub Onparent_identify_rightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identify_rightChanged()
    End Sub
    Partial Private Sub OnfirstipChanging(value As String)
    End Sub
    Partial Private Sub OnfirstipChanged()
    End Sub
    Partial Private Sub OnlastipChanging(value As String)
    End Sub
    Partial Private Sub OnlastipChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPBlock = CType(Nothing, EntityRef(Of IPBlock))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPBlock.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify", DbType:="Int")>  _
	Public Property parent_identify() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify
		End Get
		Set
			If (Me._parent_identify.Equals(value) = false) Then
				Me.Onparent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify = value
				Me.SendPropertyChanged("parent_identify")
				Me.Onparent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify_left", DbType:="Int")>  _
	Public Property parent_identify_left() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify_left
		End Get
		Set
			If (Me._parent_identify_left.Equals(value) = false) Then
				Me.Onparent_identify_leftChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify_left = value
				Me.SendPropertyChanged("parent_identify_left")
				Me.Onparent_identify_leftChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify_right", DbType:="Int")>  _
	Public Property parent_identify_right() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify_right
		End Get
		Set
			If (Me._parent_identify_right.Equals(value) = false) Then
				Me.Onparent_identify_rightChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify_right = value
				Me.SendPropertyChanged("parent_identify_right")
				Me.Onparent_identify_rightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_firstip", DbType:="VarChar(50)")>  _
	Public Property firstip() As String
		Get
			Return Me._firstip
		End Get
		Set
			If (String.Equals(Me._firstip, value) = false) Then
				Me.OnfirstipChanging(value)
				Me.SendPropertyChanging
				Me._firstip = value
				Me.SendPropertyChanged("firstip")
				Me.OnfirstipChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lastip", DbType:="VarChar(50)")>  _
	Public Property lastip() As String
		Get
			Return Me._lastip
		End Get
		Set
			If (String.Equals(Me._lastip, value) = false) Then
				Me.OnlastipChanging(value)
				Me.SendPropertyChanging
				Me._lastip = value
				Me.SendPropertyChanged("lastip")
				Me.OnlastipChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPBlock_IPBlockv4", Storage:="_IPBlock", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property IPBlock() As IPBlock
		Get
			Return Me._IPBlock.Entity
		End Get
		Set
			Dim previousValue As IPBlock = Me._IPBlock.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPBlock.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPBlock.Entity = Nothing
					previousValue.IPBlockv4 = Nothing
				End If
				Me._IPBlock.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPBlockv4 = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPBlock")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.IPInterface")>  _
Partial Public Class IPInterface
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _macaddress As String
	
	Private _comment As String
	
	Private _speed As System.Nullable(Of Decimal)
	
	Private __IsDeleted As Boolean
	
	Private _LnkIPInterfaceToIPAddress As EntitySet(Of LnkIPInterfaceToIPAddress)
	
	Private _LogicalInterface As EntityRef(Of LogicalInterface)
	
	Private _PhysicalInterface As EntityRef(Of PhysicalInterface)
	
	Private _NetworkInterface As EntityRef(Of NetworkInterface)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmacaddressChanging(value As String)
    End Sub
    Partial Private Sub OnmacaddressChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OnspeedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnspeedChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkIPInterfaceToIPAddress = New EntitySet(Of LnkIPInterfaceToIPAddress)(AddressOf Me.attach_LnkIPInterfaceToIPAddress, AddressOf Me.detach_LnkIPInterfaceToIPAddress)
		Me._LogicalInterface = CType(Nothing, EntityRef(Of LogicalInterface))
		Me._PhysicalInterface = CType(Nothing, EntityRef(Of PhysicalInterface))
		Me._NetworkInterface = CType(Nothing, EntityRef(Of NetworkInterface))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._NetworkInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_macaddress", DbType:="VarChar(50)")>  _
	Public Property macaddress() As String
		Get
			Return Me._macaddress
		End Get
		Set
			If (String.Equals(Me._macaddress, value) = false) Then
				Me.OnmacaddressChanging(value)
				Me.SendPropertyChanging
				Me._macaddress = value
				Me.SendPropertyChanged("macaddress")
				Me.OnmacaddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_speed", DbType:="Decimal(12,2)")>  _
	Public Property speed() As System.Nullable(Of Decimal)
		Get
			Return Me._speed
		End Get
		Set
			If (Me._speed.Equals(value) = false) Then
				Me.OnspeedChanging(value)
				Me.SendPropertyChanging
				Me._speed = value
				Me.SendPropertyChanged("speed")
				Me.OnspeedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPInterface_LnkIPInterfaceToIPAddress", Storage:="_LnkIPInterfaceToIPAddress", OtherKey:="ipinterface_identify")>  _
	Public Property LnkIPInterfaceToIPAddress() As EntitySet(Of LnkIPInterfaceToIPAddress)
		Get
			Return Me._LnkIPInterfaceToIPAddress
		End Get
		Set
			Me._LnkIPInterfaceToIPAddress.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPInterface_LogicalInterface", Storage:="_LogicalInterface", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property LogicalInterface() As LogicalInterface
		Get
			Return Me._LogicalInterface.Entity
		End Get
		Set
			Dim previousValue As LogicalInterface = Me._LogicalInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LogicalInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LogicalInterface.Entity = Nothing
					previousValue.IPInterface = Nothing
				End If
				Me._LogicalInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPInterface = Me
				End If
				Me.SendPropertyChanged("LogicalInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="IPInterface_PhysicalInterface", Storage:="_PhysicalInterface", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property PhysicalInterface() As PhysicalInterface
		Get
			Return Me._PhysicalInterface.Entity
		End Get
		Set
			Dim previousValue As PhysicalInterface = Me._PhysicalInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalInterface.Entity = Nothing
					previousValue.IPInterface = Nothing
				End If
				Me._PhysicalInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPInterface = Me
				End If
				Me.SendPropertyChanged("PhysicalInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_IPInterface", Storage:="_NetworkInterface", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property NetworkInterface() As NetworkInterface
		Get
			Return Me._NetworkInterface.Entity
		End Get
		Set
			Dim previousValue As NetworkInterface = Me._NetworkInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkInterface.Entity = Nothing
					previousValue.IPInterface = Nothing
				End If
				Me._NetworkInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPInterface = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NetworkInterface")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkIPInterfaceToIPAddress(ByVal entity As LnkIPInterfaceToIPAddress)
		Me.SendPropertyChanging
		entity.IPInterface = Me
	End Sub
	
	Private Sub detach_LnkIPInterfaceToIPAddress(ByVal entity As LnkIPInterfaceToIPAddress)
		Me.SendPropertyChanging
		entity.IPInterface = Nothing
	End Sub
End Class

<Table(Name:="dbo.IPObject")>  _
Partial Public Class IPObject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _organization_identify As System.Nullable(Of Integer)
	
	Private _requestor_identify As System.Nullable(Of Integer)
	
	Private _code_ipobject_status As System.Nullable(Of Integer)
	
	Private _allocation_date As System.Nullable(Of Date)
	
	Private _release_date As System.Nullable(Of Date)
	
	Private _finalclass As String
	
	Private _comment As String
	
	Private __IsDeleted As Boolean
	
	Private _IPAddress As EntityRef(Of IPAddress)
	
	Private _IPBlock As EntityRef(Of IPBlock)
	
	Private _IPSubnet As EntityRef(Of IPSubnet)
	
	Private _LnkContactToIPObject As EntitySet(Of LnkContactToIPObject)
	
	Private _LnkDocumentToIPObject As EntitySet(Of LnkDocumentToIPObject)
	
	Private _Organization As EntityRef(Of Organization)
	
	Private _Users As EntityRef(Of Users)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub Onrequestor_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrequestor_identifyChanged()
    End Sub
    Partial Private Sub Oncode_ipobject_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_ipobject_statusChanged()
    End Sub
    Partial Private Sub Onallocation_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onallocation_dateChanged()
    End Sub
    Partial Private Sub Onrelease_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onrelease_dateChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPAddress = CType(Nothing, EntityRef(Of IPAddress))
		Me._IPBlock = CType(Nothing, EntityRef(Of IPBlock))
		Me._IPSubnet = CType(Nothing, EntityRef(Of IPSubnet))
		Me._LnkContactToIPObject = New EntitySet(Of LnkContactToIPObject)(AddressOf Me.attach_LnkContactToIPObject, AddressOf Me.detach_LnkContactToIPObject)
		Me._LnkDocumentToIPObject = New EntitySet(Of LnkDocumentToIPObject)(AddressOf Me.attach_LnkDocumentToIPObject, AddressOf Me.detach_LnkDocumentToIPObject)
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		Me._Users = CType(Nothing, EntityRef(Of Users))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int")>  _
	Public Property organization_identify() As System.Nullable(Of Integer)
		Get
			Return Me._organization_identify
		End Get
		Set
			If (Me._organization_identify.Equals(value) = false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_requestor_identify", DbType:="Int")>  _
	Public Property requestor_identify() As System.Nullable(Of Integer)
		Get
			Return Me._requestor_identify
		End Get
		Set
			If (Me._requestor_identify.Equals(value) = false) Then
				If Me._Users.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onrequestor_identifyChanging(value)
				Me.SendPropertyChanging
				Me._requestor_identify = value
				Me.SendPropertyChanged("requestor_identify")
				Me.Onrequestor_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_ipobject_status", DbType:="Int")>  _
	Public Property code_ipobject_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_ipobject_status
		End Get
		Set
			If (Me._code_ipobject_status.Equals(value) = false) Then
				Me.Oncode_ipobject_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_ipobject_status = value
				Me.SendPropertyChanged("code_ipobject_status")
				Me.Oncode_ipobject_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_allocation_date", DbType:="DateTime")>  _
	Public Property allocation_date() As System.Nullable(Of Date)
		Get
			Return Me._allocation_date
		End Get
		Set
			If (Me._allocation_date.Equals(value) = false) Then
				Me.Onallocation_dateChanging(value)
				Me.SendPropertyChanging
				Me._allocation_date = value
				Me.SendPropertyChanged("allocation_date")
				Me.Onallocation_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_release_date", DbType:="DateTime")>  _
	Public Property release_date() As System.Nullable(Of Date)
		Get
			Return Me._release_date
		End Get
		Set
			If (Me._release_date.Equals(value) = false) Then
				Me.Onrelease_dateChanging(value)
				Me.SendPropertyChanging
				Me._release_date = value
				Me.SendPropertyChanged("release_date")
				Me.Onrelease_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50)")>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_IPAddress", Storage:="_IPAddress", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPAddress() As IPAddress
		Get
			Return Me._IPAddress.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress.Entity = Nothing
					previousValue.IPObject = Nothing
				End If
				Me._IPAddress.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPObject = Me
				End If
				Me.SendPropertyChanged("IPAddress")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_IPBlock", Storage:="_IPBlock", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPBlock() As IPBlock
		Get
			Return Me._IPBlock.Entity
		End Get
		Set
			Dim previousValue As IPBlock = Me._IPBlock.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPBlock.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPBlock.Entity = Nothing
					previousValue.IPObject = Nothing
				End If
				Me._IPBlock.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPObject = Me
				End If
				Me.SendPropertyChanged("IPBlock")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_IPSubnet", Storage:="_IPSubnet", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPSubnet() As IPSubnet
		Get
			Return Me._IPSubnet.Entity
		End Get
		Set
			Dim previousValue As IPSubnet = Me._IPSubnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnet.Entity = Nothing
					previousValue.IPObject = Nothing
				End If
				Me._IPSubnet.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPObject = Me
				End If
				Me.SendPropertyChanged("IPSubnet")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_LnkContactToIPObject", Storage:="_LnkContactToIPObject", ThisKey:="_Identify", OtherKey:="ipobject_identify")>  _
	Public Property LnkContactToIPObject() As EntitySet(Of LnkContactToIPObject)
		Get
			Return Me._LnkContactToIPObject
		End Get
		Set
			Me._LnkContactToIPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPObject_LnkDocumentToIPObject", Storage:="_LnkDocumentToIPObject", ThisKey:="_Identify", OtherKey:="ipobject_identify")>  _
	Public Property LnkDocumentToIPObject() As EntitySet(Of LnkDocumentToIPObject)
		Get
			Return Me._LnkDocumentToIPObject
		End Get
		Set
			Me._LnkDocumentToIPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_IPObject", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.IPObject.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPObject.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	<Association(Name:="Users_IPObject", Storage:="_Users", ThisKey:="requestor_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Users() As Users
		Get
			Return Me._Users.Entity
		End Get
		Set
			Dim previousValue As Users = Me._Users.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Users.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Users.Entity = Nothing
					previousValue.IPObject.Remove(Me)
				End If
				Me._Users.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPObject.Add(Me)
					Me._requestor_identify = value._Identify
				Else
					Me._requestor_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Users")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkContactToIPObject(ByVal entity As LnkContactToIPObject)
		Me.SendPropertyChanging
		entity.IPObject = Me
	End Sub
	
	Private Sub detach_LnkContactToIPObject(ByVal entity As LnkContactToIPObject)
		Me.SendPropertyChanging
		entity.IPObject = Nothing
	End Sub
	
	Private Sub attach_LnkDocumentToIPObject(ByVal entity As LnkDocumentToIPObject)
		Me.SendPropertyChanging
		entity.IPObject = Me
	End Sub
	
	Private Sub detach_LnkDocumentToIPObject(ByVal entity As LnkDocumentToIPObject)
		Me.SendPropertyChanging
		entity.IPObject = Nothing
	End Sub
End Class

<Table(Name:="dbo.IPSubnet")>  _
Partial Public Class IPSubnet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _type As String
	
	Private _write_reason As String
	
	Private _ip_occupancy As System.Nullable(Of Integer)
	
	Private _range_occupancy As System.Nullable(Of Integer)
	
	Private _alarm_water_mark As String
	
	Private __IsDeleted As Boolean
	
	Private _IPSubnetv4 As EntityRef(Of IPSubnetv4)
	
	Private _LnkIPSubnetToLocation As EntitySet(Of LnkIPSubnetToLocation)
	
	Private _LnkIPSubnetToVLAN As EntitySet(Of LnkIPSubnetToVLAN)
	
	Private _LnkSubnetToVLAN As EntitySet(Of LnkSubnetToVLAN)
	
	Private _IPObject As EntityRef(Of IPObject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub Onwrite_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onwrite_reasonChanged()
    End Sub
    Partial Private Sub Onip_occupancyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onip_occupancyChanged()
    End Sub
    Partial Private Sub Onrange_occupancyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrange_occupancyChanged()
    End Sub
    Partial Private Sub Onalarm_water_markChanging(value As String)
    End Sub
    Partial Private Sub Onalarm_water_markChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPSubnetv4 = CType(Nothing, EntityRef(Of IPSubnetv4))
		Me._LnkIPSubnetToLocation = New EntitySet(Of LnkIPSubnetToLocation)(AddressOf Me.attach_LnkIPSubnetToLocation, AddressOf Me.detach_LnkIPSubnetToLocation)
		Me._LnkIPSubnetToVLAN = New EntitySet(Of LnkIPSubnetToVLAN)(AddressOf Me.attach_LnkIPSubnetToVLAN, AddressOf Me.detach_LnkIPSubnetToVLAN)
		Me._LnkSubnetToVLAN = New EntitySet(Of LnkSubnetToVLAN)(AddressOf Me.attach_LnkSubnetToVLAN, AddressOf Me.detach_LnkSubnetToVLAN)
		Me._IPObject = CType(Nothing, EntityRef(Of IPObject))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="VarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_write_reason", DbType:="VarChar(50)")>  _
	Public Property write_reason() As String
		Get
			Return Me._write_reason
		End Get
		Set
			If (String.Equals(Me._write_reason, value) = false) Then
				Me.Onwrite_reasonChanging(value)
				Me.SendPropertyChanging
				Me._write_reason = value
				Me.SendPropertyChanged("write_reason")
				Me.Onwrite_reasonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip_occupancy", DbType:="Int")>  _
	Public Property ip_occupancy() As System.Nullable(Of Integer)
		Get
			Return Me._ip_occupancy
		End Get
		Set
			If (Me._ip_occupancy.Equals(value) = false) Then
				Me.Onip_occupancyChanging(value)
				Me.SendPropertyChanging
				Me._ip_occupancy = value
				Me.SendPropertyChanged("ip_occupancy")
				Me.Onip_occupancyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_range_occupancy", DbType:="Int")>  _
	Public Property range_occupancy() As System.Nullable(Of Integer)
		Get
			Return Me._range_occupancy
		End Get
		Set
			If (Me._range_occupancy.Equals(value) = false) Then
				Me.Onrange_occupancyChanging(value)
				Me.SendPropertyChanging
				Me._range_occupancy = value
				Me.SendPropertyChanged("range_occupancy")
				Me.Onrange_occupancyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_alarm_water_mark", DbType:="VarChar(50)")>  _
	Public Property alarm_water_mark() As String
		Get
			Return Me._alarm_water_mark
		End Get
		Set
			If (String.Equals(Me._alarm_water_mark, value) = false) Then
				Me.Onalarm_water_markChanging(value)
				Me.SendPropertyChanging
				Me._alarm_water_mark = value
				Me.SendPropertyChanged("alarm_water_mark")
				Me.Onalarm_water_markChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_IPSubnetv4", Storage:="_IPSubnetv4", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPSubnetv4() As IPSubnetv4
		Get
			Return Me._IPSubnetv4.Entity
		End Get
		Set
			Dim previousValue As IPSubnetv4 = Me._IPSubnetv4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnetv4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnetv4.Entity = Nothing
					previousValue.IPSubnet = Nothing
				End If
				Me._IPSubnetv4.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.IPSubnet = Me
				End If
				Me.SendPropertyChanged("IPSubnetv4")
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkIPSubnetToLocation", Storage:="_LnkIPSubnetToLocation", OtherKey:="ipsubnet_identify")>  _
	Public Property LnkIPSubnetToLocation() As EntitySet(Of LnkIPSubnetToLocation)
		Get
			Return Me._LnkIPSubnetToLocation
		End Get
		Set
			Me._LnkIPSubnetToLocation.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkIPSubnetToVLAN", Storage:="_LnkIPSubnetToVLAN", OtherKey:="ipsubnet_identify")>  _
	Public Property LnkIPSubnetToVLAN() As EntitySet(Of LnkIPSubnetToVLAN)
		Get
			Return Me._LnkIPSubnetToVLAN
		End Get
		Set
			Me._LnkIPSubnetToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkSubnetToVLAN", Storage:="_LnkSubnetToVLAN", OtherKey:="subnet_identify")>  _
	Public Property LnkSubnetToVLAN() As EntitySet(Of LnkSubnetToVLAN)
		Get
			Return Me._LnkSubnetToVLAN
		End Get
		Set
			Me._LnkSubnetToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="IPObject_IPSubnet", Storage:="_IPObject", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property IPObject() As IPObject
		Get
			Return Me._IPObject.Entity
		End Get
		Set
			Dim previousValue As IPObject = Me._IPObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPObject.Entity = Nothing
					previousValue.IPSubnet = Nothing
				End If
				Me._IPObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPSubnet = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPObject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkIPSubnetToLocation(ByVal entity As LnkIPSubnetToLocation)
		Me.SendPropertyChanging
		entity.IPSubnet = Me
	End Sub
	
	Private Sub detach_LnkIPSubnetToLocation(ByVal entity As LnkIPSubnetToLocation)
		Me.SendPropertyChanging
		entity.IPSubnet = Nothing
	End Sub
	
	Private Sub attach_LnkIPSubnetToVLAN(ByVal entity As LnkIPSubnetToVLAN)
		Me.SendPropertyChanging
		entity.IPSubnet = Me
	End Sub
	
	Private Sub detach_LnkIPSubnetToVLAN(ByVal entity As LnkIPSubnetToVLAN)
		Me.SendPropertyChanging
		entity.IPSubnet = Nothing
	End Sub
	
	Private Sub attach_LnkSubnetToVLAN(ByVal entity As LnkSubnetToVLAN)
		Me.SendPropertyChanging
		entity.IPSubnet = Me
	End Sub
	
	Private Sub detach_LnkSubnetToVLAN(ByVal entity As LnkSubnetToVLAN)
		Me.SendPropertyChanging
		entity.IPSubnet = Nothing
	End Sub
End Class

<Table(Name:="dbo.IPSubnetv4")>  _
Partial Public Class IPSubnetv4
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _organization_identify As Integer
	
	Private _ipv4block_identify As System.Nullable(Of Integer)
	
	Private _network_no As String
	
	Private _code As String
	
	Private _region As String
	
	Private _code_deployment_area As System.Nullable(Of Integer)
	
	Private _ip_start As String
	
	Private _ip_end As String
	
	Private _netmask As String
	
	Private _geteway As String
	
	Private __use As String
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _IPSubnet As EntityRef(Of IPSubnet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub Onipv4block_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onipv4block_identifyChanged()
    End Sub
    Partial Private Sub Onnetwork_noChanging(value As String)
    End Sub
    Partial Private Sub Onnetwork_noChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnregionChanging(value As String)
    End Sub
    Partial Private Sub OnregionChanged()
    End Sub
    Partial Private Sub Oncode_deployment_areaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_deployment_areaChanged()
    End Sub
    Partial Private Sub Onip_startChanging(value As String)
    End Sub
    Partial Private Sub Onip_startChanged()
    End Sub
    Partial Private Sub Onip_endChanging(value As String)
    End Sub
    Partial Private Sub Onip_endChanged()
    End Sub
    Partial Private Sub OnnetmaskChanging(value As String)
    End Sub
    Partial Private Sub OnnetmaskChanged()
    End Sub
    Partial Private Sub OngetewayChanging(value As String)
    End Sub
    Partial Private Sub OngetewayChanged()
    End Sub
    Partial Private Sub On_useChanging(value As String)
    End Sub
    Partial Private Sub On_useChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPSubnet = CType(Nothing, EntityRef(Of IPSubnet))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPSubnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int NOT NULL")>  _
	Public Property organization_identify() As Integer
		Get
			Return Me._organization_identify
		End Get
		Set
			If ((Me._organization_identify = value)  _
						= false) Then
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipv4block_identify", DbType:="Int")>  _
	Public Property ipv4block_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ipv4block_identify
		End Get
		Set
			If (Me._ipv4block_identify.Equals(value) = false) Then
				Me.Onipv4block_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipv4block_identify = value
				Me.SendPropertyChanged("ipv4block_identify")
				Me.Onipv4block_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_network_no", DbType:="NVarChar(18)")>  _
	Public Property network_no() As String
		Get
			Return Me._network_no
		End Get
		Set
			If (String.Equals(Me._network_no, value) = false) Then
				Me.Onnetwork_noChanging(value)
				Me.SendPropertyChanging
				Me._network_no = value
				Me.SendPropertyChanged("network_no")
				Me.Onnetwork_noChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="NVarChar(20)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_region", DbType:="NVarChar(50)")>  _
	Public Property region() As String
		Get
			Return Me._region
		End Get
		Set
			If (String.Equals(Me._region, value) = false) Then
				Me.OnregionChanging(value)
				Me.SendPropertyChanging
				Me._region = value
				Me.SendPropertyChanged("region")
				Me.OnregionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_deployment_area", DbType:="Int")>  _
	Public Property code_deployment_area() As System.Nullable(Of Integer)
		Get
			Return Me._code_deployment_area
		End Get
		Set
			If (Me._code_deployment_area.Equals(value) = false) Then
				Me.Oncode_deployment_areaChanging(value)
				Me.SendPropertyChanging
				Me._code_deployment_area = value
				Me.SendPropertyChanged("code_deployment_area")
				Me.Oncode_deployment_areaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip_start", DbType:="NVarChar(15)")>  _
	Public Property ip_start() As String
		Get
			Return Me._ip_start
		End Get
		Set
			If (String.Equals(Me._ip_start, value) = false) Then
				Me.Onip_startChanging(value)
				Me.SendPropertyChanging
				Me._ip_start = value
				Me.SendPropertyChanged("ip_start")
				Me.Onip_startChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip_end", DbType:="NVarChar(15)")>  _
	Public Property ip_end() As String
		Get
			Return Me._ip_end
		End Get
		Set
			If (String.Equals(Me._ip_end, value) = false) Then
				Me.Onip_endChanging(value)
				Me.SendPropertyChanging
				Me._ip_end = value
				Me.SendPropertyChanged("ip_end")
				Me.Onip_endChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_netmask", DbType:="NVarChar(15)")>  _
	Public Property netmask() As String
		Get
			Return Me._netmask
		End Get
		Set
			If (String.Equals(Me._netmask, value) = false) Then
				Me.OnnetmaskChanging(value)
				Me.SendPropertyChanging
				Me._netmask = value
				Me.SendPropertyChanged("netmask")
				Me.OnnetmaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_geteway", DbType:="NVarChar(15)")>  _
	Public Property geteway() As String
		Get
			Return Me._geteway
		End Get
		Set
			If (String.Equals(Me._geteway, value) = false) Then
				Me.OngetewayChanging(value)
				Me.SendPropertyChanging
				Me._geteway = value
				Me.SendPropertyChanged("geteway")
				Me.OngetewayChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_use]", Storage:="__use", DbType:="NVarChar(50)")>  _
	Public Property _use() As String
		Get
			Return Me.__use
		End Get
		Set
			If (String.Equals(Me.__use, value) = false) Then
				Me.On_useChanging(value)
				Me.SendPropertyChanging
				Me.__use = value
				Me.SendPropertyChanged("_use")
				Me.On_useChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_IPSubnetv4", Storage:="_IPSubnet", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property IPSubnet() As IPSubnet
		Get
			Return Me._IPSubnet.Entity
		End Get
		Set
			Dim previousValue As IPSubnet = Me._IPSubnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnet.Entity = Nothing
					previousValue.IPSubnetv4 = Nothing
				End If
				Me._IPSubnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IPSubnetv4 = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPSubnet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Licence")>  _
Partial Public Class Licence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _organization_identify As Integer
	
	Private _usage_limit As String
	
	Private _description As String
	
	Private _start_date As System.Nullable(Of Date)
	
	Private _end_date As System.Nullable(Of Date)
	
	Private _licence_key As String
	
	Private _perpetual As Boolean
	
	Private _finalclass As String
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _LnkDocumentToLicence As EntitySet(Of LnkDocumentToLicence)
	
	Private _OSLicence As EntityRef(Of OSLicence)
	
	Private _SoftwareLicence As EntityRef(Of SoftwareLicence)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub Onusage_limitChanging(value As String)
    End Sub
    Partial Private Sub Onusage_limitChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onstart_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onstart_dateChanged()
    End Sub
    Partial Private Sub Onend_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_dateChanged()
    End Sub
    Partial Private Sub Onlicence_keyChanging(value As String)
    End Sub
    Partial Private Sub Onlicence_keyChanged()
    End Sub
    Partial Private Sub OnperpetualChanging(value As Boolean)
    End Sub
    Partial Private Sub OnperpetualChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkDocumentToLicence = New EntitySet(Of LnkDocumentToLicence)(AddressOf Me.attach_LnkDocumentToLicence, AddressOf Me.detach_LnkDocumentToLicence)
		Me._OSLicence = CType(Nothing, EntityRef(Of OSLicence))
		Me._SoftwareLicence = CType(Nothing, EntityRef(Of SoftwareLicence))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int NOT NULL")>  _
	Public Property organization_identify() As Integer
		Get
			Return Me._organization_identify
		End Get
		Set
			If ((Me._organization_identify = value)  _
						= false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_usage_limit", DbType:="VarChar(100)")>  _
	Public Property usage_limit() As String
		Get
			Return Me._usage_limit
		End Get
		Set
			If (String.Equals(Me._usage_limit, value) = false) Then
				Me.Onusage_limitChanging(value)
				Me.SendPropertyChanging
				Me._usage_limit = value
				Me.SendPropertyChanged("usage_limit")
				Me.Onusage_limitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_start_date", DbType:="DateTime")>  _
	Public Property start_date() As System.Nullable(Of Date)
		Get
			Return Me._start_date
		End Get
		Set
			If (Me._start_date.Equals(value) = false) Then
				Me.Onstart_dateChanging(value)
				Me.SendPropertyChanging
				Me._start_date = value
				Me.SendPropertyChanged("start_date")
				Me.Onstart_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_end_date", DbType:="DateTime")>  _
	Public Property end_date() As System.Nullable(Of Date)
		Get
			Return Me._end_date
		End Get
		Set
			If (Me._end_date.Equals(value) = false) Then
				Me.Onend_dateChanging(value)
				Me.SendPropertyChanging
				Me._end_date = value
				Me.SendPropertyChanged("end_date")
				Me.Onend_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_licence_key", DbType:="VarChar(255)")>  _
	Public Property licence_key() As String
		Get
			Return Me._licence_key
		End Get
		Set
			If (String.Equals(Me._licence_key, value) = false) Then
				Me.Onlicence_keyChanging(value)
				Me.SendPropertyChanging
				Me._licence_key = value
				Me.SendPropertyChanged("licence_key")
				Me.Onlicence_keyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_perpetual", DbType:="Bit NOT NULL")>  _
	Public Property perpetual() As Boolean
		Get
			Return Me._perpetual
		End Get
		Set
			If ((Me._perpetual = value)  _
						= false) Then
				Me.OnperpetualChanging(value)
				Me.SendPropertyChanging
				Me._perpetual = value
				Me.SendPropertyChanged("perpetual")
				Me.OnperpetualChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50)")>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Licence_LnkDocumentToLicence", Storage:="_LnkDocumentToLicence", ThisKey:="_Identify", OtherKey:="licence_identify")>  _
	Public Property LnkDocumentToLicence() As EntitySet(Of LnkDocumentToLicence)
		Get
			Return Me._LnkDocumentToLicence
		End Get
		Set
			Me._LnkDocumentToLicence.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Licence_OSLicence", Storage:="_OSLicence", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OSLicence() As OSLicence
		Get
			Return Me._OSLicence.Entity
		End Get
		Set
			Dim previousValue As OSLicence = Me._OSLicence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSLicence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSLicence.Entity = Nothing
					previousValue.Licence = Nothing
				End If
				Me._OSLicence.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Licence = Me
				End If
				Me.SendPropertyChanged("OSLicence")
			End If
		End Set
	End Property
	
	<Association(Name:="Licence_SoftwareLicence", Storage:="_SoftwareLicence", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property SoftwareLicence() As SoftwareLicence
		Get
			Return Me._SoftwareLicence.Entity
		End Get
		Set
			Dim previousValue As SoftwareLicence = Me._SoftwareLicence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SoftwareLicence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SoftwareLicence.Entity = Nothing
					previousValue.Licence = Nothing
				End If
				Me._SoftwareLicence.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Licence = Me
				End If
				Me.SendPropertyChanged("SoftwareLicence")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Licence", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.Licence.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Licence.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkDocumentToLicence(ByVal entity As LnkDocumentToLicence)
		Me.SendPropertyChanging
		entity.Licence = Me
	End Sub
	
	Private Sub detach_LnkDocumentToLicence(ByVal entity As LnkDocumentToLicence)
		Me.SendPropertyChanging
		entity.Licence = Nothing
	End Sub
End Class

<Table(Name:="dbo.LnkApplicationSolutionToFunctionalCI")>  _
Partial Public Class LnkApplicationSolutionToFunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _applicationsolution_identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _ApplicationSolution As EntityRef(Of ApplicationSolution)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onapplicationsolution_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onapplicationsolution_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationSolution = CType(Nothing, EntityRef(Of ApplicationSolution))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_applicationsolution_identify", DbType:="Int NOT NULL")>  _
	Public Property applicationsolution_identify() As Integer
		Get
			Return Me._applicationsolution_identify
		End Get
		Set
			If ((Me._applicationsolution_identify = value)  _
						= false) Then
				If Me._ApplicationSolution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onapplicationsolution_identifyChanging(value)
				Me.SendPropertyChanging
				Me._applicationsolution_identify = value
				Me.SendPropertyChanged("applicationsolution_identify")
				Me.Onapplicationsolution_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ApplicationSolution_LnkApplicationSolutionToFunctionalCI", Storage:="_ApplicationSolution", ThisKey:="applicationsolution_identify", IsForeignKey:=true)>  _
	Public Property ApplicationSolution() As ApplicationSolution
		Get
			Return Me._ApplicationSolution.Entity
		End Get
		Set
			Dim previousValue As ApplicationSolution = Me._ApplicationSolution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationSolution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationSolution.Entity = Nothing
					previousValue.LnkApplicationSolutionToFunctionalCI.Remove(Me)
				End If
				Me._ApplicationSolution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkApplicationSolutionToFunctionalCI.Add(Me)
					Me._applicationsolution_identify = value.id
				Else
					Me._applicationsolution_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ApplicationSolution")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkApplicationSolutionToFunctionalCI", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkApplicationSolutionToFunctionalCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkApplicationSolutionToFunctionalCI.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkBackupsToFunctionalCI")>  _
Partial Public Class LnkBackupsToFunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _backups_identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Backups As EntityRef(Of Backups)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onbackups_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onbackups_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Backups = CType(Nothing, EntityRef(Of Backups))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_backups_identify", DbType:="Int NOT NULL")>  _
	Public Property backups_identify() As Integer
		Get
			Return Me._backups_identify
		End Get
		Set
			If ((Me._backups_identify = value)  _
						= false) Then
				If Me._Backups.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onbackups_identifyChanging(value)
				Me.SendPropertyChanging
				Me._backups_identify = value
				Me.SendPropertyChanged("backups_identify")
				Me.Onbackups_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Backups_LnkBackupsToFunctionalCI", Storage:="_Backups", ThisKey:="backups_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Backups() As Backups
		Get
			Return Me._Backups.Entity
		End Get
		Set
			Dim previousValue As Backups = Me._Backups.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Backups.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Backups.Entity = Nothing
					previousValue.LnkBackupsToFunctionalCI.Remove(Me)
				End If
				Me._Backups.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkBackupsToFunctionalCI.Add(Me)
					Me._backups_identify = value._Identify
				Else
					Me._backups_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Backups")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkBackupsToFunctionalCI", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkBackupsToFunctionalCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkBackupsToFunctionalCI.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkCIGroupToCI")>  _
Partial Public Class LnkCIGroupToCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _cigroup_identify As System.Nullable(Of Integer)
	
	Private _ci_identify As System.Nullable(Of Integer)
	
	Private _reason As String
	
	Private __IsDeleted As Boolean
	
	Private _CIGroup As EntityRef(Of CIGroup)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncigroup_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncigroup_identifyChanged()
    End Sub
    Partial Private Sub Onci_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onci_identifyChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CIGroup = CType(Nothing, EntityRef(Of CIGroup))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cigroup_identify", DbType:="Int")>  _
	Public Property cigroup_identify() As System.Nullable(Of Integer)
		Get
			Return Me._cigroup_identify
		End Get
		Set
			If (Me._cigroup_identify.Equals(value) = false) Then
				If Me._CIGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncigroup_identifyChanging(value)
				Me.SendPropertyChanging
				Me._cigroup_identify = value
				Me.SendPropertyChanged("cigroup_identify")
				Me.Oncigroup_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ci_identify", DbType:="Int")>  _
	Public Property ci_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ci_identify
		End Get
		Set
			If (Me._ci_identify.Equals(value) = false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ci_identify = value
				Me.SendPropertyChanged("ci_identify")
				Me.Onci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_reason", DbType:="VarChar(50)")>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CIGroup_LnkCIGroupToCI", Storage:="_CIGroup", ThisKey:="cigroup_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property CIGroup() As CIGroup
		Get
			Return Me._CIGroup.Entity
		End Get
		Set
			Dim previousValue As CIGroup = Me._CIGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CIGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CIGroup.Entity = Nothing
					previousValue.LnkCIGroupToCI.Remove(Me)
				End If
				Me._CIGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkCIGroupToCI.Add(Me)
					Me._cigroup_identify = value._Identify
				Else
					Me._cigroup_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CIGroup")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkCIGroupToCI", Storage:="_FunctionalCI", ThisKey:="ci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkCIGroupToCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkCIGroupToCI.Add(Me)
					Me._ci_identify = value._Identify
				Else
					Me._ci_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkConnectableCIToNetworkDevice")>  _
Partial Public Class LnkConnectableCIToNetworkDevice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _networkdevice_identify As System.Nullable(Of Integer)
	
	Private _connectableci_identify As System.Nullable(Of Integer)
	
	Private _network_port As Integer
	
	Private _device_port As Integer
	
	Private _code_connectable_type As Integer
	
	Private __IsDeleted As Boolean
	
	Private _ConnectableCI As EntityRef(Of ConnectableCI)
	
	Private _NetworkDevice As EntityRef(Of NetworkDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onnetworkdevice_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnetworkdevice_identifyChanged()
    End Sub
    Partial Private Sub Onconnectableci_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onconnectableci_identifyChanged()
    End Sub
    Partial Private Sub Onnetwork_portChanging(value As Integer)
    End Sub
    Partial Private Sub Onnetwork_portChanged()
    End Sub
    Partial Private Sub Ondevice_portChanging(value As Integer)
    End Sub
    Partial Private Sub Ondevice_portChanged()
    End Sub
    Partial Private Sub Oncode_connectable_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_connectable_typeChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConnectableCI = CType(Nothing, EntityRef(Of ConnectableCI))
		Me._NetworkDevice = CType(Nothing, EntityRef(Of NetworkDevice))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_networkdevice_identify", DbType:="Int")>  _
	Public Property networkdevice_identify() As System.Nullable(Of Integer)
		Get
			Return Me._networkdevice_identify
		End Get
		Set
			If (Me._networkdevice_identify.Equals(value) = false) Then
				If Me._NetworkDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onnetworkdevice_identifyChanging(value)
				Me.SendPropertyChanging
				Me._networkdevice_identify = value
				Me.SendPropertyChanged("networkdevice_identify")
				Me.Onnetworkdevice_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_connectableci_identify", DbType:="Int")>  _
	Public Property connectableci_identify() As System.Nullable(Of Integer)
		Get
			Return Me._connectableci_identify
		End Get
		Set
			If (Me._connectableci_identify.Equals(value) = false) Then
				If Me._ConnectableCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onconnectableci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._connectableci_identify = value
				Me.SendPropertyChanged("connectableci_identify")
				Me.Onconnectableci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_network_port", DbType:="Int NOT NULL")>  _
	Public Property network_port() As Integer
		Get
			Return Me._network_port
		End Get
		Set
			If ((Me._network_port = value)  _
						= false) Then
				Me.Onnetwork_portChanging(value)
				Me.SendPropertyChanging
				Me._network_port = value
				Me.SendPropertyChanged("network_port")
				Me.Onnetwork_portChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_device_port", DbType:="Int NOT NULL")>  _
	Public Property device_port() As Integer
		Get
			Return Me._device_port
		End Get
		Set
			If ((Me._device_port = value)  _
						= false) Then
				Me.Ondevice_portChanging(value)
				Me.SendPropertyChanging
				Me._device_port = value
				Me.SendPropertyChanged("device_port")
				Me.Ondevice_portChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_connectable_type", DbType:="Int NOT NULL")>  _
	Public Property code_connectable_type() As Integer
		Get
			Return Me._code_connectable_type
		End Get
		Set
			If ((Me._code_connectable_type = value)  _
						= false) Then
				Me.Oncode_connectable_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_connectable_type = value
				Me.SendPropertyChanged("code_connectable_type")
				Me.Oncode_connectable_typeChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_LnkConnectableCIToNetworkDevice", Storage:="_ConnectableCI", ThisKey:="connectableci_identify", IsForeignKey:=true)>  _
	Public Property ConnectableCI() As ConnectableCI
		Get
			Return Me._ConnectableCI.Entity
		End Get
		Set
			Dim previousValue As ConnectableCI = Me._ConnectableCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConnectableCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConnectableCI.Entity = Nothing
					previousValue.LnkConnectableCIToNetworkDevice.Remove(Me)
				End If
				Me._ConnectableCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkConnectableCIToNetworkDevice.Add(Me)
					Me._connectableci_identify = value.id
				Else
					Me._connectableci_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ConnectableCI")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkDevice_LnkConnectableCIToNetworkDevice", Storage:="_NetworkDevice", ThisKey:="networkdevice_identify", IsForeignKey:=true)>  _
	Public Property NetworkDevice() As NetworkDevice
		Get
			Return Me._NetworkDevice.Entity
		End Get
		Set
			Dim previousValue As NetworkDevice = Me._NetworkDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkDevice.Entity = Nothing
					previousValue.LnkConnectableCIToNetworkDevice.Remove(Me)
				End If
				Me._NetworkDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkConnectableCIToNetworkDevice.Add(Me)
					Me._networkdevice_identify = value.id
				Else
					Me._networkdevice_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NetworkDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkContactToContract")>  _
Partial Public Class LnkContactToContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _contact_identify As Integer
	
	Private _contract_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Contact As EntityRef(Of Contact)
	
	Private _Contract As EntityRef(Of Contract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncontact_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontact_identifyChanged()
    End Sub
    Partial Private Sub Oncontract_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontract_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		Me._Contract = CType(Nothing, EntityRef(Of Contract))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contact_identify", DbType:="Int NOT NULL")>  _
	Public Property contact_identify() As Integer
		Get
			Return Me._contact_identify
		End Get
		Set
			If ((Me._contact_identify = value)  _
						= false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontact_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contact_identify = value
				Me.SendPropertyChanged("contact_identify")
				Me.Oncontact_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contract_identify", DbType:="Int NOT NULL")>  _
	Public Property contract_identify() As Integer
		Get
			Return Me._contract_identify
		End Get
		Set
			If ((Me._contract_identify = value)  _
						= false) Then
				If Me._Contract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contract_identify = value
				Me.SendPropertyChanged("contract_identify")
				Me.Oncontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToContract", Storage:="_Contact", ThisKey:="contact_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.LnkContactToContract.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToContract.Add(Me)
					Me._contact_identify = value._Identify
				Else
					Me._contact_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	<Association(Name:="Contract_LnkContactToContract", Storage:="_Contract", ThisKey:="contract_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contract() As Contract
		Get
			Return Me._Contract.Entity
		End Get
		Set
			Dim previousValue As Contract = Me._Contract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contract.Entity = Nothing
					previousValue.LnkContactToContract.Remove(Me)
				End If
				Me._Contract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToContract.Add(Me)
					Me._contract_identify = value._Identify
				Else
					Me._contract_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkContactToFunctionalCI")>  _
Partial Public Class LnkContactToFunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _contact_identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Contact As EntityRef(Of Contact)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncontact_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontact_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contact_identify", DbType:="Int NOT NULL")>  _
	Public Property contact_identify() As Integer
		Get
			Return Me._contact_identify
		End Get
		Set
			If ((Me._contact_identify = value)  _
						= false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontact_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contact_identify = value
				Me.SendPropertyChanged("contact_identify")
				Me.Oncontact_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToFunctionalCI", Storage:="_Contact", ThisKey:="contact_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.LnkContactToFunctionalCI.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToFunctionalCI.Add(Me)
					Me._contact_identify = value._Identify
				Else
					Me._contact_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkContactToFunctionalCI", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkContactToFunctionalCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToFunctionalCI.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkContactToIPObject")>  _
Partial Public Class LnkContactToIPObject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ipobject_identify As System.Nullable(Of Integer)
	
	Private _contact_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Contact As EntityRef(Of Contact)
	
	Private _IPObject As EntityRef(Of IPObject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onipobject_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onipobject_identifyChanged()
    End Sub
    Partial Private Sub Oncontact_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncontact_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		Me._IPObject = CType(Nothing, EntityRef(Of IPObject))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipobject_identify", DbType:="Int")>  _
	Public Property ipobject_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ipobject_identify
		End Get
		Set
			If (Me._ipobject_identify.Equals(value) = false) Then
				If Me._IPObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipobject_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipobject_identify = value
				Me.SendPropertyChanged("ipobject_identify")
				Me.Onipobject_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contact_identify", DbType:="Int")>  _
	Public Property contact_identify() As System.Nullable(Of Integer)
		Get
			Return Me._contact_identify
		End Get
		Set
			If (Me._contact_identify.Equals(value) = false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontact_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contact_identify = value
				Me.SendPropertyChanged("contact_identify")
				Me.Oncontact_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_LnkContactToIPObject", Storage:="_Contact", ThisKey:="contact_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.LnkContactToIPObject.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToIPObject.Add(Me)
					Me._contact_identify = value._Identify
				Else
					Me._contact_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_LnkContactToIPObject", Storage:="_IPObject", ThisKey:="ipobject_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property IPObject() As IPObject
		Get
			Return Me._IPObject.Entity
		End Get
		Set
			Dim previousValue As IPObject = Me._IPObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPObject.Entity = Nothing
					previousValue.LnkContactToIPObject.Remove(Me)
				End If
				Me._IPObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContactToIPObject.Add(Me)
					Me._ipobject_identify = value._Identify
				Else
					Me._ipobject_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPObject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkContractToDocument")>  _
Partial Public Class LnkContractToDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _document_identify As Integer
	
	Private _contract_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Contract As EntityRef(Of Contract)
	
	Private _Documents As EntityRef(Of Documents)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Ondocument_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Ondocument_identifyChanged()
    End Sub
    Partial Private Sub Oncontract_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontract_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contract = CType(Nothing, EntityRef(Of Contract))
		Me._Documents = CType(Nothing, EntityRef(Of Documents))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_document_identify", DbType:="Int NOT NULL")>  _
	Public Property document_identify() As Integer
		Get
			Return Me._document_identify
		End Get
		Set
			If ((Me._document_identify = value)  _
						= false) Then
				If Me._Documents.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondocument_identifyChanging(value)
				Me.SendPropertyChanging
				Me._document_identify = value
				Me.SendPropertyChanged("document_identify")
				Me.Ondocument_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contract_identify", DbType:="Int NOT NULL")>  _
	Public Property contract_identify() As Integer
		Get
			Return Me._contract_identify
		End Get
		Set
			If ((Me._contract_identify = value)  _
						= false) Then
				If Me._Contract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contract_identify = value
				Me.SendPropertyChanged("contract_identify")
				Me.Oncontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contract_LnkContractToDocument", Storage:="_Contract", ThisKey:="contract_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contract() As Contract
		Get
			Return Me._Contract.Entity
		End Get
		Set
			Dim previousValue As Contract = Me._Contract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contract.Entity = Nothing
					previousValue.LnkContractToDocument.Remove(Me)
				End If
				Me._Contract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContractToDocument.Add(Me)
					Me._contract_identify = value._Identify
				Else
					Me._contract_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contract")
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkContractToDocument", Storage:="_Documents", ThisKey:="document_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Documents() As Documents
		Get
			Return Me._Documents.Entity
		End Get
		Set
			Dim previousValue As Documents = Me._Documents.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documents.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documents.Entity = Nothing
					previousValue.LnkContractToDocument.Remove(Me)
				End If
				Me._Documents.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkContractToDocument.Add(Me)
					Me._document_identify = value._Identify
				Else
					Me._document_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Documents")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkCustomerContractToProviderContract")>  _
Partial Public Class LnkCustomerContractToProviderContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _customercontract_identify As Integer
	
	Private _providercontract_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _CustomerContract As EntityRef(Of CustomerContract)
	
	Private _ProviderContract As EntityRef(Of ProviderContract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncustomercontract_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncustomercontract_identifyChanged()
    End Sub
    Partial Private Sub Onprovidercontract_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onprovidercontract_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CustomerContract = CType(Nothing, EntityRef(Of CustomerContract))
		Me._ProviderContract = CType(Nothing, EntityRef(Of ProviderContract))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_customercontract_identify", DbType:="Int NOT NULL")>  _
	Public Property customercontract_identify() As Integer
		Get
			Return Me._customercontract_identify
		End Get
		Set
			If ((Me._customercontract_identify = value)  _
						= false) Then
				If Me._CustomerContract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncustomercontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._customercontract_identify = value
				Me.SendPropertyChanged("customercontract_identify")
				Me.Oncustomercontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_providercontract_identify", DbType:="Int NOT NULL")>  _
	Public Property providercontract_identify() As Integer
		Get
			Return Me._providercontract_identify
		End Get
		Set
			If ((Me._providercontract_identify = value)  _
						= false) Then
				If Me._ProviderContract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onprovidercontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._providercontract_identify = value
				Me.SendPropertyChanged("providercontract_identify")
				Me.Onprovidercontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CustomerContract_LnkCustomerContractToProviderContract", Storage:="_CustomerContract", ThisKey:="customercontract_identify", IsForeignKey:=true)>  _
	Public Property CustomerContract() As CustomerContract
		Get
			Return Me._CustomerContract.Entity
		End Get
		Set
			Dim previousValue As CustomerContract = Me._CustomerContract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CustomerContract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CustomerContract.Entity = Nothing
					previousValue.LnkCustomerContractToProviderContract.Remove(Me)
				End If
				Me._CustomerContract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkCustomerContractToProviderContract.Add(Me)
					Me._customercontract_identify = value.id
				Else
					Me._customercontract_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CustomerContract")
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderContract_LnkCustomerContractToProviderContract", Storage:="_ProviderContract", ThisKey:="providercontract_identify", IsForeignKey:=true)>  _
	Public Property ProviderContract() As ProviderContract
		Get
			Return Me._ProviderContract.Entity
		End Get
		Set
			Dim previousValue As ProviderContract = Me._ProviderContract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProviderContract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProviderContract.Entity = Nothing
					previousValue.LnkCustomerContractToProviderContract.Remove(Me)
				End If
				Me._ProviderContract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkCustomerContractToProviderContract.Add(Me)
					Me._providercontract_identify = value.id
				Else
					Me._providercontract_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProviderContract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkDatacenterDeviceToSan")>  _
Partial Public Class LnkDatacenterDeviceToSan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _san_identify As System.Nullable(Of Integer)
	
	Private _datacenterdevice_id As System.Nullable(Of Integer)
	
	Private _san_port As String
	
	Private _datacenterdevice_port As String
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
	Private _SANSwitch As EntityRef(Of SANSwitch)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onsan_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsan_identifyChanged()
    End Sub
    Partial Private Sub Ondatacenterdevice_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondatacenterdevice_idChanged()
    End Sub
    Partial Private Sub Onsan_portChanging(value As String)
    End Sub
    Partial Private Sub Onsan_portChanged()
    End Sub
    Partial Private Sub Ondatacenterdevice_portChanging(value As String)
    End Sub
    Partial Private Sub Ondatacenterdevice_portChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		Me._SANSwitch = CType(Nothing, EntityRef(Of SANSwitch))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_san_identify", DbType:="Int")>  _
	Public Property san_identify() As System.Nullable(Of Integer)
		Get
			Return Me._san_identify
		End Get
		Set
			If (Me._san_identify.Equals(value) = false) Then
				If Me._SANSwitch.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsan_identifyChanging(value)
				Me.SendPropertyChanging
				Me._san_identify = value
				Me.SendPropertyChanged("san_identify")
				Me.Onsan_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_datacenterdevice_id", DbType:="Int")>  _
	Public Property datacenterdevice_id() As System.Nullable(Of Integer)
		Get
			Return Me._datacenterdevice_id
		End Get
		Set
			If (Me._datacenterdevice_id.Equals(value) = false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondatacenterdevice_idChanging(value)
				Me.SendPropertyChanging
				Me._datacenterdevice_id = value
				Me.SendPropertyChanged("datacenterdevice_id")
				Me.Ondatacenterdevice_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_san_port", DbType:="VarChar(50)")>  _
	Public Property san_port() As String
		Get
			Return Me._san_port
		End Get
		Set
			If (String.Equals(Me._san_port, value) = false) Then
				Me.Onsan_portChanging(value)
				Me.SendPropertyChanging
				Me._san_port = value
				Me.SendPropertyChanged("san_port")
				Me.Onsan_portChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_datacenterdevice_port", DbType:="VarChar(50)")>  _
	Public Property datacenterdevice_port() As String
		Get
			Return Me._datacenterdevice_port
		End Get
		Set
			If (String.Equals(Me._datacenterdevice_port, value) = false) Then
				Me.Ondatacenterdevice_portChanging(value)
				Me.SendPropertyChanging
				Me._datacenterdevice_port = value
				Me.SendPropertyChanged("datacenterdevice_port")
				Me.Ondatacenterdevice_portChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_LnkDatacenterDeviceToSan", Storage:="_DataCenterDevice", ThisKey:="datacenterdevice_id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.LnkDatacenterDeviceToSan.Remove(Me)
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDatacenterDeviceToSan.Add(Me)
					Me._datacenterdevice_id = value.id
				Else
					Me._datacenterdevice_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="SANSwitch_LnkDatacenterDeviceToSan", Storage:="_SANSwitch", ThisKey:="san_identify", IsForeignKey:=true)>  _
	Public Property SANSwitch() As SANSwitch
		Get
			Return Me._SANSwitch.Entity
		End Get
		Set
			Dim previousValue As SANSwitch = Me._SANSwitch.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SANSwitch.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SANSwitch.Entity = Nothing
					previousValue.LnkDatacenterDeviceToSan.Remove(Me)
				End If
				Me._SANSwitch.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDatacenterDeviceToSan.Add(Me)
					Me._san_identify = value.id
				Else
					Me._san_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SANSwitch")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkDocumentToFunctionalCI")>  _
Partial Public Class LnkDocumentToFunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _document_identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Documents As EntityRef(Of Documents)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Ondocument_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Ondocument_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Documents = CType(Nothing, EntityRef(Of Documents))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_document_identify", DbType:="Int NOT NULL")>  _
	Public Property document_identify() As Integer
		Get
			Return Me._document_identify
		End Get
		Set
			If ((Me._document_identify = value)  _
						= false) Then
				If Me._Documents.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondocument_identifyChanging(value)
				Me.SendPropertyChanging
				Me._document_identify = value
				Me.SendPropertyChanged("document_identify")
				Me.Ondocument_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToFunctionalCI", Storage:="_Documents", ThisKey:="document_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Documents() As Documents
		Get
			Return Me._Documents.Entity
		End Get
		Set
			Dim previousValue As Documents = Me._Documents.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documents.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documents.Entity = Nothing
					previousValue.LnkDocumentToFunctionalCI.Remove(Me)
				End If
				Me._Documents.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToFunctionalCI.Add(Me)
					Me._document_identify = value._Identify
				Else
					Me._document_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Documents")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkDocumentToFunctionalCI", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkDocumentToFunctionalCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToFunctionalCI.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkDocumentToIPObject")>  _
Partial Public Class LnkDocumentToIPObject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ipobject_identify As System.Nullable(Of Integer)
	
	Private _document_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Documents As EntityRef(Of Documents)
	
	Private _IPObject As EntityRef(Of IPObject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onipobject_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onipobject_identifyChanged()
    End Sub
    Partial Private Sub Ondocument_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondocument_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Documents = CType(Nothing, EntityRef(Of Documents))
		Me._IPObject = CType(Nothing, EntityRef(Of IPObject))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipobject_identify", DbType:="Int")>  _
	Public Property ipobject_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ipobject_identify
		End Get
		Set
			If (Me._ipobject_identify.Equals(value) = false) Then
				If Me._IPObject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipobject_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipobject_identify = value
				Me.SendPropertyChanged("ipobject_identify")
				Me.Onipobject_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_document_identify", DbType:="Int")>  _
	Public Property document_identify() As System.Nullable(Of Integer)
		Get
			Return Me._document_identify
		End Get
		Set
			If (Me._document_identify.Equals(value) = false) Then
				If Me._Documents.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondocument_identifyChanging(value)
				Me.SendPropertyChanging
				Me._document_identify = value
				Me.SendPropertyChanged("document_identify")
				Me.Ondocument_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToIPObject", Storage:="_Documents", ThisKey:="document_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Documents() As Documents
		Get
			Return Me._Documents.Entity
		End Get
		Set
			Dim previousValue As Documents = Me._Documents.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documents.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documents.Entity = Nothing
					previousValue.LnkDocumentToIPObject.Remove(Me)
				End If
				Me._Documents.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToIPObject.Add(Me)
					Me._document_identify = value._Identify
				Else
					Me._document_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documents")
			End If
		End Set
	End Property
	
	<Association(Name:="IPObject_LnkDocumentToIPObject", Storage:="_IPObject", ThisKey:="ipobject_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property IPObject() As IPObject
		Get
			Return Me._IPObject.Entity
		End Get
		Set
			Dim previousValue As IPObject = Me._IPObject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPObject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPObject.Entity = Nothing
					previousValue.LnkDocumentToIPObject.Remove(Me)
				End If
				Me._IPObject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToIPObject.Add(Me)
					Me._ipobject_identify = value._Identify
				Else
					Me._ipobject_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPObject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkDocumentToLicence")>  _
Partial Public Class LnkDocumentToLicence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _licence_identify As System.Nullable(Of Integer)
	
	Private _document_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Documents As EntityRef(Of Documents)
	
	Private _Licence As EntityRef(Of Licence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onlicence_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlicence_identifyChanged()
    End Sub
    Partial Private Sub Ondocument_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondocument_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Documents = CType(Nothing, EntityRef(Of Documents))
		Me._Licence = CType(Nothing, EntityRef(Of Licence))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_licence_identify", DbType:="Int")>  _
	Public Property licence_identify() As System.Nullable(Of Integer)
		Get
			Return Me._licence_identify
		End Get
		Set
			If (Me._licence_identify.Equals(value) = false) Then
				If Me._Licence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlicence_identifyChanging(value)
				Me.SendPropertyChanging
				Me._licence_identify = value
				Me.SendPropertyChanged("licence_identify")
				Me.Onlicence_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_document_identify", DbType:="Int")>  _
	Public Property document_identify() As System.Nullable(Of Integer)
		Get
			Return Me._document_identify
		End Get
		Set
			If (Me._document_identify.Equals(value) = false) Then
				If Me._Documents.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondocument_identifyChanging(value)
				Me.SendPropertyChanging
				Me._document_identify = value
				Me.SendPropertyChanged("document_identify")
				Me.Ondocument_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToLicence", Storage:="_Documents", ThisKey:="document_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Documents() As Documents
		Get
			Return Me._Documents.Entity
		End Get
		Set
			Dim previousValue As Documents = Me._Documents.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documents.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documents.Entity = Nothing
					previousValue.LnkDocumentToLicence.Remove(Me)
				End If
				Me._Documents.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToLicence.Add(Me)
					Me._document_identify = value._Identify
				Else
					Me._document_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documents")
			End If
		End Set
	End Property
	
	<Association(Name:="Licence_LnkDocumentToLicence", Storage:="_Licence", ThisKey:="licence_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Licence() As Licence
		Get
			Return Me._Licence.Entity
		End Get
		Set
			Dim previousValue As Licence = Me._Licence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Licence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Licence.Entity = Nothing
					previousValue.LnkDocumentToLicence.Remove(Me)
				End If
				Me._Licence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToLicence.Add(Me)
					Me._licence_identify = value._Identify
				Else
					Me._licence_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Licence")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkDocumentToSoftware")>  _
Partial Public Class LnkDocumentToSoftware
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _software_identify As System.Nullable(Of Integer)
	
	Private _document_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Documents As EntityRef(Of Documents)
	
	Private _Software As EntityRef(Of Software)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onsoftware_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsoftware_identifyChanged()
    End Sub
    Partial Private Sub Ondocument_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondocument_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Documents = CType(Nothing, EntityRef(Of Documents))
		Me._Software = CType(Nothing, EntityRef(Of Software))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_software_identify", DbType:="Int")>  _
	Public Property software_identify() As System.Nullable(Of Integer)
		Get
			Return Me._software_identify
		End Get
		Set
			If (Me._software_identify.Equals(value) = false) Then
				If Me._Software.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsoftware_identifyChanging(value)
				Me.SendPropertyChanging
				Me._software_identify = value
				Me.SendPropertyChanged("software_identify")
				Me.Onsoftware_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_document_identify", DbType:="Int")>  _
	Public Property document_identify() As System.Nullable(Of Integer)
		Get
			Return Me._document_identify
		End Get
		Set
			If (Me._document_identify.Equals(value) = false) Then
				If Me._Documents.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Ondocument_identifyChanging(value)
				Me.SendPropertyChanging
				Me._document_identify = value
				Me.SendPropertyChanged("document_identify")
				Me.Ondocument_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Documents_LnkDocumentToSoftware", Storage:="_Documents", ThisKey:="document_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Documents() As Documents
		Get
			Return Me._Documents.Entity
		End Get
		Set
			Dim previousValue As Documents = Me._Documents.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documents.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documents.Entity = Nothing
					previousValue.LnkDocumentToSoftware.Remove(Me)
				End If
				Me._Documents.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToSoftware.Add(Me)
					Me._document_identify = value._Identify
				Else
					Me._document_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documents")
			End If
		End Set
	End Property
	
	<Association(Name:="Software_LnkDocumentToSoftware", Storage:="_Software", ThisKey:="software_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Software() As Software
		Get
			Return Me._Software.Entity
		End Get
		Set
			Dim previousValue As Software = Me._Software.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Software.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Software.Entity = Nothing
					previousValue.LnkDocumentToSoftware.Remove(Me)
				End If
				Me._Software.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkDocumentToSoftware.Add(Me)
					Me._software_identify = value._Identify
				Else
					Me._software_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Software")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkFunctionalCIToOrganization")>  _
Partial Public Class LnkFunctionalCIToOrganization
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private _organization_identify As Integer
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int NOT NULL")>  _
	Public Property organization_identify() As Integer
		Get
			Return Me._organization_identify
		End Get
		Set
			If ((Me._organization_identify = value)  _
						= false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkFunctionalCIToOrganization", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkFunctionalCIToOrganization.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkFunctionalCIToOrganization.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_LnkFunctionalCIToOrganization", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.LnkFunctionalCIToOrganization.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkFunctionalCIToOrganization.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkFunctionalCIToProviderContract")>  _
Partial Public Class LnkFunctionalCIToProviderContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _providercontract_identify As System.Nullable(Of Integer)
	
	Private _functionalci_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _ProviderContract As EntityRef(Of ProviderContract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onprovidercontract_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onprovidercontract_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._ProviderContract = CType(Nothing, EntityRef(Of ProviderContract))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_providercontract_identify", DbType:="Int")>  _
	Public Property providercontract_identify() As System.Nullable(Of Integer)
		Get
			Return Me._providercontract_identify
		End Get
		Set
			If (Me._providercontract_identify.Equals(value) = false) Then
				If Me._ProviderContract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onprovidercontract_identifyChanging(value)
				Me.SendPropertyChanging
				Me._providercontract_identify = value
				Me.SendPropertyChanged("providercontract_identify")
				Me.Onprovidercontract_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int")>  _
	Public Property functionalci_identify() As System.Nullable(Of Integer)
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If (Me._functionalci_identify.Equals(value) = false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkFunctionalCIToProviderContract", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkFunctionalCIToProviderContract.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkFunctionalCIToProviderContract.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderContract_LnkFunctionalCIToProviderContract", Storage:="_ProviderContract", ThisKey:="providercontract_identify", IsForeignKey:=true)>  _
	Public Property ProviderContract() As ProviderContract
		Get
			Return Me._ProviderContract.Entity
		End Get
		Set
			Dim previousValue As ProviderContract = Me._ProviderContract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProviderContract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProviderContract.Entity = Nothing
					previousValue.LnkFunctionalCIToProviderContract.Remove(Me)
				End If
				Me._ProviderContract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkFunctionalCIToProviderContract.Add(Me)
					Me._providercontract_identify = value.id
				Else
					Me._providercontract_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProviderContract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkIPAddressToIPAddress")>  _
Partial Public Class LnkIPAddressToIPAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ip1_identify As Integer
	
	Private _ip2_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _IPAddress As EntityRef(Of IPAddress)
	
	Private _IPAddress1 As EntityRef(Of IPAddress)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onip1_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onip1_identifyChanged()
    End Sub
    Partial Private Sub Onip2_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onip2_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPAddress = CType(Nothing, EntityRef(Of IPAddress))
		Me._IPAddress1 = CType(Nothing, EntityRef(Of IPAddress))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip1_identify", DbType:="Int NOT NULL")>  _
	Public Property ip1_identify() As Integer
		Get
			Return Me._ip1_identify
		End Get
		Set
			If ((Me._ip1_identify = value)  _
						= false) Then
				If Me._IPAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onip1_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ip1_identify = value
				Me.SendPropertyChanged("ip1_identify")
				Me.Onip1_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ip2_identify", DbType:="Int NOT NULL")>  _
	Public Property ip2_identify() As Integer
		Get
			Return Me._ip2_identify
		End Get
		Set
			If ((Me._ip2_identify = value)  _
						= false) Then
				If Me._IPAddress1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onip2_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ip2_identify = value
				Me.SendPropertyChanged("ip2_identify")
				Me.Onip2_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPAddressToIPAddress", Storage:="_IPAddress", ThisKey:="ip1_identify", IsForeignKey:=true)>  _
	Public Property IPAddress() As IPAddress
		Get
			Return Me._IPAddress.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress.Entity = Nothing
					previousValue.LnkIPAddressToIPAddress.Remove(Me)
				End If
				Me._IPAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPAddressToIPAddress.Add(Me)
					Me._ip1_identify = value.id
				Else
					Me._ip1_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddress")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPAddressToIPAddress1", Storage:="_IPAddress1", ThisKey:="ip2_identify", IsForeignKey:=true)>  _
	Public Property IPAddress1() As IPAddress
		Get
			Return Me._IPAddress1.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress1.Entity = Nothing
					previousValue.LnkIPAddressToIPAddress1.Remove(Me)
				End If
				Me._IPAddress1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPAddressToIPAddress1.Add(Me)
					Me._ip2_identify = value.id
				Else
					Me._ip2_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddress1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkIPInterfaceToIPAddress")>  _
Partial Public Class LnkIPInterfaceToIPAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ipinterface_identify As Integer
	
	Private _ipaddress_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _IPAddress As EntityRef(Of IPAddress)
	
	Private _IPInterface As EntityRef(Of IPInterface)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onipinterface_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onipinterface_identifyChanged()
    End Sub
    Partial Private Sub Onipaddress_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onipaddress_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPAddress = CType(Nothing, EntityRef(Of IPAddress))
		Me._IPInterface = CType(Nothing, EntityRef(Of IPInterface))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipinterface_identify", DbType:="Int NOT NULL")>  _
	Public Property ipinterface_identify() As Integer
		Get
			Return Me._ipinterface_identify
		End Get
		Set
			If ((Me._ipinterface_identify = value)  _
						= false) Then
				If Me._IPInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipinterface_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipinterface_identify = value
				Me.SendPropertyChanged("ipinterface_identify")
				Me.Onipinterface_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipaddress_identify", DbType:="Int NOT NULL")>  _
	Public Property ipaddress_identify() As Integer
		Get
			Return Me._ipaddress_identify
		End Get
		Set
			If ((Me._ipaddress_identify = value)  _
						= false) Then
				If Me._IPAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipaddress_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipaddress_identify = value
				Me.SendPropertyChanged("ipaddress_identify")
				Me.Onipaddress_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_LnkIPInterfaceToIPAddress", Storage:="_IPAddress", ThisKey:="ipaddress_identify", IsForeignKey:=true)>  _
	Public Property IPAddress() As IPAddress
		Get
			Return Me._IPAddress.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress.Entity = Nothing
					previousValue.LnkIPInterfaceToIPAddress.Remove(Me)
				End If
				Me._IPAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPInterfaceToIPAddress.Add(Me)
					Me._ipaddress_identify = value.id
				Else
					Me._ipaddress_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPAddress")
			End If
		End Set
	End Property
	
	<Association(Name:="IPInterface_LnkIPInterfaceToIPAddress", Storage:="_IPInterface", ThisKey:="ipinterface_identify", IsForeignKey:=true)>  _
	Public Property IPInterface() As IPInterface
		Get
			Return Me._IPInterface.Entity
		End Get
		Set
			Dim previousValue As IPInterface = Me._IPInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPInterface.Entity = Nothing
					previousValue.LnkIPInterfaceToIPAddress.Remove(Me)
				End If
				Me._IPInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPInterfaceToIPAddress.Add(Me)
					Me._ipinterface_identify = value.id
				Else
					Me._ipinterface_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPInterface")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkIPSubnetToLocation")>  _
Partial Public Class LnkIPSubnetToLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ipsubnet_identify As System.Nullable(Of Integer)
	
	Private _location_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPSubnet As EntityRef(Of IPSubnet)
	
	Private _Location As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onipsubnet_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onipsubnet_identifyChanged()
    End Sub
    Partial Private Sub Onlocation_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlocation_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPSubnet = CType(Nothing, EntityRef(Of IPSubnet))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipsubnet_identify", DbType:="Int")>  _
	Public Property ipsubnet_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ipsubnet_identify
		End Get
		Set
			If (Me._ipsubnet_identify.Equals(value) = false) Then
				If Me._IPSubnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipsubnet_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipsubnet_identify = value
				Me.SendPropertyChanged("ipsubnet_identify")
				Me.Onipsubnet_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_location_identify", DbType:="Int")>  _
	Public Property location_identify() As System.Nullable(Of Integer)
		Get
			Return Me._location_identify
		End Get
		Set
			If (Me._location_identify.Equals(value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocation_identifyChanging(value)
				Me.SendPropertyChanging
				Me._location_identify = value
				Me.SendPropertyChanged("location_identify")
				Me.Onlocation_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkIPSubnetToLocation", Storage:="_IPSubnet", ThisKey:="ipsubnet_identify", IsForeignKey:=true)>  _
	Public Property IPSubnet() As IPSubnet
		Get
			Return Me._IPSubnet.Entity
		End Get
		Set
			Dim previousValue As IPSubnet = Me._IPSubnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnet.Entity = Nothing
					previousValue.LnkIPSubnetToLocation.Remove(Me)
				End If
				Me._IPSubnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPSubnetToLocation.Add(Me)
					Me._ipsubnet_identify = value.id
				Else
					Me._ipsubnet_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPSubnet")
			End If
		End Set
	End Property
	
	<Association(Name:="Location_LnkIPSubnetToLocation", Storage:="_Location", ThisKey:="location_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.LnkIPSubnetToLocation.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPSubnetToLocation.Add(Me)
					Me._location_identify = value._Identify
				Else
					Me._location_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkIPSubnetToVLAN")>  _
Partial Public Class LnkIPSubnetToVLAN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _ipsubnet_identify As System.Nullable(Of Integer)
	
	Private _vlan_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPSubnet As EntityRef(Of IPSubnet)
	
	Private _VLAN As EntityRef(Of VLAN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onipsubnet_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onipsubnet_identifyChanged()
    End Sub
    Partial Private Sub Onvlan_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvlan_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPSubnet = CType(Nothing, EntityRef(Of IPSubnet))
		Me._VLAN = CType(Nothing, EntityRef(Of VLAN))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ipsubnet_identify", DbType:="Int")>  _
	Public Property ipsubnet_identify() As System.Nullable(Of Integer)
		Get
			Return Me._ipsubnet_identify
		End Get
		Set
			If (Me._ipsubnet_identify.Equals(value) = false) Then
				If Me._IPSubnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onipsubnet_identifyChanging(value)
				Me.SendPropertyChanging
				Me._ipsubnet_identify = value
				Me.SendPropertyChanged("ipsubnet_identify")
				Me.Onipsubnet_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vlan_identify", DbType:="Int")>  _
	Public Property vlan_identify() As System.Nullable(Of Integer)
		Get
			Return Me._vlan_identify
		End Get
		Set
			If (Me._vlan_identify.Equals(value) = false) Then
				If Me._VLAN.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvlan_identifyChanging(value)
				Me.SendPropertyChanging
				Me._vlan_identify = value
				Me.SendPropertyChanged("vlan_identify")
				Me.Onvlan_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkIPSubnetToVLAN", Storage:="_IPSubnet", ThisKey:="ipsubnet_identify", IsForeignKey:=true)>  _
	Public Property IPSubnet() As IPSubnet
		Get
			Return Me._IPSubnet.Entity
		End Get
		Set
			Dim previousValue As IPSubnet = Me._IPSubnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnet.Entity = Nothing
					previousValue.LnkIPSubnetToVLAN.Remove(Me)
				End If
				Me._IPSubnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPSubnetToVLAN.Add(Me)
					Me._ipsubnet_identify = value.id
				Else
					Me._ipsubnet_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPSubnet")
			End If
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkIPSubnetToVLAN", Storage:="_VLAN", ThisKey:="vlan_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property VLAN() As VLAN
		Get
			Return Me._VLAN.Entity
		End Get
		Set
			Dim previousValue As VLAN = Me._VLAN.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VLAN.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VLAN.Entity = Nothing
					previousValue.LnkIPSubnetToVLAN.Remove(Me)
				End If
				Me._VLAN.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkIPSubnetToVLAN.Add(Me)
					Me._vlan_identify = value._Identify
				Else
					Me._vlan_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VLAN")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkPasswdToFunctionalCI")>  _
Partial Public Class LnkPasswdToFunctionalCI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _passwd_identify As Integer
	
	Private _functionalci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Passwd As EntityRef(Of Passwd)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onpasswd_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onpasswd_identifyChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Passwd = CType(Nothing, EntityRef(Of Passwd))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_passwd_identify", DbType:="Int NOT NULL")>  _
	Public Property passwd_identify() As Integer
		Get
			Return Me._passwd_identify
		End Get
		Set
			If ((Me._passwd_identify = value)  _
						= false) Then
				If Me._Passwd.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onpasswd_identifyChanging(value)
				Me.SendPropertyChanging
				Me._passwd_identify = value
				Me.SendPropertyChanged("passwd_identify")
				Me.Onpasswd_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int NOT NULL")>  _
	Public Property functionalci_identify() As Integer
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If ((Me._functionalci_identify = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_LnkPasswdToFunctionalCI", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.LnkPasswdToFunctionalCI.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkPasswdToFunctionalCI.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Passwd_LnkPasswdToFunctionalCI", Storage:="_Passwd", ThisKey:="passwd_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Passwd() As Passwd
		Get
			Return Me._Passwd.Entity
		End Get
		Set
			Dim previousValue As Passwd = Me._Passwd.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Passwd.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Passwd.Entity = Nothing
					previousValue.LnkPasswdToFunctionalCI.Remove(Me)
				End If
				Me._Passwd.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkPasswdToFunctionalCI.Add(Me)
					Me._passwd_identify = value._Identify
				Else
					Me._passwd_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Passwd")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkPhysicalInterfaceToVLAN")>  _
Partial Public Class LnkPhysicalInterfaceToVLAN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _physicalinterface_identify As System.Nullable(Of Integer)
	
	Private _vlan_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _PhysicalInterface As EntityRef(Of PhysicalInterface)
	
	Private _VLAN As EntityRef(Of VLAN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onphysicalinterface_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onphysicalinterface_identifyChanged()
    End Sub
    Partial Private Sub Onvlan_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvlan_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PhysicalInterface = CType(Nothing, EntityRef(Of PhysicalInterface))
		Me._VLAN = CType(Nothing, EntityRef(Of VLAN))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_physicalinterface_identify", DbType:="Int")>  _
	Public Property physicalinterface_identify() As System.Nullable(Of Integer)
		Get
			Return Me._physicalinterface_identify
		End Get
		Set
			If (Me._physicalinterface_identify.Equals(value) = false) Then
				If Me._PhysicalInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onphysicalinterface_identifyChanging(value)
				Me.SendPropertyChanging
				Me._physicalinterface_identify = value
				Me.SendPropertyChanged("physicalinterface_identify")
				Me.Onphysicalinterface_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vlan_identify", DbType:="Int")>  _
	Public Property vlan_identify() As System.Nullable(Of Integer)
		Get
			Return Me._vlan_identify
		End Get
		Set
			If (Me._vlan_identify.Equals(value) = false) Then
				If Me._VLAN.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvlan_identifyChanging(value)
				Me.SendPropertyChanging
				Me._vlan_identify = value
				Me.SendPropertyChanged("vlan_identify")
				Me.Onvlan_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalInterface_LnkPhysicalInterfaceToVLAN", Storage:="_PhysicalInterface", ThisKey:="physicalinterface_identify", IsForeignKey:=true)>  _
	Public Property PhysicalInterface() As PhysicalInterface
		Get
			Return Me._PhysicalInterface.Entity
		End Get
		Set
			Dim previousValue As PhysicalInterface = Me._PhysicalInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalInterface.Entity = Nothing
					previousValue.LnkPhysicalInterfaceToVLAN.Remove(Me)
				End If
				Me._PhysicalInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkPhysicalInterfaceToVLAN.Add(Me)
					Me._physicalinterface_identify = value.id
				Else
					Me._physicalinterface_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PhysicalInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkPhysicalInterfaceToVLAN", Storage:="_VLAN", ThisKey:="vlan_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property VLAN() As VLAN
		Get
			Return Me._VLAN.Entity
		End Get
		Set
			Dim previousValue As VLAN = Me._VLAN.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VLAN.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VLAN.Entity = Nothing
					previousValue.LnkPhysicalInterfaceToVLAN.Remove(Me)
				End If
				Me._VLAN.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkPhysicalInterfaceToVLAN.Add(Me)
					Me._vlan_identify = value._Identify
				Else
					Me._vlan_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VLAN")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkServerToVolume")>  _
Partial Public Class LnkServerToVolume
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _volume_identify As System.Nullable(Of Integer)
	
	Private _server_identify As System.Nullable(Of Integer)
	
	Private _size_used As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LogicalVolume As EntityRef(Of LogicalVolume)
	
	Private _Server As EntityRef(Of Server)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onvolume_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvolume_identifyChanged()
    End Sub
    Partial Private Sub Onserver_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onserver_identifyChanged()
    End Sub
    Partial Private Sub Onsize_usedChanging(value As Integer)
    End Sub
    Partial Private Sub Onsize_usedChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogicalVolume = CType(Nothing, EntityRef(Of LogicalVolume))
		Me._Server = CType(Nothing, EntityRef(Of Server))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_volume_identify", DbType:="Int")>  _
	Public Property volume_identify() As System.Nullable(Of Integer)
		Get
			Return Me._volume_identify
		End Get
		Set
			If (Me._volume_identify.Equals(value) = false) Then
				If Me._LogicalVolume.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvolume_identifyChanging(value)
				Me.SendPropertyChanging
				Me._volume_identify = value
				Me.SendPropertyChanged("volume_identify")
				Me.Onvolume_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_server_identify", DbType:="Int")>  _
	Public Property server_identify() As System.Nullable(Of Integer)
		Get
			Return Me._server_identify
		End Get
		Set
			If (Me._server_identify.Equals(value) = false) Then
				If Me._Server.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onserver_identifyChanging(value)
				Me.SendPropertyChanging
				Me._server_identify = value
				Me.SendPropertyChanged("server_identify")
				Me.Onserver_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_size_used", DbType:="Int NOT NULL")>  _
	Public Property size_used() As Integer
		Get
			Return Me._size_used
		End Get
		Set
			If ((Me._size_used = value)  _
						= false) Then
				Me.Onsize_usedChanging(value)
				Me.SendPropertyChanging
				Me._size_used = value
				Me.SendPropertyChanged("size_used")
				Me.Onsize_usedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="LogicalVolume_LnkServerToVolume", Storage:="_LogicalVolume", ThisKey:="volume_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property LogicalVolume() As LogicalVolume
		Get
			Return Me._LogicalVolume.Entity
		End Get
		Set
			Dim previousValue As LogicalVolume = Me._LogicalVolume.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LogicalVolume.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LogicalVolume.Entity = Nothing
					previousValue.LnkServerToVolume.Remove(Me)
				End If
				Me._LogicalVolume.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkServerToVolume.Add(Me)
					Me._volume_identify = value._Identify
				Else
					Me._volume_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LogicalVolume")
			End If
		End Set
	End Property
	
	<Association(Name:="Server_LnkServerToVolume", Storage:="_Server", ThisKey:="server_identify", IsForeignKey:=true)>  _
	Public Property Server() As Server
		Get
			Return Me._Server.Entity
		End Get
		Set
			Dim previousValue As Server = Me._Server.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Server.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Server.Entity = Nothing
					previousValue.LnkServerToVolume.Remove(Me)
				End If
				Me._Server.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkServerToVolume.Add(Me)
					Me._server_identify = value.id
				Else
					Me._server_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Server")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkSubnetToVLAN")>  _
Partial Public Class LnkSubnetToVLAN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _subnet_identify As System.Nullable(Of Integer)
	
	Private _vlan_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPSubnet As EntityRef(Of IPSubnet)
	
	Private _VLAN As EntityRef(Of VLAN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onsubnet_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsubnet_identifyChanged()
    End Sub
    Partial Private Sub Onvlan_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvlan_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPSubnet = CType(Nothing, EntityRef(Of IPSubnet))
		Me._VLAN = CType(Nothing, EntityRef(Of VLAN))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_subnet_identify", DbType:="Int")>  _
	Public Property subnet_identify() As System.Nullable(Of Integer)
		Get
			Return Me._subnet_identify
		End Get
		Set
			If (Me._subnet_identify.Equals(value) = false) Then
				If Me._IPSubnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsubnet_identifyChanging(value)
				Me.SendPropertyChanging
				Me._subnet_identify = value
				Me.SendPropertyChanged("subnet_identify")
				Me.Onsubnet_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vlan_identify", DbType:="Int")>  _
	Public Property vlan_identify() As System.Nullable(Of Integer)
		Get
			Return Me._vlan_identify
		End Get
		Set
			If (Me._vlan_identify.Equals(value) = false) Then
				If Me._VLAN.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvlan_identifyChanging(value)
				Me.SendPropertyChanging
				Me._vlan_identify = value
				Me.SendPropertyChanged("vlan_identify")
				Me.Onvlan_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPSubnet_LnkSubnetToVLAN", Storage:="_IPSubnet", ThisKey:="subnet_identify", IsForeignKey:=true)>  _
	Public Property IPSubnet() As IPSubnet
		Get
			Return Me._IPSubnet.Entity
		End Get
		Set
			Dim previousValue As IPSubnet = Me._IPSubnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPSubnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPSubnet.Entity = Nothing
					previousValue.LnkSubnetToVLAN.Remove(Me)
				End If
				Me._IPSubnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkSubnetToVLAN.Add(Me)
					Me._subnet_identify = value.id
				Else
					Me._subnet_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPSubnet")
			End If
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkSubnetToVLAN", Storage:="_VLAN", ThisKey:="vlan_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property VLAN() As VLAN
		Get
			Return Me._VLAN.Entity
		End Get
		Set
			Dim previousValue As VLAN = Me._VLAN.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VLAN.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VLAN.Entity = Nothing
					previousValue.LnkSubnetToVLAN.Remove(Me)
				End If
				Me._VLAN.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkSubnetToVLAN.Add(Me)
					Me._vlan_identify = value._Identify
				Else
					Me._vlan_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VLAN")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LnkVirtualDeviceToVolume")>  _
Partial Public Class LnkVirtualDeviceToVolume
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _volume_identify As System.Nullable(Of Integer)
	
	Private _virtualdevice_identify As System.Nullable(Of Integer)
	
	Private _size_used As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LogicalVolume As EntityRef(Of LogicalVolume)
	
	Private _VirtualDevice As EntityRef(Of VirtualDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onvolume_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvolume_identifyChanged()
    End Sub
    Partial Private Sub Onvirtualdevice_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvirtualdevice_identifyChanged()
    End Sub
    Partial Private Sub Onsize_usedChanging(value As Integer)
    End Sub
    Partial Private Sub Onsize_usedChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogicalVolume = CType(Nothing, EntityRef(Of LogicalVolume))
		Me._VirtualDevice = CType(Nothing, EntityRef(Of VirtualDevice))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_volume_identify", DbType:="Int")>  _
	Public Property volume_identify() As System.Nullable(Of Integer)
		Get
			Return Me._volume_identify
		End Get
		Set
			If (Me._volume_identify.Equals(value) = false) Then
				If Me._LogicalVolume.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvolume_identifyChanging(value)
				Me.SendPropertyChanging
				Me._volume_identify = value
				Me.SendPropertyChanged("volume_identify")
				Me.Onvolume_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_virtualdevice_identify", DbType:="Int")>  _
	Public Property virtualdevice_identify() As System.Nullable(Of Integer)
		Get
			Return Me._virtualdevice_identify
		End Get
		Set
			If (Me._virtualdevice_identify.Equals(value) = false) Then
				If Me._VirtualDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onvirtualdevice_identifyChanging(value)
				Me.SendPropertyChanging
				Me._virtualdevice_identify = value
				Me.SendPropertyChanged("virtualdevice_identify")
				Me.Onvirtualdevice_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_size_used", DbType:="Int NOT NULL")>  _
	Public Property size_used() As Integer
		Get
			Return Me._size_used
		End Get
		Set
			If ((Me._size_used = value)  _
						= false) Then
				Me.Onsize_usedChanging(value)
				Me.SendPropertyChanging
				Me._size_used = value
				Me.SendPropertyChanged("size_used")
				Me.Onsize_usedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="LogicalVolume_LnkVirtualDeviceToVolume", Storage:="_LogicalVolume", ThisKey:="volume_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property LogicalVolume() As LogicalVolume
		Get
			Return Me._LogicalVolume.Entity
		End Get
		Set
			Dim previousValue As LogicalVolume = Me._LogicalVolume.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LogicalVolume.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LogicalVolume.Entity = Nothing
					previousValue.LnkVirtualDeviceToVolume.Remove(Me)
				End If
				Me._LogicalVolume.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkVirtualDeviceToVolume.Add(Me)
					Me._volume_identify = value._Identify
				Else
					Me._volume_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LogicalVolume")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_LnkVirtualDeviceToVolume", Storage:="_VirtualDevice", ThisKey:="virtualdevice_identify", IsForeignKey:=true)>  _
	Public Property VirtualDevice() As VirtualDevice
		Get
			Return Me._VirtualDevice.Entity
		End Get
		Set
			Dim previousValue As VirtualDevice = Me._VirtualDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualDevice.Entity = Nothing
					previousValue.LnkVirtualDeviceToVolume.Remove(Me)
				End If
				Me._VirtualDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LnkVirtualDeviceToVolume.Add(Me)
					Me._virtualdevice_identify = value.id
				Else
					Me._virtualdevice_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VirtualDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Location")>  _
Partial Public Class Location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _organization_identify As Integer
	
	Private _name As String
	
	Private _status As System.Nullable(Of Boolean)
	
	Private _city As String
	
	Private _country As String
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _Contact As EntitySet(Of Contact)
	
	Private _LnkIPSubnetToLocation As EntitySet(Of LnkIPSubnetToLocation)
	
	Private _PhysicalDevice As EntitySet(Of PhysicalDevice)
	
	Private _WANLink As EntitySet(Of WANLink)
	
	Private _WANLink1 As EntitySet(Of WANLink)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OncountryChanging(value As String)
    End Sub
    Partial Private Sub OncountryChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contact = New EntitySet(Of Contact)(AddressOf Me.attach_Contact, AddressOf Me.detach_Contact)
		Me._LnkIPSubnetToLocation = New EntitySet(Of LnkIPSubnetToLocation)(AddressOf Me.attach_LnkIPSubnetToLocation, AddressOf Me.detach_LnkIPSubnetToLocation)
		Me._PhysicalDevice = New EntitySet(Of PhysicalDevice)(AddressOf Me.attach_PhysicalDevice, AddressOf Me.detach_PhysicalDevice)
		Me._WANLink = New EntitySet(Of WANLink)(AddressOf Me.attach_WANLink, AddressOf Me.detach_WANLink)
		Me._WANLink1 = New EntitySet(Of WANLink)(AddressOf Me.attach_WANLink1, AddressOf Me.detach_WANLink1)
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int NOT NULL")>  _
	Public Property organization_identify() As Integer
		Get
			Return Me._organization_identify
		End Get
		Set
			If ((Me._organization_identify = value)  _
						= false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_status", DbType:="Bit")>  _
	Public Property status() As System.Nullable(Of Boolean)
		Get
			Return Me._status
		End Get
		Set
			If (Me._status.Equals(value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_city", DbType:="NVarChar(16)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_country", DbType:="NVarChar(16)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me.OncountryChanging(value)
				Me.SendPropertyChanging
				Me._country = value
				Me.SendPropertyChanged("country")
				Me.OncountryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Location_Contact", Storage:="_Contact", ThisKey:="_Identify", OtherKey:="location_identify")>  _
	Public Property Contact() As EntitySet(Of Contact)
		Get
			Return Me._Contact
		End Get
		Set
			Me._Contact.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Location_LnkIPSubnetToLocation", Storage:="_LnkIPSubnetToLocation", ThisKey:="_Identify", OtherKey:="location_identify")>  _
	Public Property LnkIPSubnetToLocation() As EntitySet(Of LnkIPSubnetToLocation)
		Get
			Return Me._LnkIPSubnetToLocation
		End Get
		Set
			Me._LnkIPSubnetToLocation.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Location_PhysicalDevice", Storage:="_PhysicalDevice", ThisKey:="_Identify", OtherKey:="location_identify")>  _
	Public Property PhysicalDevice() As EntitySet(Of PhysicalDevice)
		Get
			Return Me._PhysicalDevice
		End Get
		Set
			Me._PhysicalDevice.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Location_WANLink", Storage:="_WANLink", ThisKey:="_Identify", OtherKey:="location_identify1")>  _
	Public Property WANLink() As EntitySet(Of WANLink)
		Get
			Return Me._WANLink
		End Get
		Set
			Me._WANLink.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Location_WANLink1", Storage:="_WANLink1", ThisKey:="_Identify", OtherKey:="location_identify2")>  _
	Public Property WANLink1() As EntitySet(Of WANLink)
		Get
			Return Me._WANLink1
		End Get
		Set
			Me._WANLink1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Location", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.Location.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Location.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Contact(ByVal entity As Contact)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_Contact(ByVal entity As Contact)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_LnkIPSubnetToLocation(ByVal entity As LnkIPSubnetToLocation)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_LnkIPSubnetToLocation(ByVal entity As LnkIPSubnetToLocation)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_PhysicalDevice(ByVal entity As PhysicalDevice)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_PhysicalDevice(ByVal entity As PhysicalDevice)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_WANLink(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_WANLink(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_WANLink1(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.Location1 = Me
	End Sub
	
	Private Sub detach_WANLink1(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.Location1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.LogicalInterface")>  _
Partial Public Class LogicalInterface
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _virtualmachine_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _IPInterface As EntityRef(Of IPInterface)
	
	Private _VirtualMachine As EntityRef(Of VirtualMachine)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onvirtualmachine_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvirtualmachine_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IPInterface = CType(Nothing, EntityRef(Of IPInterface))
		Me._VirtualMachine = CType(Nothing, EntityRef(Of VirtualMachine))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._IPInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_virtualmachine_identify", DbType:="Int")>  _
	Public Property virtualmachine_identify() As System.Nullable(Of Integer)
		Get
			Return Me._virtualmachine_identify
		End Get
		Set
			If (Me._virtualmachine_identify.Equals(value) = false) Then
				Me.Onvirtualmachine_identifyChanging(value)
				Me.SendPropertyChanging
				Me._virtualmachine_identify = value
				Me.SendPropertyChanged("virtualmachine_identify")
				Me.Onvirtualmachine_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="IPInterface_LogicalInterface", Storage:="_IPInterface", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property IPInterface() As IPInterface
		Get
			Return Me._IPInterface.Entity
		End Get
		Set
			Dim previousValue As IPInterface = Me._IPInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPInterface.Entity = Nothing
					previousValue.LogicalInterface = Nothing
				End If
				Me._IPInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogicalInterface = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualMachine_LogicalInterface", Storage:="_VirtualMachine", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property VirtualMachine() As VirtualMachine
		Get
			Return Me._VirtualMachine.Entity
		End Get
		Set
			Dim previousValue As VirtualMachine = Me._VirtualMachine.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualMachine.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualMachine.Entity = Nothing
					previousValue.LogicalInterface = Nothing
				End If
				Me._VirtualMachine.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogicalInterface = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VirtualMachine")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LogicalVolume")>  _
Partial Public Class LogicalVolume
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _lun_id As String
	
	Private _description As String
	
	Private _raid_level As String
	
	Private _size As String
	
	Private _storagesystem_identify As System.Nullable(Of Integer)
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _LnkServerToVolume As EntitySet(Of LnkServerToVolume)
	
	Private _LnkVirtualDeviceToVolume As EntitySet(Of LnkVirtualDeviceToVolume)
	
	Private _StorageSystem As EntityRef(Of StorageSystem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onlun_idChanging(value As String)
    End Sub
    Partial Private Sub Onlun_idChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onraid_levelChanging(value As String)
    End Sub
    Partial Private Sub Onraid_levelChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As String)
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    Partial Private Sub Onstoragesystem_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onstoragesystem_identifyChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkServerToVolume = New EntitySet(Of LnkServerToVolume)(AddressOf Me.attach_LnkServerToVolume, AddressOf Me.detach_LnkServerToVolume)
		Me._LnkVirtualDeviceToVolume = New EntitySet(Of LnkVirtualDeviceToVolume)(AddressOf Me.attach_LnkVirtualDeviceToVolume, AddressOf Me.detach_LnkVirtualDeviceToVolume)
		Me._StorageSystem = CType(Nothing, EntityRef(Of StorageSystem))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lun_id", DbType:="VarChar(50)")>  _
	Public Property lun_id() As String
		Get
			Return Me._lun_id
		End Get
		Set
			If (String.Equals(Me._lun_id, value) = false) Then
				Me.Onlun_idChanging(value)
				Me.SendPropertyChanging
				Me._lun_id = value
				Me.SendPropertyChanged("lun_id")
				Me.Onlun_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_raid_level", DbType:="VarChar(50)")>  _
	Public Property raid_level() As String
		Get
			Return Me._raid_level
		End Get
		Set
			If (String.Equals(Me._raid_level, value) = false) Then
				Me.Onraid_levelChanging(value)
				Me.SendPropertyChanging
				Me._raid_level = value
				Me.SendPropertyChanged("raid_level")
				Me.Onraid_levelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_size", DbType:="VarChar(50)")>  _
	Public Property size() As String
		Get
			Return Me._size
		End Get
		Set
			If (String.Equals(Me._size, value) = false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_storagesystem_identify", DbType:="Int")>  _
	Public Property storagesystem_identify() As System.Nullable(Of Integer)
		Get
			Return Me._storagesystem_identify
		End Get
		Set
			If (Me._storagesystem_identify.Equals(value) = false) Then
				If Me._StorageSystem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onstoragesystem_identifyChanging(value)
				Me.SendPropertyChanging
				Me._storagesystem_identify = value
				Me.SendPropertyChanged("storagesystem_identify")
				Me.Onstoragesystem_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="LogicalVolume_LnkServerToVolume", Storage:="_LnkServerToVolume", ThisKey:="_Identify", OtherKey:="volume_identify")>  _
	Public Property LnkServerToVolume() As EntitySet(Of LnkServerToVolume)
		Get
			Return Me._LnkServerToVolume
		End Get
		Set
			Me._LnkServerToVolume.Assign(value)
		End Set
	End Property
	
	<Association(Name:="LogicalVolume_LnkVirtualDeviceToVolume", Storage:="_LnkVirtualDeviceToVolume", ThisKey:="_Identify", OtherKey:="volume_identify")>  _
	Public Property LnkVirtualDeviceToVolume() As EntitySet(Of LnkVirtualDeviceToVolume)
		Get
			Return Me._LnkVirtualDeviceToVolume
		End Get
		Set
			Me._LnkVirtualDeviceToVolume.Assign(value)
		End Set
	End Property
	
	<Association(Name:="StorageSystem_LogicalVolume", Storage:="_StorageSystem", ThisKey:="storagesystem_identify", IsForeignKey:=true)>  _
	Public Property StorageSystem() As StorageSystem
		Get
			Return Me._StorageSystem.Entity
		End Get
		Set
			Dim previousValue As StorageSystem = Me._StorageSystem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StorageSystem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StorageSystem.Entity = Nothing
					previousValue.LogicalVolume.Remove(Me)
				End If
				Me._StorageSystem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogicalVolume.Add(Me)
					Me._storagesystem_identify = value.id
				Else
					Me._storagesystem_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("StorageSystem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkServerToVolume(ByVal entity As LnkServerToVolume)
		Me.SendPropertyChanging
		entity.LogicalVolume = Me
	End Sub
	
	Private Sub detach_LnkServerToVolume(ByVal entity As LnkServerToVolume)
		Me.SendPropertyChanging
		entity.LogicalVolume = Nothing
	End Sub
	
	Private Sub attach_LnkVirtualDeviceToVolume(ByVal entity As LnkVirtualDeviceToVolume)
		Me.SendPropertyChanging
		entity.LogicalVolume = Me
	End Sub
	
	Private Sub detach_LnkVirtualDeviceToVolume(ByVal entity As LnkVirtualDeviceToVolume)
		Me.SendPropertyChanging
		entity.LogicalVolume = Nothing
	End Sub
End Class

<Table(Name:="dbo.Logs")>  _
Partial Public Class Logs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private __Locked As System.Nullable(Of Boolean)
	
	Private __SortKey As System.Nullable(Of Decimal)
	
	Private _time As System.Nullable(Of Date)
	
	Private _user As String
	
	Private _table As String
	
	Private _column As String
	
	Private _rowid As System.Nullable(Of Integer)
	
	Private _content As String
	
	Private _orginal_content As String
	
	Private __IsDeleted As Boolean
	
	Private __CreatedOn As System.Nullable(Of Date)
	
	Private __CreatedBy As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub On_LockedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub On_LockedChanged()
    End Sub
    Partial Private Sub On_SortKeyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub On_SortKeyChanged()
    End Sub
    Partial Private Sub OntimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimeChanged()
    End Sub
    Partial Private Sub OnuserChanging(value As String)
    End Sub
    Partial Private Sub OnuserChanged()
    End Sub
    Partial Private Sub OntableChanging(value As String)
    End Sub
    Partial Private Sub OntableChanged()
    End Sub
    Partial Private Sub OncolumnChanging(value As String)
    End Sub
    Partial Private Sub OncolumnChanged()
    End Sub
    Partial Private Sub OnrowidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrowidChanged()
    End Sub
    Partial Private Sub OncontentChanging(value As String)
    End Sub
    Partial Private Sub OncontentChanged()
    End Sub
    Partial Private Sub Onorginal_contentChanging(value As String)
    End Sub
    Partial Private Sub Onorginal_contentChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    Partial Private Sub On_CreatedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub On_CreatedOnChanged()
    End Sub
    Partial Private Sub On_CreatedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_CreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_Locked]", Storage:="__Locked", DbType:="Bit")>  _
	Public Property _Locked() As System.Nullable(Of Boolean)
		Get
			Return Me.__Locked
		End Get
		Set
			If (Me.__Locked.Equals(value) = false) Then
				Me.On_LockedChanging(value)
				Me.SendPropertyChanging
				Me.__Locked = value
				Me.SendPropertyChanged("_Locked")
				Me.On_LockedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_SortKey]", Storage:="__SortKey", DbType:="Decimal(28,0)")>  _
	Public Property _SortKey() As System.Nullable(Of Decimal)
		Get
			Return Me.__SortKey
		End Get
		Set
			If (Me.__SortKey.Equals(value) = false) Then
				Me.On_SortKeyChanging(value)
				Me.SendPropertyChanging
				Me.__SortKey = value
				Me.SendPropertyChanged("_SortKey")
				Me.On_SortKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_time", DbType:="DateTime")>  _
	Public Property time() As System.Nullable(Of Date)
		Get
			Return Me._time
		End Get
		Set
			If (Me._time.Equals(value) = false) Then
				Me.OntimeChanging(value)
				Me.SendPropertyChanging
				Me._time = value
				Me.SendPropertyChanged("time")
				Me.OntimeChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[user]", Storage:="_user", DbType:="NVarChar(20)")>  _
	Public Property user() As String
		Get
			Return Me._user
		End Get
		Set
			If (String.Equals(Me._user, value) = false) Then
				Me.OnuserChanging(value)
				Me.SendPropertyChanging
				Me._user = value
				Me.SendPropertyChanged("user")
				Me.OnuserChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[table]", Storage:="_table", DbType:="NVarChar(20)")>  _
	Public Property table() As String
		Get
			Return Me._table
		End Get
		Set
			If (String.Equals(Me._table, value) = false) Then
				Me.OntableChanging(value)
				Me.SendPropertyChanging
				Me._table = value
				Me.SendPropertyChanged("table")
				Me.OntableChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[column]", Storage:="_column", DbType:="NVarChar(20)")>  _
	Public Property column() As String
		Get
			Return Me._column
		End Get
		Set
			If (String.Equals(Me._column, value) = false) Then
				Me.OncolumnChanging(value)
				Me.SendPropertyChanging
				Me._column = value
				Me.SendPropertyChanged("column")
				Me.OncolumnChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowid", DbType:="Int")>  _
	Public Property rowid() As System.Nullable(Of Integer)
		Get
			Return Me._rowid
		End Get
		Set
			If (Me._rowid.Equals(value) = false) Then
				Me.OnrowidChanging(value)
				Me.SendPropertyChanging
				Me._rowid = value
				Me.SendPropertyChanged("rowid")
				Me.OnrowidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_content", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property content() As String
		Get
			Return Me._content
		End Get
		Set
			If (String.Equals(Me._content, value) = false) Then
				Me.OncontentChanging(value)
				Me.SendPropertyChanging
				Me._content = value
				Me.SendPropertyChanged("content")
				Me.OncontentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orginal_content", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property orginal_content() As String
		Get
			Return Me._orginal_content
		End Get
		Set
			If (String.Equals(Me._orginal_content, value) = false) Then
				Me.Onorginal_contentChanging(value)
				Me.SendPropertyChanging
				Me._orginal_content = value
				Me.SendPropertyChanged("orginal_content")
				Me.Onorginal_contentChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedOn]", Storage:="__CreatedOn", DbType:="DateTime")>  _
	Public Property _CreatedOn() As System.Nullable(Of Date)
		Get
			Return Me.__CreatedOn
		End Get
		Set
			If (Me.__CreatedOn.Equals(value) = false) Then
				Me.On_CreatedOnChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedOn = value
				Me.SendPropertyChanged("_CreatedOn")
				Me.On_CreatedOnChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedBy]", Storage:="__CreatedBy", DbType:="Int")>  _
	Public Property _CreatedBy() As System.Nullable(Of Integer)
		Get
			Return Me.__CreatedBy
		End Get
		Set
			If (Me.__CreatedBy.Equals(value) = false) Then
				Me.On_CreatedByChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedBy = value
				Me.SendPropertyChanged("_CreatedBy")
				Me.On_CreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Messages")>  _
Partial Public Class Messages
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private __Locked As System.Nullable(Of Boolean)
	
	Private __SortKey As System.Nullable(Of Decimal)
	
	Private _ts_msg As System.Nullable(Of Date)
	
	Private _sender As String
	
	Private _contents As String
	
	Private __IsDeleted As Boolean
	
	Private __CreatedOn As System.Nullable(Of Date)
	
	Private __CreatedBy As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub On_LockedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub On_LockedChanged()
    End Sub
    Partial Private Sub On_SortKeyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub On_SortKeyChanged()
    End Sub
    Partial Private Sub Onts_msgChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onts_msgChanged()
    End Sub
    Partial Private Sub OnsenderChanging(value As String)
    End Sub
    Partial Private Sub OnsenderChanged()
    End Sub
    Partial Private Sub OncontentsChanging(value As String)
    End Sub
    Partial Private Sub OncontentsChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    Partial Private Sub On_CreatedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub On_CreatedOnChanged()
    End Sub
    Partial Private Sub On_CreatedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_CreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_Locked]", Storage:="__Locked", DbType:="Bit")>  _
	Public Property _Locked() As System.Nullable(Of Boolean)
		Get
			Return Me.__Locked
		End Get
		Set
			If (Me.__Locked.Equals(value) = false) Then
				Me.On_LockedChanging(value)
				Me.SendPropertyChanging
				Me.__Locked = value
				Me.SendPropertyChanged("_Locked")
				Me.On_LockedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_SortKey]", Storage:="__SortKey", DbType:="Decimal(28,14)")>  _
	Public Property _SortKey() As System.Nullable(Of Decimal)
		Get
			Return Me.__SortKey
		End Get
		Set
			If (Me.__SortKey.Equals(value) = false) Then
				Me.On_SortKeyChanging(value)
				Me.SendPropertyChanging
				Me.__SortKey = value
				Me.SendPropertyChanged("_SortKey")
				Me.On_SortKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ts_msg", DbType:="DateTime")>  _
	Public Property ts_msg() As System.Nullable(Of Date)
		Get
			Return Me._ts_msg
		End Get
		Set
			If (Me._ts_msg.Equals(value) = false) Then
				Me.Onts_msgChanging(value)
				Me.SendPropertyChanging
				Me._ts_msg = value
				Me.SendPropertyChanged("ts_msg")
				Me.Onts_msgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sender", DbType:="NVarChar(50)")>  _
	Public Property sender() As String
		Get
			Return Me._sender
		End Get
		Set
			If (String.Equals(Me._sender, value) = false) Then
				Me.OnsenderChanging(value)
				Me.SendPropertyChanging
				Me._sender = value
				Me.SendPropertyChanged("sender")
				Me.OnsenderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contents", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property contents() As String
		Get
			Return Me._contents
		End Get
		Set
			If (String.Equals(Me._contents, value) = false) Then
				Me.OncontentsChanging(value)
				Me.SendPropertyChanging
				Me._contents = value
				Me.SendPropertyChanged("contents")
				Me.OncontentsChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedOn]", Storage:="__CreatedOn", DbType:="DateTime")>  _
	Public Property _CreatedOn() As System.Nullable(Of Date)
		Get
			Return Me.__CreatedOn
		End Get
		Set
			If (Me.__CreatedOn.Equals(value) = false) Then
				Me.On_CreatedOnChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedOn = value
				Me.SendPropertyChanged("_CreatedOn")
				Me.On_CreatedOnChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedBy]", Storage:="__CreatedBy", DbType:="Int")>  _
	Public Property _CreatedBy() As System.Nullable(Of Integer)
		Get
			Return Me.__CreatedBy
		End Get
		Set
			If (Me.__CreatedBy.Equals(value) = false) Then
				Me.On_CreatedByChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedBy = value
				Me.SendPropertyChanged("_CreatedBy")
				Me.On_CreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Middleware")>  _
Partial Public Class Middleware
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _MiddlewareInstance As EntitySet(Of MiddlewareInstance)
	
	Private _SoftwareInstance As EntityRef(Of SoftwareInstance)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MiddlewareInstance = New EntitySet(Of MiddlewareInstance)(AddressOf Me.attach_MiddlewareInstance, AddressOf Me.detach_MiddlewareInstance)
		Me._SoftwareInstance = CType(Nothing, EntityRef(Of SoftwareInstance))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._SoftwareInstance.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Middleware_MiddlewareInstance", Storage:="_MiddlewareInstance", OtherKey:="middleware_identify")>  _
	Public Property MiddlewareInstance() As EntitySet(Of MiddlewareInstance)
		Get
			Return Me._MiddlewareInstance
		End Get
		Set
			Me._MiddlewareInstance.Assign(value)
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_Middleware", Storage:="_SoftwareInstance", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property SoftwareInstance() As SoftwareInstance
		Get
			Return Me._SoftwareInstance.Entity
		End Get
		Set
			Dim previousValue As SoftwareInstance = Me._SoftwareInstance.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SoftwareInstance.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SoftwareInstance.Entity = Nothing
					previousValue.Middleware = Nothing
				End If
				Me._SoftwareInstance.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Middleware = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SoftwareInstance")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MiddlewareInstance(ByVal entity As MiddlewareInstance)
		Me.SendPropertyChanging
		entity.Middleware = Me
	End Sub
	
	Private Sub detach_MiddlewareInstance(ByVal entity As MiddlewareInstance)
		Me.SendPropertyChanging
		entity.Middleware = Nothing
	End Sub
End Class

<Table(Name:="dbo.MiddlewareInstance")>  _
Partial Public Class MiddlewareInstance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _middleware_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Middleware As EntityRef(Of Middleware)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onmiddleware_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onmiddleware_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Middleware = CType(Nothing, EntityRef(Of Middleware))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_middleware_identify", DbType:="Int NOT NULL")>  _
	Public Property middleware_identify() As Integer
		Get
			Return Me._middleware_identify
		End Get
		Set
			If ((Me._middleware_identify = value)  _
						= false) Then
				If Me._Middleware.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onmiddleware_identifyChanging(value)
				Me.SendPropertyChanging
				Me._middleware_identify = value
				Me.SendPropertyChanged("middleware_identify")
				Me.Onmiddleware_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_MiddlewareInstance", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.MiddlewareInstance = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MiddlewareInstance = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Middleware_MiddlewareInstance", Storage:="_Middleware", ThisKey:="middleware_identify", IsForeignKey:=true)>  _
	Public Property Middleware() As Middleware
		Get
			Return Me._Middleware.Entity
		End Get
		Set
			Dim previousValue As Middleware = Me._Middleware.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Middleware.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Middleware.Entity = Nothing
					previousValue.MiddlewareInstance.Remove(Me)
				End If
				Me._Middleware.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MiddlewareInstance.Add(Me)
					Me._middleware_identify = value.id
				Else
					Me._middleware_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Middleware")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.NAS")>  _
Partial Public Class NAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_NAS", Storage:="_DataCenterDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.NAS = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NAS = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.NetworkDevice")>  _
Partial Public Class NetworkDevice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_networkdevicetype As System.Nullable(Of Integer)
	
	Private _code_isoversion As System.Nullable(Of Integer)
	
	Private _ram As String
	
	Private __IsDeleted As Boolean
	
	Private _LnkConnectableCIToNetworkDevice As EntitySet(Of LnkConnectableCIToNetworkDevice)
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_networkdevicetypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_networkdevicetypeChanged()
    End Sub
    Partial Private Sub Oncode_isoversionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_isoversionChanged()
    End Sub
    Partial Private Sub OnramChanging(value As String)
    End Sub
    Partial Private Sub OnramChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkConnectableCIToNetworkDevice = New EntitySet(Of LnkConnectableCIToNetworkDevice)(AddressOf Me.attach_LnkConnectableCIToNetworkDevice, AddressOf Me.detach_LnkConnectableCIToNetworkDevice)
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_networkdevicetype", DbType:="Int")>  _
	Public Property code_networkdevicetype() As System.Nullable(Of Integer)
		Get
			Return Me._code_networkdevicetype
		End Get
		Set
			If (Me._code_networkdevicetype.Equals(value) = false) Then
				Me.Oncode_networkdevicetypeChanging(value)
				Me.SendPropertyChanging
				Me._code_networkdevicetype = value
				Me.SendPropertyChanged("code_networkdevicetype")
				Me.Oncode_networkdevicetypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_isoversion", DbType:="Int")>  _
	Public Property code_isoversion() As System.Nullable(Of Integer)
		Get
			Return Me._code_isoversion
		End Get
		Set
			If (Me._code_isoversion.Equals(value) = false) Then
				Me.Oncode_isoversionChanging(value)
				Me.SendPropertyChanging
				Me._code_isoversion = value
				Me.SendPropertyChanged("code_isoversion")
				Me.Oncode_isoversionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ram", DbType:="VarChar(50)")>  _
	Public Property ram() As String
		Get
			Return Me._ram
		End Get
		Set
			If (String.Equals(Me._ram, value) = false) Then
				Me.OnramChanging(value)
				Me.SendPropertyChanging
				Me._ram = value
				Me.SendPropertyChanged("ram")
				Me.OnramChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkDevice_LnkConnectableCIToNetworkDevice", Storage:="_LnkConnectableCIToNetworkDevice", OtherKey:="networkdevice_identify")>  _
	Public Property LnkConnectableCIToNetworkDevice() As EntitySet(Of LnkConnectableCIToNetworkDevice)
		Get
			Return Me._LnkConnectableCIToNetworkDevice
		End Get
		Set
			Me._LnkConnectableCIToNetworkDevice.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_NetworkDevice", Storage:="_DataCenterDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.NetworkDevice = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NetworkDevice = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkConnectableCIToNetworkDevice(ByVal entity As LnkConnectableCIToNetworkDevice)
		Me.SendPropertyChanging
		entity.NetworkDevice = Me
	End Sub
	
	Private Sub detach_LnkConnectableCIToNetworkDevice(ByVal entity As LnkConnectableCIToNetworkDevice)
		Me.SendPropertyChanging
		entity.NetworkDevice = Nothing
	End Sub
End Class

<Table(Name:="dbo.NetworkInterface")>  _
Partial Public Class NetworkInterface
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _finalclass As String
	
	Private _obsolescence_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _FiberChannelInterface As EntityRef(Of FiberChannelInterface)
	
	Private _IPInterface As EntityRef(Of IPInterface)
	
	Private _WANLink As EntitySet(Of WANLink)
	
	Private _WANLink1 As EntitySet(Of WANLink)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub Onobsolescence_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onobsolescence_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FiberChannelInterface = CType(Nothing, EntityRef(Of FiberChannelInterface))
		Me._IPInterface = CType(Nothing, EntityRef(Of IPInterface))
		Me._WANLink = New EntitySet(Of WANLink)(AddressOf Me.attach_WANLink, AddressOf Me.detach_WANLink)
		Me._WANLink1 = New EntitySet(Of WANLink)(AddressOf Me.attach_WANLink1, AddressOf Me.detach_WANLink1)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_obsolescence_date", DbType:="DateTime")>  _
	Public Property obsolescence_date() As System.Nullable(Of Date)
		Get
			Return Me._obsolescence_date
		End Get
		Set
			If (Me._obsolescence_date.Equals(value) = false) Then
				Me.Onobsolescence_dateChanging(value)
				Me.SendPropertyChanging
				Me._obsolescence_date = value
				Me.SendPropertyChanged("obsolescence_date")
				Me.Onobsolescence_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_FiberChannelInterface", Storage:="_FiberChannelInterface", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property FiberChannelInterface() As FiberChannelInterface
		Get
			Return Me._FiberChannelInterface.Entity
		End Get
		Set
			Dim previousValue As FiberChannelInterface = Me._FiberChannelInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FiberChannelInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FiberChannelInterface.Entity = Nothing
					previousValue.NetworkInterface = Nothing
				End If
				Me._FiberChannelInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.NetworkInterface = Me
				End If
				Me.SendPropertyChanged("FiberChannelInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_IPInterface", Storage:="_IPInterface", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property IPInterface() As IPInterface
		Get
			Return Me._IPInterface.Entity
		End Get
		Set
			Dim previousValue As IPInterface = Me._IPInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPInterface.Entity = Nothing
					previousValue.NetworkInterface = Nothing
				End If
				Me._IPInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.NetworkInterface = Me
				End If
				Me.SendPropertyChanged("IPInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_WANLink", Storage:="_WANLink", ThisKey:="_Identify", OtherKey:="networkinterface_identify1")>  _
	Public Property WANLink() As EntitySet(Of WANLink)
		Get
			Return Me._WANLink
		End Get
		Set
			Me._WANLink.Assign(value)
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_WANLink1", Storage:="_WANLink1", ThisKey:="_Identify", OtherKey:="networkinterface_identify2")>  _
	Public Property WANLink1() As EntitySet(Of WANLink)
		Get
			Return Me._WANLink1
		End Get
		Set
			Me._WANLink1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WANLink(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.NetworkInterface = Me
	End Sub
	
	Private Sub detach_WANLink(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.NetworkInterface = Nothing
	End Sub
	
	Private Sub attach_WANLink1(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.NetworkInterface1 = Me
	End Sub
	
	Private Sub detach_WANLink1(ByVal entity As WANLink)
		Me.SendPropertyChanging
		entity.NetworkInterface1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.Organization")>  _
Partial Public Class Organization
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private __sort As System.Nullable(Of Decimal)
	
	Private _code As String
	
	Private _parent_code As String
	
	Private _name As String
	
	Private _status As Boolean
	
	Private _parent_identify As System.Nullable(Of Integer)
	
	Private _description As String
	
	Private _short_name As String
	
	Private _code_org_type As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _Contact As EntitySet(Of Contact)
	
	Private _Contract As EntitySet(Of Contract)
	
	Private _Contract1 As EntitySet(Of Contract)
	
	Private _DNSObject As EntitySet(Of DNSObject)
	
	Private _Domain As EntitySet(Of Domain)
	
	Private _IPObject As EntitySet(Of IPObject)
	
	Private _Licence As EntitySet(Of Licence)
	
	Private _LnkFunctionalCIToOrganization As EntitySet(Of LnkFunctionalCIToOrganization)
	
	Private _Location As EntitySet(Of Location)
	
	Private _VLAN As EntitySet(Of VLAN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub On_sortChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub On_sortChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub Onparent_codeChanging(value As String)
    End Sub
    Partial Private Sub Onparent_codeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onparent_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparent_identifyChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onshort_nameChanging(value As String)
    End Sub
    Partial Private Sub Onshort_nameChanged()
    End Sub
    Partial Private Sub Oncode_org_typeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_org_typeChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Contact = New EntitySet(Of Contact)(AddressOf Me.attach_Contact, AddressOf Me.detach_Contact)
		Me._Contract = New EntitySet(Of Contract)(AddressOf Me.attach_Contract, AddressOf Me.detach_Contract)
		Me._Contract1 = New EntitySet(Of Contract)(AddressOf Me.attach_Contract1, AddressOf Me.detach_Contract1)
		Me._DNSObject = New EntitySet(Of DNSObject)(AddressOf Me.attach_DNSObject, AddressOf Me.detach_DNSObject)
		Me._Domain = New EntitySet(Of Domain)(AddressOf Me.attach_Domain, AddressOf Me.detach_Domain)
		Me._IPObject = New EntitySet(Of IPObject)(AddressOf Me.attach_IPObject, AddressOf Me.detach_IPObject)
		Me._Licence = New EntitySet(Of Licence)(AddressOf Me.attach_Licence, AddressOf Me.detach_Licence)
		Me._LnkFunctionalCIToOrganization = New EntitySet(Of LnkFunctionalCIToOrganization)(AddressOf Me.attach_LnkFunctionalCIToOrganization, AddressOf Me.detach_LnkFunctionalCIToOrganization)
		Me._Location = New EntitySet(Of Location)(AddressOf Me.attach_Location, AddressOf Me.detach_Location)
		Me._VLAN = New EntitySet(Of VLAN)(AddressOf Me.attach_VLAN, AddressOf Me.detach_VLAN)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_sort]", Storage:="__sort", DbType:="Decimal(28,0)")>  _
	Public Property _sort() As System.Nullable(Of Decimal)
		Get
			Return Me.__sort
		End Get
		Set
			If (Me.__sort.Equals(value) = false) Then
				Me.On_sortChanging(value)
				Me.SendPropertyChanging
				Me.__sort = value
				Me.SendPropertyChanged("_sort")
				Me.On_sortChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="NVarChar(50)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_code", DbType:="NVarChar(50)")>  _
	Public Property parent_code() As String
		Get
			Return Me._parent_code
		End Get
		Set
			If (String.Equals(Me._parent_code, value) = false) Then
				Me.Onparent_codeChanging(value)
				Me.SendPropertyChanging
				Me._parent_code = value
				Me.SendPropertyChanged("parent_code")
				Me.Onparent_codeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_status", DbType:="Bit NOT NULL")>  _
	Public Property status() As Boolean
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parent_identify", DbType:="Int")>  _
	Public Property parent_identify() As System.Nullable(Of Integer)
		Get
			Return Me._parent_identify
		End Get
		Set
			If (Me._parent_identify.Equals(value) = false) Then
				Me.Onparent_identifyChanging(value)
				Me.SendPropertyChanging
				Me._parent_identify = value
				Me.SendPropertyChanged("parent_identify")
				Me.Onparent_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_short_name", DbType:="NVarChar(20)")>  _
	Public Property short_name() As String
		Get
			Return Me._short_name
		End Get
		Set
			If (String.Equals(Me._short_name, value) = false) Then
				Me.Onshort_nameChanging(value)
				Me.SendPropertyChanging
				Me._short_name = value
				Me.SendPropertyChanged("short_name")
				Me.Onshort_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_org_type", DbType:="Int")>  _
	Public Property code_org_type() As System.Nullable(Of Integer)
		Get
			Return Me._code_org_type
		End Get
		Set
			If (Me._code_org_type.Equals(value) = false) Then
				Me.Oncode_org_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_org_type = value
				Me.SendPropertyChanged("code_org_type")
				Me.Oncode_org_typeChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Organization_Contact", Storage:="_Contact", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property Contact() As EntitySet(Of Contact)
		Get
			Return Me._Contact
		End Get
		Set
			Me._Contact.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Contract", Storage:="_Contract", ThisKey:="_Identify", OtherKey:="buyer_identify")>  _
	Public Property Contract() As EntitySet(Of Contract)
		Get
			Return Me._Contract
		End Get
		Set
			Me._Contract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Contract1", Storage:="_Contract1", ThisKey:="_Identify", OtherKey:="seller_identify")>  _
	Public Property Contract1() As EntitySet(Of Contract)
		Get
			Return Me._Contract1
		End Get
		Set
			Me._Contract1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_DNSObject", Storage:="_DNSObject", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property DNSObject() As EntitySet(Of DNSObject)
		Get
			Return Me._DNSObject
		End Get
		Set
			Me._DNSObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Domain", Storage:="_Domain", ThisKey:="_Identify", OtherKey:="requestor_identify")>  _
	Public Property Domain() As EntitySet(Of Domain)
		Get
			Return Me._Domain
		End Get
		Set
			Me._Domain.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_IPObject", Storage:="_IPObject", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property IPObject() As EntitySet(Of IPObject)
		Get
			Return Me._IPObject
		End Get
		Set
			Me._IPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Licence", Storage:="_Licence", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property Licence() As EntitySet(Of Licence)
		Get
			Return Me._Licence
		End Get
		Set
			Me._Licence.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_LnkFunctionalCIToOrganization", Storage:="_LnkFunctionalCIToOrganization", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property LnkFunctionalCIToOrganization() As EntitySet(Of LnkFunctionalCIToOrganization)
		Get
			Return Me._LnkFunctionalCIToOrganization
		End Get
		Set
			Me._LnkFunctionalCIToOrganization.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_Location", Storage:="_Location", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property Location() As EntitySet(Of Location)
		Get
			Return Me._Location
		End Get
		Set
			Me._Location.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_VLAN", Storage:="_VLAN", ThisKey:="_Identify", OtherKey:="organization_identify")>  _
	Public Property VLAN() As EntitySet(Of VLAN)
		Get
			Return Me._VLAN
		End Get
		Set
			Me._VLAN.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Contact(ByVal entity As Contact)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_Contact(ByVal entity As Contact)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_Contract(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_Contract(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_Contract1(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Organization1 = Me
	End Sub
	
	Private Sub detach_Contract1(ByVal entity As Contract)
		Me.SendPropertyChanging
		entity.Organization1 = Nothing
	End Sub
	
	Private Sub attach_DNSObject(ByVal entity As DNSObject)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_DNSObject(ByVal entity As DNSObject)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_Domain(ByVal entity As Domain)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_Domain(ByVal entity As Domain)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_IPObject(ByVal entity As IPObject)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_IPObject(ByVal entity As IPObject)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_Licence(ByVal entity As Licence)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_Licence(ByVal entity As Licence)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_LnkFunctionalCIToOrganization(ByVal entity As LnkFunctionalCIToOrganization)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_LnkFunctionalCIToOrganization(ByVal entity As LnkFunctionalCIToOrganization)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_Location(ByVal entity As Location)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_Location(ByVal entity As Location)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
	
	Private Sub attach_VLAN(ByVal entity As VLAN)
		Me.SendPropertyChanging
		entity.Organization = Me
	End Sub
	
	Private Sub detach_VLAN(ByVal entity As VLAN)
		Me.SendPropertyChanging
		entity.Organization = Nothing
	End Sub
End Class

<Table(Name:="dbo.OSFamily")>  _
Partial Public Class OSFamily
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _OSVersion As EntitySet(Of OSVersion)
	
	Private _Server As EntitySet(Of Server)
	
	Private _Typology As EntityRef(Of Typology)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OSVersion = New EntitySet(Of OSVersion)(AddressOf Me.attach_OSVersion, AddressOf Me.detach_OSVersion)
		Me._Server = New EntitySet(Of Server)(AddressOf Me.attach_Server, AddressOf Me.detach_Server)
		Me._Typology = CType(Nothing, EntityRef(Of Typology))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Typology.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OSFamily_OSVersion", Storage:="_OSVersion", OtherKey:="osfamily_id")>  _
	Public Property OSVersion() As EntitySet(Of OSVersion)
		Get
			Return Me._OSVersion
		End Get
		Set
			Me._OSVersion.Assign(value)
		End Set
	End Property
	
	<Association(Name:="OSFamily_Server", Storage:="_Server", OtherKey:="osfamily_id")>  _
	Public Property Server() As EntitySet(Of Server)
		Get
			Return Me._Server
		End Get
		Set
			Me._Server.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Typology_OSFamily", Storage:="_Typology", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Typology() As Typology
		Get
			Return Me._Typology.Entity
		End Get
		Set
			Dim previousValue As Typology = Me._Typology.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Typology.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Typology.Entity = Nothing
					previousValue.OSFamily = Nothing
				End If
				Me._Typology.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OSFamily = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Typology")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OSVersion(ByVal entity As OSVersion)
		Me.SendPropertyChanging
		entity.OSFamily = Me
	End Sub
	
	Private Sub detach_OSVersion(ByVal entity As OSVersion)
		Me.SendPropertyChanging
		entity.OSFamily = Nothing
	End Sub
	
	Private Sub attach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSFamily = Me
	End Sub
	
	Private Sub detach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSFamily = Nothing
	End Sub
End Class

<Table(Name:="dbo.OSLicence")>  _
Partial Public Class OSLicence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _osversion_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Server As EntitySet(Of Server)
	
	Private _Licence As EntityRef(Of Licence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onosversion_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onosversion_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Server = New EntitySet(Of Server)(AddressOf Me.attach_Server, AddressOf Me.detach_Server)
		Me._Licence = CType(Nothing, EntityRef(Of Licence))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Licence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osversion_identify", DbType:="Int NOT NULL")>  _
	Public Property osversion_identify() As Integer
		Get
			Return Me._osversion_identify
		End Get
		Set
			If ((Me._osversion_identify = value)  _
						= false) Then
				Me.Onosversion_identifyChanging(value)
				Me.SendPropertyChanging
				Me._osversion_identify = value
				Me.SendPropertyChanged("osversion_identify")
				Me.Onosversion_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OSLicence_Server", Storage:="_Server", OtherKey:="oslicence_id")>  _
	Public Property Server() As EntitySet(Of Server)
		Get
			Return Me._Server
		End Get
		Set
			Me._Server.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Licence_OSLicence", Storage:="_Licence", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Licence() As Licence
		Get
			Return Me._Licence.Entity
		End Get
		Set
			Dim previousValue As Licence = Me._Licence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Licence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Licence.Entity = Nothing
					previousValue.OSLicence = Nothing
				End If
				Me._Licence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OSLicence = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Licence")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSLicence = Me
	End Sub
	
	Private Sub detach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSLicence = Nothing
	End Sub
End Class

<Table(Name:="dbo.OSVersion")>  _
Partial Public Class OSVersion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _osfamily_id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Server As EntitySet(Of Server)
	
	Private _OSFamily As EntityRef(Of OSFamily)
	
	Private _Typology As EntityRef(Of Typology)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onosfamily_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onosfamily_idChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Server = New EntitySet(Of Server)(AddressOf Me.attach_Server, AddressOf Me.detach_Server)
		Me._OSFamily = CType(Nothing, EntityRef(Of OSFamily))
		Me._Typology = CType(Nothing, EntityRef(Of Typology))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Typology.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osfamily_id", DbType:="Int NOT NULL")>  _
	Public Property osfamily_id() As Integer
		Get
			Return Me._osfamily_id
		End Get
		Set
			If ((Me._osfamily_id = value)  _
						= false) Then
				If Me._OSFamily.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onosfamily_idChanging(value)
				Me.SendPropertyChanging
				Me._osfamily_id = value
				Me.SendPropertyChanged("osfamily_id")
				Me.Onosfamily_idChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OSVersion_Server", Storage:="_Server", OtherKey:="osversion_id")>  _
	Public Property Server() As EntitySet(Of Server)
		Get
			Return Me._Server
		End Get
		Set
			Me._Server.Assign(value)
		End Set
	End Property
	
	<Association(Name:="OSFamily_OSVersion", Storage:="_OSFamily", ThisKey:="osfamily_id", IsForeignKey:=true)>  _
	Public Property OSFamily() As OSFamily
		Get
			Return Me._OSFamily.Entity
		End Get
		Set
			Dim previousValue As OSFamily = Me._OSFamily.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSFamily.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSFamily.Entity = Nothing
					previousValue.OSVersion.Remove(Me)
				End If
				Me._OSFamily.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OSVersion.Add(Me)
					Me._osfamily_id = value.id
				Else
					Me._osfamily_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OSFamily")
			End If
		End Set
	End Property
	
	<Association(Name:="Typology_OSVersion", Storage:="_Typology", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Typology() As Typology
		Get
			Return Me._Typology.Entity
		End Get
		Set
			Dim previousValue As Typology = Me._Typology.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Typology.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Typology.Entity = Nothing
					previousValue.OSVersion = Nothing
				End If
				Me._Typology.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OSVersion = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Typology")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSVersion = Me
	End Sub
	
	Private Sub detach_Server(ByVal entity As Server)
		Me.SendPropertyChanging
		entity.OSVersion = Nothing
	End Sub
End Class

<Table(Name:="dbo.Passwd")>  _
Partial Public Class Passwd
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _account As String
	
	Private _passwd As String
	
	Private __use As String
	
	Private _start_date As System.Nullable(Of Date)
	
	Private _end_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _LnkPasswdToFunctionalCI As EntitySet(Of LnkPasswdToFunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnaccountChanging(value As String)
    End Sub
    Partial Private Sub OnaccountChanged()
    End Sub
    Partial Private Sub OnpasswdChanging(value As String)
    End Sub
    Partial Private Sub OnpasswdChanged()
    End Sub
    Partial Private Sub On_useChanging(value As String)
    End Sub
    Partial Private Sub On_useChanged()
    End Sub
    Partial Private Sub Onstart_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onstart_dateChanged()
    End Sub
    Partial Private Sub Onend_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkPasswdToFunctionalCI = New EntitySet(Of LnkPasswdToFunctionalCI)(AddressOf Me.attach_LnkPasswdToFunctionalCI, AddressOf Me.detach_LnkPasswdToFunctionalCI)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_account", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property account() As String
		Get
			Return Me._account
		End Get
		Set
			If (String.Equals(Me._account, value) = false) Then
				Me.OnaccountChanging(value)
				Me.SendPropertyChanging
				Me._account = value
				Me.SendPropertyChanged("account")
				Me.OnaccountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_passwd", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property passwd() As String
		Get
			Return Me._passwd
		End Get
		Set
			If (String.Equals(Me._passwd, value) = false) Then
				Me.OnpasswdChanging(value)
				Me.SendPropertyChanging
				Me._passwd = value
				Me.SendPropertyChanged("passwd")
				Me.OnpasswdChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_use]", Storage:="__use", DbType:="NVarChar(16)")>  _
	Public Property _use() As String
		Get
			Return Me.__use
		End Get
		Set
			If (String.Equals(Me.__use, value) = false) Then
				Me.On_useChanging(value)
				Me.SendPropertyChanging
				Me.__use = value
				Me.SendPropertyChanged("_use")
				Me.On_useChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_start_date", DbType:="DateTime")>  _
	Public Property start_date() As System.Nullable(Of Date)
		Get
			Return Me._start_date
		End Get
		Set
			If (Me._start_date.Equals(value) = false) Then
				Me.Onstart_dateChanging(value)
				Me.SendPropertyChanging
				Me._start_date = value
				Me.SendPropertyChanged("start_date")
				Me.Onstart_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_end_date", DbType:="DateTime")>  _
	Public Property end_date() As System.Nullable(Of Date)
		Get
			Return Me._end_date
		End Get
		Set
			If (Me._end_date.Equals(value) = false) Then
				Me.Onend_dateChanging(value)
				Me.SendPropertyChanging
				Me._end_date = value
				Me.SendPropertyChanged("end_date")
				Me.Onend_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Passwd_LnkPasswdToFunctionalCI", Storage:="_LnkPasswdToFunctionalCI", ThisKey:="_Identify", OtherKey:="passwd_identify")>  _
	Public Property LnkPasswdToFunctionalCI() As EntitySet(Of LnkPasswdToFunctionalCI)
		Get
			Return Me._LnkPasswdToFunctionalCI
		End Get
		Set
			Me._LnkPasswdToFunctionalCI.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkPasswdToFunctionalCI(ByVal entity As LnkPasswdToFunctionalCI)
		Me.SendPropertyChanging
		entity.Passwd = Me
	End Sub
	
	Private Sub detach_LnkPasswdToFunctionalCI(ByVal entity As LnkPasswdToFunctionalCI)
		Me.SendPropertyChanging
		entity.Passwd = Nothing
	End Sub
End Class

<Table(Name:="dbo.Peripheral")>  _
Partial Public Class Peripheral
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Peripheral", Storage:="_PhysicalDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.Peripheral = Nothing
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Peripheral = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PhysicalDevice")>  _
Partial Public Class PhysicalDevice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _location_identify As Integer
	
	Private _serialnumber As String
	
	Private _asset_number As String
	
	Private _code_physicaldevice_status As System.Nullable(Of Integer)
	
	Private _code_brand_name As System.Nullable(Of Integer)
	
	Private _code_model_name As System.Nullable(Of Integer)
	
	Private _purchase_date As System.Nullable(Of Date)
	
	Private _end_of_warranty As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _Backups As EntitySet(Of Backups)
	
	Private _ConnectableCI As EntityRef(Of ConnectableCI)
	
	Private _Enclosure As EntityRef(Of Enclosure)
	
	Private _Peripheral As EntityRef(Of Peripheral)
	
	Private _Rack As EntityRef(Of Rack)
	
	Private _SecurityStrategy As EntitySet(Of SecurityStrategy)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Location As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onlocation_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onlocation_identifyChanged()
    End Sub
    Partial Private Sub OnserialnumberChanging(value As String)
    End Sub
    Partial Private Sub OnserialnumberChanged()
    End Sub
    Partial Private Sub Onasset_numberChanging(value As String)
    End Sub
    Partial Private Sub Onasset_numberChanged()
    End Sub
    Partial Private Sub Oncode_physicaldevice_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_physicaldevice_statusChanged()
    End Sub
    Partial Private Sub Oncode_brand_nameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_brand_nameChanged()
    End Sub
    Partial Private Sub Oncode_model_nameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_model_nameChanged()
    End Sub
    Partial Private Sub Onpurchase_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onpurchase_dateChanged()
    End Sub
    Partial Private Sub Onend_of_warrantyChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_of_warrantyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Backups = New EntitySet(Of Backups)(AddressOf Me.attach_Backups, AddressOf Me.detach_Backups)
		Me._ConnectableCI = CType(Nothing, EntityRef(Of ConnectableCI))
		Me._Enclosure = CType(Nothing, EntityRef(Of Enclosure))
		Me._Peripheral = CType(Nothing, EntityRef(Of Peripheral))
		Me._Rack = CType(Nothing, EntityRef(Of Rack))
		Me._SecurityStrategy = New EntitySet(Of SecurityStrategy)(AddressOf Me.attach_SecurityStrategy, AddressOf Me.detach_SecurityStrategy)
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_location_identify", DbType:="Int NOT NULL")>  _
	Public Property location_identify() As Integer
		Get
			Return Me._location_identify
		End Get
		Set
			If ((Me._location_identify = value)  _
						= false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocation_identifyChanging(value)
				Me.SendPropertyChanging
				Me._location_identify = value
				Me.SendPropertyChanged("location_identify")
				Me.Onlocation_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_serialnumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property serialnumber() As String
		Get
			Return Me._serialnumber
		End Get
		Set
			If (String.Equals(Me._serialnumber, value) = false) Then
				Me.OnserialnumberChanging(value)
				Me.SendPropertyChanging
				Me._serialnumber = value
				Me.SendPropertyChanged("serialnumber")
				Me.OnserialnumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_asset_number", DbType:="NVarChar(50)")>  _
	Public Property asset_number() As String
		Get
			Return Me._asset_number
		End Get
		Set
			If (String.Equals(Me._asset_number, value) = false) Then
				Me.Onasset_numberChanging(value)
				Me.SendPropertyChanging
				Me._asset_number = value
				Me.SendPropertyChanged("asset_number")
				Me.Onasset_numberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_physicaldevice_status", DbType:="Int")>  _
	Public Property code_physicaldevice_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_physicaldevice_status
		End Get
		Set
			If (Me._code_physicaldevice_status.Equals(value) = false) Then
				Me.Oncode_physicaldevice_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_physicaldevice_status = value
				Me.SendPropertyChanged("code_physicaldevice_status")
				Me.Oncode_physicaldevice_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_brand_name", DbType:="Int")>  _
	Public Property code_brand_name() As System.Nullable(Of Integer)
		Get
			Return Me._code_brand_name
		End Get
		Set
			If (Me._code_brand_name.Equals(value) = false) Then
				Me.Oncode_brand_nameChanging(value)
				Me.SendPropertyChanging
				Me._code_brand_name = value
				Me.SendPropertyChanged("code_brand_name")
				Me.Oncode_brand_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_model_name", DbType:="Int")>  _
	Public Property code_model_name() As System.Nullable(Of Integer)
		Get
			Return Me._code_model_name
		End Get
		Set
			If (Me._code_model_name.Equals(value) = false) Then
				Me.Oncode_model_nameChanging(value)
				Me.SendPropertyChanging
				Me._code_model_name = value
				Me.SendPropertyChanged("code_model_name")
				Me.Oncode_model_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_purchase_date", DbType:="DateTime")>  _
	Public Property purchase_date() As System.Nullable(Of Date)
		Get
			Return Me._purchase_date
		End Get
		Set
			If (Me._purchase_date.Equals(value) = false) Then
				Me.Onpurchase_dateChanging(value)
				Me.SendPropertyChanging
				Me._purchase_date = value
				Me.SendPropertyChanged("purchase_date")
				Me.Onpurchase_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_end_of_warranty", DbType:="DateTime")>  _
	Public Property end_of_warranty() As System.Nullable(Of Date)
		Get
			Return Me._end_of_warranty
		End Get
		Set
			If (Me._end_of_warranty.Equals(value) = false) Then
				Me.Onend_of_warrantyChanging(value)
				Me.SendPropertyChanging
				Me._end_of_warranty = value
				Me.SendPropertyChanged("end_of_warranty")
				Me.Onend_of_warrantyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Backups", Storage:="_Backups", OtherKey:="backuper_identify")>  _
	Public Property Backups() As EntitySet(Of Backups)
		Get
			Return Me._Backups
		End Get
		Set
			Me._Backups.Assign(value)
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_ConnectableCI", Storage:="_ConnectableCI", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ConnectableCI() As ConnectableCI
		Get
			Return Me._ConnectableCI.Entity
		End Get
		Set
			Dim previousValue As ConnectableCI = Me._ConnectableCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConnectableCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConnectableCI.Entity = Nothing
					previousValue.PhysicalDevice = Nothing
				End If
				Me._ConnectableCI.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.PhysicalDevice = Me
				End If
				Me.SendPropertyChanged("ConnectableCI")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Enclosure", Storage:="_Enclosure", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Enclosure() As Enclosure
		Get
			Return Me._Enclosure.Entity
		End Get
		Set
			Dim previousValue As Enclosure = Me._Enclosure.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enclosure.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enclosure.Entity = Nothing
					previousValue.PhysicalDevice = Nothing
				End If
				Me._Enclosure.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.PhysicalDevice = Me
				End If
				Me.SendPropertyChanged("Enclosure")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Peripheral", Storage:="_Peripheral", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Peripheral() As Peripheral
		Get
			Return Me._Peripheral.Entity
		End Get
		Set
			Dim previousValue As Peripheral = Me._Peripheral.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Peripheral.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Peripheral.Entity = Nothing
					previousValue.PhysicalDevice = Nothing
				End If
				Me._Peripheral.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.PhysicalDevice = Me
				End If
				Me.SendPropertyChanged("Peripheral")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Rack", Storage:="_Rack", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Rack() As Rack
		Get
			Return Me._Rack.Entity
		End Get
		Set
			Dim previousValue As Rack = Me._Rack.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Rack.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Rack.Entity = Nothing
					previousValue.PhysicalDevice = Nothing
				End If
				Me._Rack.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.PhysicalDevice = Me
				End If
				Me.SendPropertyChanged("Rack")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_SecurityStrategy", Storage:="_SecurityStrategy", OtherKey:="physical_device_identify")>  _
	Public Property SecurityStrategy() As EntitySet(Of SecurityStrategy)
		Get
			Return Me._SecurityStrategy
		End Get
		Set
			Me._SecurityStrategy.Assign(value)
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_PhysicalDevice", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.PhysicalDevice = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PhysicalDevice = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Location_PhysicalDevice", Storage:="_Location", ThisKey:="location_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.PhysicalDevice.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PhysicalDevice.Add(Me)
					Me._location_identify = value._Identify
				Else
					Me._location_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Backups(ByVal entity As Backups)
		Me.SendPropertyChanging
		entity.PhysicalDevice = Me
	End Sub
	
	Private Sub detach_Backups(ByVal entity As Backups)
		Me.SendPropertyChanging
		entity.PhysicalDevice = Nothing
	End Sub
	
	Private Sub attach_SecurityStrategy(ByVal entity As SecurityStrategy)
		Me.SendPropertyChanging
		entity.PhysicalDevice = Me
	End Sub
	
	Private Sub detach_SecurityStrategy(ByVal entity As SecurityStrategy)
		Me.SendPropertyChanging
		entity.PhysicalDevice = Nothing
	End Sub
End Class

<Table(Name:="dbo.PhysicalInterface")>  _
Partial Public Class PhysicalInterface
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _connectableci_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LnkPhysicalInterfaceToVLAN As EntitySet(Of LnkPhysicalInterfaceToVLAN)
	
	Private _ConnectableCI As EntityRef(Of ConnectableCI)
	
	Private _IPInterface As EntityRef(Of IPInterface)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onconnectableci_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onconnectableci_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkPhysicalInterfaceToVLAN = New EntitySet(Of LnkPhysicalInterfaceToVLAN)(AddressOf Me.attach_LnkPhysicalInterfaceToVLAN, AddressOf Me.detach_LnkPhysicalInterfaceToVLAN)
		Me._ConnectableCI = CType(Nothing, EntityRef(Of ConnectableCI))
		Me._IPInterface = CType(Nothing, EntityRef(Of IPInterface))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._ConnectableCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_connectableci_identify", DbType:="Int NOT NULL")>  _
	Public Property connectableci_identify() As Integer
		Get
			Return Me._connectableci_identify
		End Get
		Set
			If ((Me._connectableci_identify = value)  _
						= false) Then
				Me.Onconnectableci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._connectableci_identify = value
				Me.SendPropertyChanged("connectableci_identify")
				Me.Onconnectableci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalInterface_LnkPhysicalInterfaceToVLAN", Storage:="_LnkPhysicalInterfaceToVLAN", OtherKey:="physicalinterface_identify")>  _
	Public Property LnkPhysicalInterfaceToVLAN() As EntitySet(Of LnkPhysicalInterfaceToVLAN)
		Get
			Return Me._LnkPhysicalInterfaceToVLAN
		End Get
		Set
			Me._LnkPhysicalInterfaceToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ConnectableCI_PhysicalInterface", Storage:="_ConnectableCI", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property ConnectableCI() As ConnectableCI
		Get
			Return Me._ConnectableCI.Entity
		End Get
		Set
			Dim previousValue As ConnectableCI = Me._ConnectableCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConnectableCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConnectableCI.Entity = Nothing
					previousValue.PhysicalInterface = Nothing
				End If
				Me._ConnectableCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PhysicalInterface = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ConnectableCI")
			End If
		End Set
	End Property
	
	<Association(Name:="IPInterface_PhysicalInterface", Storage:="_IPInterface", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property IPInterface() As IPInterface
		Get
			Return Me._IPInterface.Entity
		End Get
		Set
			Dim previousValue As IPInterface = Me._IPInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPInterface.Entity = Nothing
					previousValue.PhysicalInterface = Nothing
				End If
				Me._IPInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PhysicalInterface = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IPInterface")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkPhysicalInterfaceToVLAN(ByVal entity As LnkPhysicalInterfaceToVLAN)
		Me.SendPropertyChanging
		entity.PhysicalInterface = Me
	End Sub
	
	Private Sub detach_LnkPhysicalInterfaceToVLAN(ByVal entity As LnkPhysicalInterfaceToVLAN)
		Me.SendPropertyChanging
		entity.PhysicalInterface = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProviderContract")>  _
Partial Public Class ProviderContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _sla As String
	
	Private _coverage As String
	
	Private __IsDeleted As Boolean
	
	Private _LnkCustomerContractToProviderContract As EntitySet(Of LnkCustomerContractToProviderContract)
	
	Private _LnkFunctionalCIToProviderContract As EntitySet(Of LnkFunctionalCIToProviderContract)
	
	Private _Contract As EntityRef(Of Contract)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnslaChanging(value As String)
    End Sub
    Partial Private Sub OnslaChanged()
    End Sub
    Partial Private Sub OncoverageChanging(value As String)
    End Sub
    Partial Private Sub OncoverageChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkCustomerContractToProviderContract = New EntitySet(Of LnkCustomerContractToProviderContract)(AddressOf Me.attach_LnkCustomerContractToProviderContract, AddressOf Me.detach_LnkCustomerContractToProviderContract)
		Me._LnkFunctionalCIToProviderContract = New EntitySet(Of LnkFunctionalCIToProviderContract)(AddressOf Me.attach_LnkFunctionalCIToProviderContract, AddressOf Me.detach_LnkFunctionalCIToProviderContract)
		Me._Contract = CType(Nothing, EntityRef(Of Contract))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Contract.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sla", DbType:="VarChar(255)")>  _
	Public Property sla() As String
		Get
			Return Me._sla
		End Get
		Set
			If (String.Equals(Me._sla, value) = false) Then
				Me.OnslaChanging(value)
				Me.SendPropertyChanging
				Me._sla = value
				Me.SendPropertyChanged("sla")
				Me.OnslaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_coverage", DbType:="VarChar(255)")>  _
	Public Property coverage() As String
		Get
			Return Me._coverage
		End Get
		Set
			If (String.Equals(Me._coverage, value) = false) Then
				Me.OncoverageChanging(value)
				Me.SendPropertyChanging
				Me._coverage = value
				Me.SendPropertyChanged("coverage")
				Me.OncoverageChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderContract_LnkCustomerContractToProviderContract", Storage:="_LnkCustomerContractToProviderContract", OtherKey:="providercontract_identify")>  _
	Public Property LnkCustomerContractToProviderContract() As EntitySet(Of LnkCustomerContractToProviderContract)
		Get
			Return Me._LnkCustomerContractToProviderContract
		End Get
		Set
			Me._LnkCustomerContractToProviderContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProviderContract_LnkFunctionalCIToProviderContract", Storage:="_LnkFunctionalCIToProviderContract", OtherKey:="providercontract_identify")>  _
	Public Property LnkFunctionalCIToProviderContract() As EntitySet(Of LnkFunctionalCIToProviderContract)
		Get
			Return Me._LnkFunctionalCIToProviderContract
		End Get
		Set
			Me._LnkFunctionalCIToProviderContract.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contract_ProviderContract", Storage:="_Contract", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contract() As Contract
		Get
			Return Me._Contract.Entity
		End Get
		Set
			Dim previousValue As Contract = Me._Contract.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contract.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contract.Entity = Nothing
					previousValue.ProviderContract = Nothing
				End If
				Me._Contract.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProviderContract = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contract")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkCustomerContractToProviderContract(ByVal entity As LnkCustomerContractToProviderContract)
		Me.SendPropertyChanging
		entity.ProviderContract = Me
	End Sub
	
	Private Sub detach_LnkCustomerContractToProviderContract(ByVal entity As LnkCustomerContractToProviderContract)
		Me.SendPropertyChanging
		entity.ProviderContract = Nothing
	End Sub
	
	Private Sub attach_LnkFunctionalCIToProviderContract(ByVal entity As LnkFunctionalCIToProviderContract)
		Me.SendPropertyChanging
		entity.ProviderContract = Me
	End Sub
	
	Private Sub detach_LnkFunctionalCIToProviderContract(ByVal entity As LnkFunctionalCIToProviderContract)
		Me.SendPropertyChanging
		entity.ProviderContract = Nothing
	End Sub
End Class

<Table(Name:="dbo.Rack")>  _
Partial Public Class Rack
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _nb_u As Byte
	
	Private __IsDeleted As Boolean
	
	Private _DataCenterDevice As EntitySet(Of DataCenterDevice)
	
	Private _Enclosure As EntitySet(Of Enclosure)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onnb_uChanging(value As Byte)
    End Sub
    Partial Private Sub Onnb_uChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataCenterDevice = New EntitySet(Of DataCenterDevice)(AddressOf Me.attach_DataCenterDevice, AddressOf Me.detach_DataCenterDevice)
		Me._Enclosure = New EntitySet(Of Enclosure)(AddressOf Me.attach_Enclosure, AddressOf Me.detach_Enclosure)
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_nb_u", DbType:="TinyInt NOT NULL")>  _
	Public Property nb_u() As Byte
		Get
			Return Me._nb_u
		End Get
		Set
			If ((Me._nb_u = value)  _
						= false) Then
				Me.Onnb_uChanging(value)
				Me.SendPropertyChanging
				Me._nb_u = value
				Me.SendPropertyChanged("nb_u")
				Me.Onnb_uChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Rack_DataCenterDevice", Storage:="_DataCenterDevice", OtherKey:="rack_identify")>  _
	Public Property DataCenterDevice() As EntitySet(Of DataCenterDevice)
		Get
			Return Me._DataCenterDevice
		End Get
		Set
			Me._DataCenterDevice.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Rack_Enclosure", Storage:="_Enclosure", OtherKey:="rack_identify")>  _
	Public Property Enclosure() As EntitySet(Of Enclosure)
		Get
			Return Me._Enclosure
		End Get
		Set
			Me._Enclosure.Assign(value)
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_Rack", Storage:="_PhysicalDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.Rack = Nothing
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Rack = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataCenterDevice(ByVal entity As DataCenterDevice)
		Me.SendPropertyChanging
		entity.Rack = Me
	End Sub
	
	Private Sub detach_DataCenterDevice(ByVal entity As DataCenterDevice)
		Me.SendPropertyChanging
		entity.Rack = Nothing
	End Sub
	
	Private Sub attach_Enclosure(ByVal entity As Enclosure)
		Me.SendPropertyChanging
		entity.Rack = Me
	End Sub
	
	Private Sub detach_Enclosure(ByVal entity As Enclosure)
		Me.SendPropertyChanging
		entity.Rack = Nothing
	End Sub
End Class

<Table(Name:="dbo.SANSwitch")>  _
Partial Public Class SANSwitch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LnkDatacenterDeviceToSan As EntitySet(Of LnkDatacenterDeviceToSan)
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkDatacenterDeviceToSan = New EntitySet(Of LnkDatacenterDeviceToSan)(AddressOf Me.attach_LnkDatacenterDeviceToSan, AddressOf Me.detach_LnkDatacenterDeviceToSan)
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SANSwitch_LnkDatacenterDeviceToSan", Storage:="_LnkDatacenterDeviceToSan", OtherKey:="san_identify")>  _
	Public Property LnkDatacenterDeviceToSan() As EntitySet(Of LnkDatacenterDeviceToSan)
		Get
			Return Me._LnkDatacenterDeviceToSan
		End Get
		Set
			Me._LnkDatacenterDeviceToSan.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_SANSwitch", Storage:="_DataCenterDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.SANSwitch = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SANSwitch = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkDatacenterDeviceToSan(ByVal entity As LnkDatacenterDeviceToSan)
		Me.SendPropertyChanging
		entity.SANSwitch = Me
	End Sub
	
	Private Sub detach_LnkDatacenterDeviceToSan(ByVal entity As LnkDatacenterDeviceToSan)
		Me.SendPropertyChanging
		entity.SANSwitch = Nothing
	End Sub
End Class

<Table(Name:="dbo.SecurityStrategy")>  _
Partial Public Class SecurityStrategy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _physical_device_identify As Integer
	
	Private _config_port_identify As Integer
	
	Private _name As String
	
	Private _code_security_strategy_type As Integer
	
	Private _description As String
	
	Private __IsDeleted As Boolean
	
	Private _ConfigPort As EntityRef(Of ConfigPort)
	
	Private _PhysicalDevice As EntityRef(Of PhysicalDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onphysical_device_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onphysical_device_identifyChanged()
    End Sub
    Partial Private Sub Onconfig_port_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onconfig_port_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Oncode_security_strategy_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_security_strategy_typeChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConfigPort = CType(Nothing, EntityRef(Of ConfigPort))
		Me._PhysicalDevice = CType(Nothing, EntityRef(Of PhysicalDevice))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_physical_device_identify", DbType:="Int NOT NULL")>  _
	Public Property physical_device_identify() As Integer
		Get
			Return Me._physical_device_identify
		End Get
		Set
			If ((Me._physical_device_identify = value)  _
						= false) Then
				If Me._PhysicalDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onphysical_device_identifyChanging(value)
				Me.SendPropertyChanging
				Me._physical_device_identify = value
				Me.SendPropertyChanged("physical_device_identify")
				Me.Onphysical_device_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_config_port_identify", DbType:="Int NOT NULL")>  _
	Public Property config_port_identify() As Integer
		Get
			Return Me._config_port_identify
		End Get
		Set
			If ((Me._config_port_identify = value)  _
						= false) Then
				If Me._ConfigPort.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onconfig_port_identifyChanging(value)
				Me.SendPropertyChanging
				Me._config_port_identify = value
				Me.SendPropertyChanged("config_port_identify")
				Me.Onconfig_port_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_security_strategy_type", DbType:="Int NOT NULL")>  _
	Public Property code_security_strategy_type() As Integer
		Get
			Return Me._code_security_strategy_type
		End Get
		Set
			If ((Me._code_security_strategy_type = value)  _
						= false) Then
				Me.Oncode_security_strategy_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_security_strategy_type = value
				Me.SendPropertyChanged("code_security_strategy_type")
				Me.Oncode_security_strategy_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ConfigPort_SecurityStrategy", Storage:="_ConfigPort", ThisKey:="config_port_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property ConfigPort() As ConfigPort
		Get
			Return Me._ConfigPort.Entity
		End Get
		Set
			Dim previousValue As ConfigPort = Me._ConfigPort.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConfigPort.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConfigPort.Entity = Nothing
					previousValue.SecurityStrategy.Remove(Me)
				End If
				Me._ConfigPort.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SecurityStrategy.Add(Me)
					Me._config_port_identify = value._Identify
				Else
					Me._config_port_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ConfigPort")
			End If
		End Set
	End Property
	
	<Association(Name:="PhysicalDevice_SecurityStrategy", Storage:="_PhysicalDevice", ThisKey:="physical_device_identify", IsForeignKey:=true)>  _
	Public Property PhysicalDevice() As PhysicalDevice
		Get
			Return Me._PhysicalDevice.Entity
		End Get
		Set
			Dim previousValue As PhysicalDevice = Me._PhysicalDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PhysicalDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PhysicalDevice.Entity = Nothing
					previousValue.SecurityStrategy.Remove(Me)
				End If
				Me._PhysicalDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SecurityStrategy.Add(Me)
					Me._physical_device_identify = value.id
				Else
					Me._physical_device_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PhysicalDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Server")>  _
Partial Public Class Server
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _osfamily_id As System.Nullable(Of Integer)
	
	Private _osversion_id As System.Nullable(Of Integer)
	
	Private _oslicence_id As System.Nullable(Of Integer)
	
	Private _cpu As String
	
	Private _ram As String
	
	Private __IsDeleted As Boolean
	
	Private _Hypervisor As EntitySet(Of Hypervisor)
	
	Private _LnkServerToVolume As EntitySet(Of LnkServerToVolume)
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
	Private _OSFamily As EntityRef(Of OSFamily)
	
	Private _OSLicence As EntityRef(Of OSLicence)
	
	Private _OSVersion As EntityRef(Of OSVersion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onosfamily_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onosfamily_idChanged()
    End Sub
    Partial Private Sub Onosversion_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onosversion_idChanged()
    End Sub
    Partial Private Sub Onoslicence_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoslicence_idChanged()
    End Sub
    Partial Private Sub OncpuChanging(value As String)
    End Sub
    Partial Private Sub OncpuChanged()
    End Sub
    Partial Private Sub OnramChanging(value As String)
    End Sub
    Partial Private Sub OnramChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Hypervisor = New EntitySet(Of Hypervisor)(AddressOf Me.attach_Hypervisor, AddressOf Me.detach_Hypervisor)
		Me._LnkServerToVolume = New EntitySet(Of LnkServerToVolume)(AddressOf Me.attach_LnkServerToVolume, AddressOf Me.detach_LnkServerToVolume)
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		Me._OSFamily = CType(Nothing, EntityRef(Of OSFamily))
		Me._OSLicence = CType(Nothing, EntityRef(Of OSLicence))
		Me._OSVersion = CType(Nothing, EntityRef(Of OSVersion))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osfamily_id", DbType:="Int")>  _
	Public Property osfamily_id() As System.Nullable(Of Integer)
		Get
			Return Me._osfamily_id
		End Get
		Set
			If (Me._osfamily_id.Equals(value) = false) Then
				If Me._OSFamily.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onosfamily_idChanging(value)
				Me.SendPropertyChanging
				Me._osfamily_id = value
				Me.SendPropertyChanged("osfamily_id")
				Me.Onosfamily_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osversion_id", DbType:="Int")>  _
	Public Property osversion_id() As System.Nullable(Of Integer)
		Get
			Return Me._osversion_id
		End Get
		Set
			If (Me._osversion_id.Equals(value) = false) Then
				If Me._OSVersion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onosversion_idChanging(value)
				Me.SendPropertyChanging
				Me._osversion_id = value
				Me.SendPropertyChanged("osversion_id")
				Me.Onosversion_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_oslicence_id", DbType:="Int")>  _
	Public Property oslicence_id() As System.Nullable(Of Integer)
		Get
			Return Me._oslicence_id
		End Get
		Set
			If (Me._oslicence_id.Equals(value) = false) Then
				If Me._OSLicence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onoslicence_idChanging(value)
				Me.SendPropertyChanging
				Me._oslicence_id = value
				Me.SendPropertyChanged("oslicence_id")
				Me.Onoslicence_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cpu", DbType:="VarChar(50)")>  _
	Public Property cpu() As String
		Get
			Return Me._cpu
		End Get
		Set
			If (String.Equals(Me._cpu, value) = false) Then
				Me.OncpuChanging(value)
				Me.SendPropertyChanging
				Me._cpu = value
				Me.SendPropertyChanged("cpu")
				Me.OncpuChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ram", DbType:="VarChar(50)")>  _
	Public Property ram() As String
		Get
			Return Me._ram
		End Get
		Set
			If (String.Equals(Me._ram, value) = false) Then
				Me.OnramChanging(value)
				Me.SendPropertyChanging
				Me._ram = value
				Me.SendPropertyChanged("ram")
				Me.OnramChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Server_Hypervisor", Storage:="_Hypervisor", OtherKey:="server_identify")>  _
	Public Property Hypervisor() As EntitySet(Of Hypervisor)
		Get
			Return Me._Hypervisor
		End Get
		Set
			Me._Hypervisor.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Server_LnkServerToVolume", Storage:="_LnkServerToVolume", OtherKey:="server_identify")>  _
	Public Property LnkServerToVolume() As EntitySet(Of LnkServerToVolume)
		Get
			Return Me._LnkServerToVolume
		End Get
		Set
			Me._LnkServerToVolume.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_Server", Storage:="_DataCenterDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.Server = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Server = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	<Association(Name:="OSFamily_Server", Storage:="_OSFamily", ThisKey:="osfamily_id", IsForeignKey:=true)>  _
	Public Property OSFamily() As OSFamily
		Get
			Return Me._OSFamily.Entity
		End Get
		Set
			Dim previousValue As OSFamily = Me._OSFamily.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSFamily.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSFamily.Entity = Nothing
					previousValue.Server.Remove(Me)
				End If
				Me._OSFamily.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Server.Add(Me)
					Me._osfamily_id = value.id
				Else
					Me._osfamily_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OSFamily")
			End If
		End Set
	End Property
	
	<Association(Name:="OSLicence_Server", Storage:="_OSLicence", ThisKey:="oslicence_id", IsForeignKey:=true)>  _
	Public Property OSLicence() As OSLicence
		Get
			Return Me._OSLicence.Entity
		End Get
		Set
			Dim previousValue As OSLicence = Me._OSLicence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSLicence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSLicence.Entity = Nothing
					previousValue.Server.Remove(Me)
				End If
				Me._OSLicence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Server.Add(Me)
					Me._oslicence_id = value.id
				Else
					Me._oslicence_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OSLicence")
			End If
		End Set
	End Property
	
	<Association(Name:="OSVersion_Server", Storage:="_OSVersion", ThisKey:="osversion_id", IsForeignKey:=true)>  _
	Public Property OSVersion() As OSVersion
		Get
			Return Me._OSVersion.Entity
		End Get
		Set
			Dim previousValue As OSVersion = Me._OSVersion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSVersion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSVersion.Entity = Nothing
					previousValue.Server.Remove(Me)
				End If
				Me._OSVersion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Server.Add(Me)
					Me._osversion_id = value.id
				Else
					Me._osversion_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OSVersion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Hypervisor(ByVal entity As Hypervisor)
		Me.SendPropertyChanging
		entity.Server = Me
	End Sub
	
	Private Sub detach_Hypervisor(ByVal entity As Hypervisor)
		Me.SendPropertyChanging
		entity.Server = Nothing
	End Sub
	
	Private Sub attach_LnkServerToVolume(ByVal entity As LnkServerToVolume)
		Me.SendPropertyChanging
		entity.Server = Me
	End Sub
	
	Private Sub detach_LnkServerToVolume(ByVal entity As LnkServerToVolume)
		Me.SendPropertyChanging
		entity.Server = Nothing
	End Sub
End Class

<Table(Name:="dbo.Software")>  _
Partial Public Class Software
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _vendor As String
	
	Private _version As String
	
	Private _code_software_type As Integer
	
	Private __IsDeleted As Boolean
	
	Private _LnkDocumentToSoftware As EntitySet(Of LnkDocumentToSoftware)
	
	Private _SoftwareInstance As EntitySet(Of SoftwareInstance)
	
	Private _SoftwareLicence As EntitySet(Of SoftwareLicence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnvendorChanging(value As String)
    End Sub
    Partial Private Sub OnvendorChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As String)
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    Partial Private Sub Oncode_software_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_software_typeChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkDocumentToSoftware = New EntitySet(Of LnkDocumentToSoftware)(AddressOf Me.attach_LnkDocumentToSoftware, AddressOf Me.detach_LnkDocumentToSoftware)
		Me._SoftwareInstance = New EntitySet(Of SoftwareInstance)(AddressOf Me.attach_SoftwareInstance, AddressOf Me.detach_SoftwareInstance)
		Me._SoftwareLicence = New EntitySet(Of SoftwareLicence)(AddressOf Me.attach_SoftwareLicence, AddressOf Me.detach_SoftwareLicence)
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vendor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vendor() As String
		Get
			Return Me._vendor
		End Get
		Set
			If (String.Equals(Me._vendor, value) = false) Then
				Me.OnvendorChanging(value)
				Me.SendPropertyChanging
				Me._vendor = value
				Me.SendPropertyChanged("vendor")
				Me.OnvendorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_version", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property version() As String
		Get
			Return Me._version
		End Get
		Set
			If (String.Equals(Me._version, value) = false) Then
				Me.OnversionChanging(value)
				Me.SendPropertyChanging
				Me._version = value
				Me.SendPropertyChanged("version")
				Me.OnversionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_software_type", DbType:="Int NOT NULL")>  _
	Public Property code_software_type() As Integer
		Get
			Return Me._code_software_type
		End Get
		Set
			If ((Me._code_software_type = value)  _
						= false) Then
				Me.Oncode_software_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_software_type = value
				Me.SendPropertyChanged("code_software_type")
				Me.Oncode_software_typeChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Software_LnkDocumentToSoftware", Storage:="_LnkDocumentToSoftware", ThisKey:="_Identify", OtherKey:="software_identify")>  _
	Public Property LnkDocumentToSoftware() As EntitySet(Of LnkDocumentToSoftware)
		Get
			Return Me._LnkDocumentToSoftware
		End Get
		Set
			Me._LnkDocumentToSoftware.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Software_SoftwareInstance", Storage:="_SoftwareInstance", ThisKey:="_Identify", OtherKey:="software_identify")>  _
	Public Property SoftwareInstance() As EntitySet(Of SoftwareInstance)
		Get
			Return Me._SoftwareInstance
		End Get
		Set
			Me._SoftwareInstance.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Software_SoftwareLicence", Storage:="_SoftwareLicence", ThisKey:="_Identify", OtherKey:="software_identify")>  _
	Public Property SoftwareLicence() As EntitySet(Of SoftwareLicence)
		Get
			Return Me._SoftwareLicence
		End Get
		Set
			Me._SoftwareLicence.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkDocumentToSoftware(ByVal entity As LnkDocumentToSoftware)
		Me.SendPropertyChanging
		entity.Software = Me
	End Sub
	
	Private Sub detach_LnkDocumentToSoftware(ByVal entity As LnkDocumentToSoftware)
		Me.SendPropertyChanging
		entity.Software = Nothing
	End Sub
	
	Private Sub attach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.Software = Me
	End Sub
	
	Private Sub detach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.Software = Nothing
	End Sub
	
	Private Sub attach_SoftwareLicence(ByVal entity As SoftwareLicence)
		Me.SendPropertyChanging
		entity.Software = Me
	End Sub
	
	Private Sub detach_SoftwareLicence(ByVal entity As SoftwareLicence)
		Me.SendPropertyChanging
		entity.Software = Nothing
	End Sub
End Class

<Table(Name:="dbo.SoftwareInstance")>  _
Partial Public Class SoftwareInstance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _functionalci_identify As System.Nullable(Of Integer)
	
	Private _software_identify As System.Nullable(Of Integer)
	
	Private _softwarelicence_identify As System.Nullable(Of Integer)
	
	Private _path As String
	
	Private _status As Boolean
	
	Private __IsDeleted As Boolean
	
	Private _WebServer As EntityRef(Of WebServer)
	
	Private _DBServer As EntityRef(Of DBServer)
	
	Private _Middleware As EntityRef(Of Middleware)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Software As EntityRef(Of Software)
	
	Private _SoftwareLicence As EntityRef(Of SoftwareLicence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfunctionalci_identifyChanged()
    End Sub
    Partial Private Sub Onsoftware_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsoftware_identifyChanged()
    End Sub
    Partial Private Sub Onsoftwarelicence_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsoftwarelicence_identifyChanged()
    End Sub
    Partial Private Sub OnpathChanging(value As String)
    End Sub
    Partial Private Sub OnpathChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WebServer = CType(Nothing, EntityRef(Of WebServer))
		Me._DBServer = CType(Nothing, EntityRef(Of DBServer))
		Me._Middleware = CType(Nothing, EntityRef(Of Middleware))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Software = CType(Nothing, EntityRef(Of Software))
		Me._SoftwareLicence = CType(Nothing, EntityRef(Of SoftwareLicence))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_functionalci_identify", DbType:="Int")>  _
	Public Property functionalci_identify() As System.Nullable(Of Integer)
		Get
			Return Me._functionalci_identify
		End Get
		Set
			If (Me._functionalci_identify.Equals(value) = false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onfunctionalci_identifyChanging(value)
				Me.SendPropertyChanging
				Me._functionalci_identify = value
				Me.SendPropertyChanged("functionalci_identify")
				Me.Onfunctionalci_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_software_identify", DbType:="Int")>  _
	Public Property software_identify() As System.Nullable(Of Integer)
		Get
			Return Me._software_identify
		End Get
		Set
			If (Me._software_identify.Equals(value) = false) Then
				If Me._Software.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsoftware_identifyChanging(value)
				Me.SendPropertyChanging
				Me._software_identify = value
				Me.SendPropertyChanged("software_identify")
				Me.Onsoftware_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_softwarelicence_identify", DbType:="Int")>  _
	Public Property softwarelicence_identify() As System.Nullable(Of Integer)
		Get
			Return Me._softwarelicence_identify
		End Get
		Set
			If (Me._softwarelicence_identify.Equals(value) = false) Then
				If Me._SoftwareLicence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsoftwarelicence_identifyChanging(value)
				Me.SendPropertyChanging
				Me._softwarelicence_identify = value
				Me.SendPropertyChanged("softwarelicence_identify")
				Me.Onsoftwarelicence_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_path", DbType:="VarChar(100)")>  _
	Public Property path() As String
		Get
			Return Me._path
		End Get
		Set
			If (String.Equals(Me._path, value) = false) Then
				Me.OnpathChanging(value)
				Me.SendPropertyChanging
				Me._path = value
				Me.SendPropertyChanged("path")
				Me.OnpathChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_status", DbType:="Bit NOT NULL")>  _
	Public Property status() As Boolean
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_WebServer", Storage:="_WebServer", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property WebServer() As WebServer
		Get
			Return Me._WebServer.Entity
		End Get
		Set
			Dim previousValue As WebServer = Me._WebServer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WebServer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WebServer.Entity = Nothing
					previousValue.SoftwareInstance = Nothing
				End If
				Me._WebServer.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.SoftwareInstance = Me
				End If
				Me.SendPropertyChanged("WebServer")
			End If
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_DBServer", Storage:="_DBServer", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property DBServer() As DBServer
		Get
			Return Me._DBServer.Entity
		End Get
		Set
			Dim previousValue As DBServer = Me._DBServer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DBServer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DBServer.Entity = Nothing
					previousValue.SoftwareInstance = Nothing
				End If
				Me._DBServer.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.SoftwareInstance = Me
				End If
				Me.SendPropertyChanged("DBServer")
			End If
		End Set
	End Property
	
	<Association(Name:="SoftwareInstance_Middleware", Storage:="_Middleware", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Middleware() As Middleware
		Get
			Return Me._Middleware.Entity
		End Get
		Set
			Dim previousValue As Middleware = Me._Middleware.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Middleware.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Middleware.Entity = Nothing
					previousValue.SoftwareInstance = Nothing
				End If
				Me._Middleware.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.SoftwareInstance = Me
				End If
				Me.SendPropertyChanged("Middleware")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_SoftwareInstance", Storage:="_FunctionalCI", ThisKey:="functionalci_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.SoftwareInstance.Remove(Me)
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SoftwareInstance.Add(Me)
					Me._functionalci_identify = value._Identify
				Else
					Me._functionalci_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Software_SoftwareInstance", Storage:="_Software", ThisKey:="software_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Software() As Software
		Get
			Return Me._Software.Entity
		End Get
		Set
			Dim previousValue As Software = Me._Software.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Software.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Software.Entity = Nothing
					previousValue.SoftwareInstance.Remove(Me)
				End If
				Me._Software.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SoftwareInstance.Add(Me)
					Me._software_identify = value._Identify
				Else
					Me._software_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Software")
			End If
		End Set
	End Property
	
	<Association(Name:="SoftwareLicence_SoftwareInstance", Storage:="_SoftwareLicence", ThisKey:="softwarelicence_identify", IsForeignKey:=true)>  _
	Public Property SoftwareLicence() As SoftwareLicence
		Get
			Return Me._SoftwareLicence.Entity
		End Get
		Set
			Dim previousValue As SoftwareLicence = Me._SoftwareLicence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SoftwareLicence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SoftwareLicence.Entity = Nothing
					previousValue.SoftwareInstance.Remove(Me)
				End If
				Me._SoftwareLicence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SoftwareInstance.Add(Me)
					Me._softwarelicence_identify = value.id
				Else
					Me._softwarelicence_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SoftwareLicence")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.SoftwareLicence")>  _
Partial Public Class SoftwareLicence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _software_identify As Integer
	
	Private __IsDeleted As Boolean
	
	Private _SoftwareInstance As EntitySet(Of SoftwareInstance)
	
	Private _Licence As EntityRef(Of Licence)
	
	Private _Software As EntityRef(Of Software)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onsoftware_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onsoftware_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SoftwareInstance = New EntitySet(Of SoftwareInstance)(AddressOf Me.attach_SoftwareInstance, AddressOf Me.detach_SoftwareInstance)
		Me._Licence = CType(Nothing, EntityRef(Of Licence))
		Me._Software = CType(Nothing, EntityRef(Of Software))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Licence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_software_identify", DbType:="Int NOT NULL")>  _
	Public Property software_identify() As Integer
		Get
			Return Me._software_identify
		End Get
		Set
			If ((Me._software_identify = value)  _
						= false) Then
				If Me._Software.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onsoftware_identifyChanging(value)
				Me.SendPropertyChanging
				Me._software_identify = value
				Me.SendPropertyChanged("software_identify")
				Me.Onsoftware_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SoftwareLicence_SoftwareInstance", Storage:="_SoftwareInstance", OtherKey:="softwarelicence_identify")>  _
	Public Property SoftwareInstance() As EntitySet(Of SoftwareInstance)
		Get
			Return Me._SoftwareInstance
		End Get
		Set
			Me._SoftwareInstance.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Licence_SoftwareLicence", Storage:="_Licence", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Licence() As Licence
		Get
			Return Me._Licence.Entity
		End Get
		Set
			Dim previousValue As Licence = Me._Licence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Licence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Licence.Entity = Nothing
					previousValue.SoftwareLicence = Nothing
				End If
				Me._Licence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SoftwareLicence = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Licence")
			End If
		End Set
	End Property
	
	<Association(Name:="Software_SoftwareLicence", Storage:="_Software", ThisKey:="software_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Software() As Software
		Get
			Return Me._Software.Entity
		End Get
		Set
			Dim previousValue As Software = Me._Software.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Software.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Software.Entity = Nothing
					previousValue.SoftwareLicence.Remove(Me)
				End If
				Me._Software.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SoftwareLicence.Add(Me)
					Me._software_identify = value._Identify
				Else
					Me._software_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Software")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.SoftwareLicence = Me
	End Sub
	
	Private Sub detach_SoftwareInstance(ByVal entity As SoftwareInstance)
		Me.SendPropertyChanging
		entity.SoftwareLicence = Nothing
	End Sub
End Class

<Table(Name:="dbo.StorageSystem")>  _
Partial Public Class StorageSystem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_storage_type As Integer
	
	Private _disk_path As String
	
	Private _disk_size As Decimal
	
	Private __IsDeleted As Boolean
	
	Private _LogicalVolume As EntitySet(Of LogicalVolume)
	
	Private _DataCenterDevice As EntityRef(Of DataCenterDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_storage_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_storage_typeChanged()
    End Sub
    Partial Private Sub Ondisk_pathChanging(value As String)
    End Sub
    Partial Private Sub Ondisk_pathChanged()
    End Sub
    Partial Private Sub Ondisk_sizeChanging(value As Decimal)
    End Sub
    Partial Private Sub Ondisk_sizeChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogicalVolume = New EntitySet(Of LogicalVolume)(AddressOf Me.attach_LogicalVolume, AddressOf Me.detach_LogicalVolume)
		Me._DataCenterDevice = CType(Nothing, EntityRef(Of DataCenterDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._DataCenterDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_storage_type", DbType:="Int NOT NULL")>  _
	Public Property code_storage_type() As Integer
		Get
			Return Me._code_storage_type
		End Get
		Set
			If ((Me._code_storage_type = value)  _
						= false) Then
				Me.Oncode_storage_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_storage_type = value
				Me.SendPropertyChanged("code_storage_type")
				Me.Oncode_storage_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_disk_path", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property disk_path() As String
		Get
			Return Me._disk_path
		End Get
		Set
			If (String.Equals(Me._disk_path, value) = false) Then
				Me.Ondisk_pathChanging(value)
				Me.SendPropertyChanging
				Me._disk_path = value
				Me.SendPropertyChanged("disk_path")
				Me.Ondisk_pathChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_disk_size", DbType:="Decimal(20,4) NOT NULL")>  _
	Public Property disk_size() As Decimal
		Get
			Return Me._disk_size
		End Get
		Set
			If ((Me._disk_size = value)  _
						= false) Then
				Me.Ondisk_sizeChanging(value)
				Me.SendPropertyChanging
				Me._disk_size = value
				Me.SendPropertyChanged("disk_size")
				Me.Ondisk_sizeChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="StorageSystem_LogicalVolume", Storage:="_LogicalVolume", OtherKey:="storagesystem_identify")>  _
	Public Property LogicalVolume() As EntitySet(Of LogicalVolume)
		Get
			Return Me._LogicalVolume
		End Get
		Set
			Me._LogicalVolume.Assign(value)
		End Set
	End Property
	
	<Association(Name:="DataCenterDevice_StorageSystem", Storage:="_DataCenterDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property DataCenterDevice() As DataCenterDevice
		Get
			Return Me._DataCenterDevice.Entity
		End Get
		Set
			Dim previousValue As DataCenterDevice = Me._DataCenterDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataCenterDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataCenterDevice.Entity = Nothing
					previousValue.StorageSystem = Nothing
				End If
				Me._DataCenterDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StorageSystem = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataCenterDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LogicalVolume(ByVal entity As LogicalVolume)
		Me.SendPropertyChanging
		entity.StorageSystem = Me
	End Sub
	
	Private Sub detach_LogicalVolume(ByVal entity As LogicalVolume)
		Me.SendPropertyChanging
		entity.StorageSystem = Nothing
	End Sub
End Class

<Table(Name:="dbo.Typology")>  _
Partial Public Class Typology
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _name As String
	
	Private _finalclass As String
	
	Private __IsDeleted As Boolean
	
	Private _OSFamily As EntityRef(Of OSFamily)
	
	Private _OSVersion As EntityRef(Of OSVersion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnfinalclassChanging(value As String)
    End Sub
    Partial Private Sub OnfinalclassChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OSFamily = CType(Nothing, EntityRef(Of OSFamily))
		Me._OSVersion = CType(Nothing, EntityRef(Of OSVersion))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_finalclass", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property finalclass() As String
		Get
			Return Me._finalclass
		End Get
		Set
			If (String.Equals(Me._finalclass, value) = false) Then
				Me.OnfinalclassChanging(value)
				Me.SendPropertyChanging
				Me._finalclass = value
				Me.SendPropertyChanged("finalclass")
				Me.OnfinalclassChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Typology_OSFamily", Storage:="_OSFamily", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OSFamily() As OSFamily
		Get
			Return Me._OSFamily.Entity
		End Get
		Set
			Dim previousValue As OSFamily = Me._OSFamily.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSFamily.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSFamily.Entity = Nothing
					previousValue.Typology = Nothing
				End If
				Me._OSFamily.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Typology = Me
				End If
				Me.SendPropertyChanged("OSFamily")
			End If
		End Set
	End Property
	
	<Association(Name:="Typology_OSVersion", Storage:="_OSVersion", ThisKey:="_Identify", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OSVersion() As OSVersion
		Get
			Return Me._OSVersion.Entity
		End Get
		Set
			Dim previousValue As OSVersion = Me._OSVersion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OSVersion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OSVersion.Entity = Nothing
					previousValue.Typology = Nothing
				End If
				Me._OSVersion.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Typology = Me
				End If
				Me.SendPropertyChanged("OSVersion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Users")>  _
Partial Public Class Users
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _contact_identify As System.Nullable(Of Integer)
	
	Private _name As String
	
	Private _type As System.Nullable(Of Integer)
	
	Private _config As String
	
	Private __IsDeleted As Boolean
	
	Private _Domain As EntitySet(Of Domain)
	
	Private _IPObject As EntitySet(Of IPObject)
	
	Private _Contact As EntityRef(Of Contact)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Oncontact_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncontact_identifyChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnconfigChanging(value As String)
    End Sub
    Partial Private Sub OnconfigChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Domain = New EntitySet(Of Domain)(AddressOf Me.attach_Domain, AddressOf Me.detach_Domain)
		Me._IPObject = New EntitySet(Of IPObject)(AddressOf Me.attach_IPObject, AddressOf Me.detach_IPObject)
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contact_identify", DbType:="Int")>  _
	Public Property contact_identify() As System.Nullable(Of Integer)
		Get
			Return Me._contact_identify
		End Get
		Set
			If (Me._contact_identify.Equals(value) = false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Oncontact_identifyChanging(value)
				Me.SendPropertyChanging
				Me._contact_identify = value
				Me.SendPropertyChanged("contact_identify")
				Me.Oncontact_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="Int")>  _
	Public Property type() As System.Nullable(Of Integer)
		Get
			Return Me._type
		End Get
		Set
			If (Me._type.Equals(value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_config", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property config() As String
		Get
			Return Me._config
		End Get
		Set
			If (String.Equals(Me._config, value) = false) Then
				Me.OnconfigChanging(value)
				Me.SendPropertyChanging
				Me._config = value
				Me.SendPropertyChanged("config")
				Me.OnconfigChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Users_Domain", Storage:="_Domain", ThisKey:="_Identify", OtherKey:="requestor_identify")>  _
	Public Property Domain() As EntitySet(Of Domain)
		Get
			Return Me._Domain
		End Get
		Set
			Me._Domain.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Users_IPObject", Storage:="_IPObject", ThisKey:="_Identify", OtherKey:="requestor_identify")>  _
	Public Property IPObject() As EntitySet(Of IPObject)
		Get
			Return Me._IPObject
		End Get
		Set
			Me._IPObject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Contact_Users", Storage:="_Contact", ThisKey:="contact_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.Users.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users.Add(Me)
					Me._contact_identify = value._Identify
				Else
					Me._contact_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Domain(ByVal entity As Domain)
		Me.SendPropertyChanging
		entity.Users = Me
	End Sub
	
	Private Sub detach_Domain(ByVal entity As Domain)
		Me.SendPropertyChanging
		entity.Users = Nothing
	End Sub
	
	Private Sub attach_IPObject(ByVal entity As IPObject)
		Me.SendPropertyChanging
		entity.Users = Me
	End Sub
	
	Private Sub detach_IPObject(ByVal entity As IPObject)
		Me.SendPropertyChanging
		entity.Users = Nothing
	End Sub
End Class

<Table(Name:="dbo.VirtualDevice")>  _
Partial Public Class VirtualDevice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_virtualdevice_status As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _LnkVirtualDeviceToVolume As EntitySet(Of LnkVirtualDeviceToVolume)
	
	Private _VirtualHost As EntityRef(Of VirtualHost)
	
	Private _VirtualMachine As EntityRef(Of VirtualMachine)
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_virtualdevice_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_virtualdevice_statusChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkVirtualDeviceToVolume = New EntitySet(Of LnkVirtualDeviceToVolume)(AddressOf Me.attach_LnkVirtualDeviceToVolume, AddressOf Me.detach_LnkVirtualDeviceToVolume)
		Me._VirtualHost = CType(Nothing, EntityRef(Of VirtualHost))
		Me._VirtualMachine = CType(Nothing, EntityRef(Of VirtualMachine))
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_virtualdevice_status", DbType:="Int")>  _
	Public Property code_virtualdevice_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_virtualdevice_status
		End Get
		Set
			If (Me._code_virtualdevice_status.Equals(value) = false) Then
				Me.Oncode_virtualdevice_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_virtualdevice_status = value
				Me.SendPropertyChanged("code_virtualdevice_status")
				Me.Oncode_virtualdevice_statusChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_LnkVirtualDeviceToVolume", Storage:="_LnkVirtualDeviceToVolume", OtherKey:="virtualdevice_identify")>  _
	Public Property LnkVirtualDeviceToVolume() As EntitySet(Of LnkVirtualDeviceToVolume)
		Get
			Return Me._LnkVirtualDeviceToVolume
		End Get
		Set
			Me._LnkVirtualDeviceToVolume.Assign(value)
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_VirtualHost", Storage:="_VirtualHost", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property VirtualHost() As VirtualHost
		Get
			Return Me._VirtualHost.Entity
		End Get
		Set
			Dim previousValue As VirtualHost = Me._VirtualHost.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualHost.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualHost.Entity = Nothing
					previousValue.VirtualDevice = Nothing
				End If
				Me._VirtualHost.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.VirtualDevice = Me
				End If
				Me.SendPropertyChanged("VirtualHost")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_VirtualMachine", Storage:="_VirtualMachine", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property VirtualMachine() As VirtualMachine
		Get
			Return Me._VirtualMachine.Entity
		End Get
		Set
			Dim previousValue As VirtualMachine = Me._VirtualMachine.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualMachine.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualMachine.Entity = Nothing
					previousValue.VirtualDevice = Nothing
				End If
				Me._VirtualMachine.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.VirtualDevice = Me
				End If
				Me.SendPropertyChanged("VirtualMachine")
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_VirtualDevice", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.VirtualDevice = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VirtualDevice = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkVirtualDeviceToVolume(ByVal entity As LnkVirtualDeviceToVolume)
		Me.SendPropertyChanging
		entity.VirtualDevice = Me
	End Sub
	
	Private Sub detach_LnkVirtualDeviceToVolume(ByVal entity As LnkVirtualDeviceToVolume)
		Me.SendPropertyChanging
		entity.VirtualDevice = Nothing
	End Sub
End Class

<Table(Name:="dbo.VirtualHost")>  _
Partial Public Class VirtualHost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private __IsDeleted As Boolean
	
	Private _Farm As EntityRef(Of Farm)
	
	Private _Hypervisor As EntityRef(Of Hypervisor)
	
	Private _VirtualDevice As EntityRef(Of VirtualDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Farm = CType(Nothing, EntityRef(Of Farm))
		Me._Hypervisor = CType(Nothing, EntityRef(Of Hypervisor))
		Me._VirtualDevice = CType(Nothing, EntityRef(Of VirtualDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._VirtualDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualHost_Farm", Storage:="_Farm", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Farm() As Farm
		Get
			Return Me._Farm.Entity
		End Get
		Set
			Dim previousValue As Farm = Me._Farm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Farm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Farm.Entity = Nothing
					previousValue.VirtualHost = Nothing
				End If
				Me._Farm.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.VirtualHost = Me
				End If
				Me.SendPropertyChanged("Farm")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualHost_Hypervisor", Storage:="_Hypervisor", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Hypervisor() As Hypervisor
		Get
			Return Me._Hypervisor.Entity
		End Get
		Set
			Dim previousValue As Hypervisor = Me._Hypervisor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hypervisor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hypervisor.Entity = Nothing
					previousValue.VirtualHost = Nothing
				End If
				Me._Hypervisor.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.VirtualHost = Me
				End If
				Me.SendPropertyChanged("Hypervisor")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_VirtualHost", Storage:="_VirtualDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property VirtualDevice() As VirtualDevice
		Get
			Return Me._VirtualDevice.Entity
		End Get
		Set
			Dim previousValue As VirtualDevice = Me._VirtualDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualDevice.Entity = Nothing
					previousValue.VirtualHost = Nothing
				End If
				Me._VirtualDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VirtualHost = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VirtualDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.VirtualMachine")>  _
Partial Public Class VirtualMachine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _virtualhost_identify As System.Nullable(Of Integer)
	
	Private _osfamily_identify As System.Nullable(Of Integer)
	
	Private _osversion_identify As System.Nullable(Of Integer)
	
	Private _oslicence_identify As System.Nullable(Of Integer)
	
	Private _code_backup_plan As System.Nullable(Of Integer)
	
	Private _cpu As String
	
	Private _ram As String
	
	Private _managementip_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _LogicalInterface As EntityRef(Of LogicalInterface)
	
	Private _IPAddress As EntityRef(Of IPAddress)
	
	Private _VirtualDevice As EntityRef(Of VirtualDevice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onvirtualhost_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvirtualhost_identifyChanged()
    End Sub
    Partial Private Sub Onosfamily_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onosfamily_identifyChanged()
    End Sub
    Partial Private Sub Onosversion_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onosversion_identifyChanged()
    End Sub
    Partial Private Sub Onoslicence_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoslicence_identifyChanged()
    End Sub
    Partial Private Sub Oncode_backup_planChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_backup_planChanged()
    End Sub
    Partial Private Sub OncpuChanging(value As String)
    End Sub
    Partial Private Sub OncpuChanged()
    End Sub
    Partial Private Sub OnramChanging(value As String)
    End Sub
    Partial Private Sub OnramChanged()
    End Sub
    Partial Private Sub Onmanagementip_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmanagementip_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogicalInterface = CType(Nothing, EntityRef(Of LogicalInterface))
		Me._IPAddress = CType(Nothing, EntityRef(Of IPAddress))
		Me._VirtualDevice = CType(Nothing, EntityRef(Of VirtualDevice))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._VirtualDevice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_virtualhost_identify", DbType:="Int")>  _
	Public Property virtualhost_identify() As System.Nullable(Of Integer)
		Get
			Return Me._virtualhost_identify
		End Get
		Set
			If (Me._virtualhost_identify.Equals(value) = false) Then
				Me.Onvirtualhost_identifyChanging(value)
				Me.SendPropertyChanging
				Me._virtualhost_identify = value
				Me.SendPropertyChanged("virtualhost_identify")
				Me.Onvirtualhost_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osfamily_identify", DbType:="Int")>  _
	Public Property osfamily_identify() As System.Nullable(Of Integer)
		Get
			Return Me._osfamily_identify
		End Get
		Set
			If (Me._osfamily_identify.Equals(value) = false) Then
				Me.Onosfamily_identifyChanging(value)
				Me.SendPropertyChanging
				Me._osfamily_identify = value
				Me.SendPropertyChanged("osfamily_identify")
				Me.Onosfamily_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_osversion_identify", DbType:="Int")>  _
	Public Property osversion_identify() As System.Nullable(Of Integer)
		Get
			Return Me._osversion_identify
		End Get
		Set
			If (Me._osversion_identify.Equals(value) = false) Then
				Me.Onosversion_identifyChanging(value)
				Me.SendPropertyChanging
				Me._osversion_identify = value
				Me.SendPropertyChanged("osversion_identify")
				Me.Onosversion_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_oslicence_identify", DbType:="Int")>  _
	Public Property oslicence_identify() As System.Nullable(Of Integer)
		Get
			Return Me._oslicence_identify
		End Get
		Set
			If (Me._oslicence_identify.Equals(value) = false) Then
				Me.Onoslicence_identifyChanging(value)
				Me.SendPropertyChanging
				Me._oslicence_identify = value
				Me.SendPropertyChanged("oslicence_identify")
				Me.Onoslicence_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_backup_plan", DbType:="Int")>  _
	Public Property code_backup_plan() As System.Nullable(Of Integer)
		Get
			Return Me._code_backup_plan
		End Get
		Set
			If (Me._code_backup_plan.Equals(value) = false) Then
				Me.Oncode_backup_planChanging(value)
				Me.SendPropertyChanging
				Me._code_backup_plan = value
				Me.SendPropertyChanged("code_backup_plan")
				Me.Oncode_backup_planChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cpu", DbType:="VarChar(50)")>  _
	Public Property cpu() As String
		Get
			Return Me._cpu
		End Get
		Set
			If (String.Equals(Me._cpu, value) = false) Then
				Me.OncpuChanging(value)
				Me.SendPropertyChanging
				Me._cpu = value
				Me.SendPropertyChanged("cpu")
				Me.OncpuChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ram", DbType:="VarChar(50)")>  _
	Public Property ram() As String
		Get
			Return Me._ram
		End Get
		Set
			If (String.Equals(Me._ram, value) = false) Then
				Me.OnramChanging(value)
				Me.SendPropertyChanging
				Me._ram = value
				Me.SendPropertyChanged("ram")
				Me.OnramChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_managementip_identify", DbType:="Int")>  _
	Public Property managementip_identify() As System.Nullable(Of Integer)
		Get
			Return Me._managementip_identify
		End Get
		Set
			If (Me._managementip_identify.Equals(value) = false) Then
				If Me._IPAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onmanagementip_identifyChanging(value)
				Me.SendPropertyChanging
				Me._managementip_identify = value
				Me.SendPropertyChanged("managementip_identify")
				Me.Onmanagementip_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualMachine_LogicalInterface", Storage:="_LogicalInterface", ThisKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property LogicalInterface() As LogicalInterface
		Get
			Return Me._LogicalInterface.Entity
		End Get
		Set
			Dim previousValue As LogicalInterface = Me._LogicalInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LogicalInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LogicalInterface.Entity = Nothing
					previousValue.VirtualMachine = Nothing
				End If
				Me._LogicalInterface.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.VirtualMachine = Me
				End If
				Me.SendPropertyChanged("LogicalInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="IPAddress_VirtualMachine", Storage:="_IPAddress", ThisKey:="managementip_identify", IsForeignKey:=true)>  _
	Public Property IPAddress() As IPAddress
		Get
			Return Me._IPAddress.Entity
		End Get
		Set
			Dim previousValue As IPAddress = Me._IPAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPAddress.Entity = Nothing
					previousValue.VirtualMachine.Remove(Me)
				End If
				Me._IPAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VirtualMachine.Add(Me)
					Me._managementip_identify = value.id
				Else
					Me._managementip_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IPAddress")
			End If
		End Set
	End Property
	
	<Association(Name:="VirtualDevice_VirtualMachine", Storage:="_VirtualDevice", ThisKey:="id", IsForeignKey:=true)>  _
	Public Property VirtualDevice() As VirtualDevice
		Get
			Return Me._VirtualDevice.Entity
		End Get
		Set
			Dim previousValue As VirtualDevice = Me._VirtualDevice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VirtualDevice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VirtualDevice.Entity = Nothing
					previousValue.VirtualMachine = Nothing
				End If
				Me._VirtualDevice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VirtualMachine = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VirtualDevice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.VisualAuthorization")>  _
Partial Public Class VisualAuthorization
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private __Locked As System.Nullable(Of Boolean)
	
	Private __SortKey As System.Nullable(Of Decimal)
	
	Private _username As String
	
	Private _table_name As String
	
	Private _column_name As String
	
	Private _visiable As System.Nullable(Of Boolean)
	
	Private _editable As System.Nullable(Of Boolean)
	
	Private __IsDeleted As Boolean
	
	Private __CreatedOn As System.Nullable(Of Date)
	
	Private __CreatedBy As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub On_LockedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub On_LockedChanged()
    End Sub
    Partial Private Sub On_SortKeyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub On_SortKeyChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub Ontable_nameChanging(value As String)
    End Sub
    Partial Private Sub Ontable_nameChanged()
    End Sub
    Partial Private Sub Oncolumn_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncolumn_nameChanged()
    End Sub
    Partial Private Sub OnvisiableChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnvisiableChanged()
    End Sub
    Partial Private Sub OneditableChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OneditableChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    Partial Private Sub On_CreatedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub On_CreatedOnChanged()
    End Sub
    Partial Private Sub On_CreatedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_CreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_Locked]", Storage:="__Locked", DbType:="Bit")>  _
	Public Property _Locked() As System.Nullable(Of Boolean)
		Get
			Return Me.__Locked
		End Get
		Set
			If (Me.__Locked.Equals(value) = false) Then
				Me.On_LockedChanging(value)
				Me.SendPropertyChanging
				Me.__Locked = value
				Me.SendPropertyChanged("_Locked")
				Me.On_LockedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_SortKey]", Storage:="__SortKey", DbType:="Decimal(28,14)")>  _
	Public Property _SortKey() As System.Nullable(Of Decimal)
		Get
			Return Me.__SortKey
		End Get
		Set
			If (Me.__SortKey.Equals(value) = false) Then
				Me.On_SortKeyChanging(value)
				Me.SendPropertyChanging
				Me.__SortKey = value
				Me.SendPropertyChanged("_SortKey")
				Me.On_SortKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_username", DbType:="NVarChar(16)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_table_name", DbType:="NVarChar(16)")>  _
	Public Property table_name() As String
		Get
			Return Me._table_name
		End Get
		Set
			If (String.Equals(Me._table_name, value) = false) Then
				Me.Ontable_nameChanging(value)
				Me.SendPropertyChanging
				Me._table_name = value
				Me.SendPropertyChanged("table_name")
				Me.Ontable_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_column_name", DbType:="NVarChar(16)")>  _
	Public Property column_name() As String
		Get
			Return Me._column_name
		End Get
		Set
			If (String.Equals(Me._column_name, value) = false) Then
				Me.Oncolumn_nameChanging(value)
				Me.SendPropertyChanging
				Me._column_name = value
				Me.SendPropertyChanged("column_name")
				Me.Oncolumn_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_visiable", DbType:="Bit")>  _
	Public Property visiable() As System.Nullable(Of Boolean)
		Get
			Return Me._visiable
		End Get
		Set
			If (Me._visiable.Equals(value) = false) Then
				Me.OnvisiableChanging(value)
				Me.SendPropertyChanging
				Me._visiable = value
				Me.SendPropertyChanged("visiable")
				Me.OnvisiableChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_editable", DbType:="Bit")>  _
	Public Property editable() As System.Nullable(Of Boolean)
		Get
			Return Me._editable
		End Get
		Set
			If (Me._editable.Equals(value) = false) Then
				Me.OneditableChanging(value)
				Me.SendPropertyChanging
				Me._editable = value
				Me.SendPropertyChanged("editable")
				Me.OneditableChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedOn]", Storage:="__CreatedOn", DbType:="DateTime")>  _
	Public Property _CreatedOn() As System.Nullable(Of Date)
		Get
			Return Me.__CreatedOn
		End Get
		Set
			If (Me.__CreatedOn.Equals(value) = false) Then
				Me.On_CreatedOnChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedOn = value
				Me.SendPropertyChanged("_CreatedOn")
				Me.On_CreatedOnChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_CreatedBy]", Storage:="__CreatedBy", DbType:="Int")>  _
	Public Property _CreatedBy() As System.Nullable(Of Integer)
		Get
			Return Me.__CreatedBy
		End Get
		Set
			If (Me.__CreatedBy.Equals(value) = false) Then
				Me.On_CreatedByChanging(value)
				Me.SendPropertyChanging
				Me.__CreatedBy = value
				Me.SendPropertyChanged("_CreatedBy")
				Me.On_CreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.VLAN")>  _
Partial Public Class VLAN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private __Identify As Integer
	
	Private _vlan_tag As String
	
	Private _description As String
	
	Private _organization_identify As System.Nullable(Of Integer)
	
	Private __IsDeleted As Boolean
	
	Private _LnkIPSubnetToVLAN As EntitySet(Of LnkIPSubnetToVLAN)
	
	Private _LnkPhysicalInterfaceToVLAN As EntitySet(Of LnkPhysicalInterfaceToVLAN)
	
	Private _LnkSubnetToVLAN As EntitySet(Of LnkSubnetToVLAN)
	
	Private _Organization As EntityRef(Of Organization)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub On_IdentifyChanging(value As Integer)
    End Sub
    Partial Private Sub On_IdentifyChanged()
    End Sub
    Partial Private Sub Onvlan_tagChanging(value As String)
    End Sub
    Partial Private Sub Onvlan_tagChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onorganization_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onorganization_identifyChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LnkIPSubnetToVLAN = New EntitySet(Of LnkIPSubnetToVLAN)(AddressOf Me.attach_LnkIPSubnetToVLAN, AddressOf Me.detach_LnkIPSubnetToVLAN)
		Me._LnkPhysicalInterfaceToVLAN = New EntitySet(Of LnkPhysicalInterfaceToVLAN)(AddressOf Me.attach_LnkPhysicalInterfaceToVLAN, AddressOf Me.detach_LnkPhysicalInterfaceToVLAN)
		Me._LnkSubnetToVLAN = New EntitySet(Of LnkSubnetToVLAN)(AddressOf Me.attach_LnkSubnetToVLAN, AddressOf Me.detach_LnkSubnetToVLAN)
		Me._Organization = CType(Nothing, EntityRef(Of Organization))
		OnCreated
	End Sub
	
	<Column(Name:="[_Identify]", Storage:="__Identify", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property _Identify() As Integer
		Get
			Return Me.__Identify
		End Get
		Set
			If ((Me.__Identify = value)  _
						= false) Then
				Me.On_IdentifyChanging(value)
				Me.SendPropertyChanging
				Me.__Identify = value
				Me.SendPropertyChanged("_Identify")
				Me.On_IdentifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_vlan_tag", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property vlan_tag() As String
		Get
			Return Me._vlan_tag
		End Get
		Set
			If (String.Equals(Me._vlan_tag, value) = false) Then
				Me.Onvlan_tagChanging(value)
				Me.SendPropertyChanging
				Me._vlan_tag = value
				Me.SendPropertyChanged("vlan_tag")
				Me.Onvlan_tagChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_organization_identify", DbType:="Int")>  _
	Public Property organization_identify() As System.Nullable(Of Integer)
		Get
			Return Me._organization_identify
		End Get
		Set
			If (Me._organization_identify.Equals(value) = false) Then
				If Me._Organization.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onorganization_identifyChanging(value)
				Me.SendPropertyChanging
				Me._organization_identify = value
				Me.SendPropertyChanged("organization_identify")
				Me.Onorganization_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkIPSubnetToVLAN", Storage:="_LnkIPSubnetToVLAN", ThisKey:="_Identify", OtherKey:="vlan_identify")>  _
	Public Property LnkIPSubnetToVLAN() As EntitySet(Of LnkIPSubnetToVLAN)
		Get
			Return Me._LnkIPSubnetToVLAN
		End Get
		Set
			Me._LnkIPSubnetToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkPhysicalInterfaceToVLAN", Storage:="_LnkPhysicalInterfaceToVLAN", ThisKey:="_Identify", OtherKey:="vlan_identify")>  _
	Public Property LnkPhysicalInterfaceToVLAN() As EntitySet(Of LnkPhysicalInterfaceToVLAN)
		Get
			Return Me._LnkPhysicalInterfaceToVLAN
		End Get
		Set
			Me._LnkPhysicalInterfaceToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="VLAN_LnkSubnetToVLAN", Storage:="_LnkSubnetToVLAN", ThisKey:="_Identify", OtherKey:="vlan_identify")>  _
	Public Property LnkSubnetToVLAN() As EntitySet(Of LnkSubnetToVLAN)
		Get
			Return Me._LnkSubnetToVLAN
		End Get
		Set
			Me._LnkSubnetToVLAN.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Organization_VLAN", Storage:="_Organization", ThisKey:="organization_identify", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Organization() As Organization
		Get
			Return Me._Organization.Entity
		End Get
		Set
			Dim previousValue As Organization = Me._Organization.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Organization.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Organization.Entity = Nothing
					previousValue.VLAN.Remove(Me)
				End If
				Me._Organization.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VLAN.Add(Me)
					Me._organization_identify = value._Identify
				Else
					Me._organization_identify = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Organization")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LnkIPSubnetToVLAN(ByVal entity As LnkIPSubnetToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Me
	End Sub
	
	Private Sub detach_LnkIPSubnetToVLAN(ByVal entity As LnkIPSubnetToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Nothing
	End Sub
	
	Private Sub attach_LnkPhysicalInterfaceToVLAN(ByVal entity As LnkPhysicalInterfaceToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Me
	End Sub
	
	Private Sub detach_LnkPhysicalInterfaceToVLAN(ByVal entity As LnkPhysicalInterfaceToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Nothing
	End Sub
	
	Private Sub attach_LnkSubnetToVLAN(ByVal entity As LnkSubnetToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Me
	End Sub
	
	Private Sub detach_LnkSubnetToVLAN(ByVal entity As LnkSubnetToVLAN)
		Me.SendPropertyChanging
		entity.VLAN = Nothing
	End Sub
End Class

<Table(Name:="dbo.WANLink")>  _
Partial Public Class WANLink
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code_wanlink_status As System.Nullable(Of Integer)
	
	Private _location_identify1 As System.Nullable(Of Integer)
	
	Private _location_identify2 As System.Nullable(Of Integer)
	
	Private _code_wanlink_type As System.Nullable(Of Integer)
	
	Private _rate As String
	
	Private _burst_rate As String
	
	Private _underlying_rate As String
	
	Private _networkinterface_identify1 As System.Nullable(Of Integer)
	
	Private _networkinterface_identify2 As System.Nullable(Of Integer)
	
	Private _carrier_identify As System.Nullable(Of Integer)
	
	Private _purchase_date As System.Nullable(Of Date)
	
	Private _renewal_date As System.Nullable(Of Date)
	
	Private _decommissioning_date As System.Nullable(Of Date)
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _Location As EntityRef(Of Location)
	
	Private _Location1 As EntityRef(Of Location)
	
	Private _NetworkInterface As EntityRef(Of NetworkInterface)
	
	Private _NetworkInterface1 As EntityRef(Of NetworkInterface)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Oncode_wanlink_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_wanlink_statusChanged()
    End Sub
    Partial Private Sub Onlocation_identify1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlocation_identify1Changed()
    End Sub
    Partial Private Sub Onlocation_identify2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlocation_identify2Changed()
    End Sub
    Partial Private Sub Oncode_wanlink_typeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_wanlink_typeChanged()
    End Sub
    Partial Private Sub OnrateChanging(value As String)
    End Sub
    Partial Private Sub OnrateChanged()
    End Sub
    Partial Private Sub Onburst_rateChanging(value As String)
    End Sub
    Partial Private Sub Onburst_rateChanged()
    End Sub
    Partial Private Sub Onunderlying_rateChanging(value As String)
    End Sub
    Partial Private Sub Onunderlying_rateChanged()
    End Sub
    Partial Private Sub Onnetworkinterface_identify1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnetworkinterface_identify1Changed()
    End Sub
    Partial Private Sub Onnetworkinterface_identify2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnetworkinterface_identify2Changed()
    End Sub
    Partial Private Sub Oncarrier_identifyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncarrier_identifyChanged()
    End Sub
    Partial Private Sub Onpurchase_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onpurchase_dateChanged()
    End Sub
    Partial Private Sub Onrenewal_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onrenewal_dateChanged()
    End Sub
    Partial Private Sub Ondecommissioning_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondecommissioning_dateChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		Me._Location1 = CType(Nothing, EntityRef(Of Location))
		Me._NetworkInterface = CType(Nothing, EntityRef(Of NetworkInterface))
		Me._NetworkInterface1 = CType(Nothing, EntityRef(Of NetworkInterface))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_wanlink_status", DbType:="Int")>  _
	Public Property code_wanlink_status() As System.Nullable(Of Integer)
		Get
			Return Me._code_wanlink_status
		End Get
		Set
			If (Me._code_wanlink_status.Equals(value) = false) Then
				Me.Oncode_wanlink_statusChanging(value)
				Me.SendPropertyChanging
				Me._code_wanlink_status = value
				Me.SendPropertyChanged("code_wanlink_status")
				Me.Oncode_wanlink_statusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_location_identify1", DbType:="Int")>  _
	Public Property location_identify1() As System.Nullable(Of Integer)
		Get
			Return Me._location_identify1
		End Get
		Set
			If (Me._location_identify1.Equals(value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocation_identify1Changing(value)
				Me.SendPropertyChanging
				Me._location_identify1 = value
				Me.SendPropertyChanged("location_identify1")
				Me.Onlocation_identify1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_location_identify2", DbType:="Int")>  _
	Public Property location_identify2() As System.Nullable(Of Integer)
		Get
			Return Me._location_identify2
		End Get
		Set
			If (Me._location_identify2.Equals(value) = false) Then
				If Me._Location1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onlocation_identify2Changing(value)
				Me.SendPropertyChanging
				Me._location_identify2 = value
				Me.SendPropertyChanged("location_identify2")
				Me.Onlocation_identify2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_code_wanlink_type", DbType:="Int")>  _
	Public Property code_wanlink_type() As System.Nullable(Of Integer)
		Get
			Return Me._code_wanlink_type
		End Get
		Set
			If (Me._code_wanlink_type.Equals(value) = false) Then
				Me.Oncode_wanlink_typeChanging(value)
				Me.SendPropertyChanging
				Me._code_wanlink_type = value
				Me.SendPropertyChanged("code_wanlink_type")
				Me.Oncode_wanlink_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rate", DbType:="VarChar(50)")>  _
	Public Property rate() As String
		Get
			Return Me._rate
		End Get
		Set
			If (String.Equals(Me._rate, value) = false) Then
				Me.OnrateChanging(value)
				Me.SendPropertyChanging
				Me._rate = value
				Me.SendPropertyChanged("rate")
				Me.OnrateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_burst_rate", DbType:="VarChar(50)")>  _
	Public Property burst_rate() As String
		Get
			Return Me._burst_rate
		End Get
		Set
			If (String.Equals(Me._burst_rate, value) = false) Then
				Me.Onburst_rateChanging(value)
				Me.SendPropertyChanging
				Me._burst_rate = value
				Me.SendPropertyChanged("burst_rate")
				Me.Onburst_rateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_underlying_rate", DbType:="VarChar(50)")>  _
	Public Property underlying_rate() As String
		Get
			Return Me._underlying_rate
		End Get
		Set
			If (String.Equals(Me._underlying_rate, value) = false) Then
				Me.Onunderlying_rateChanging(value)
				Me.SendPropertyChanging
				Me._underlying_rate = value
				Me.SendPropertyChanged("underlying_rate")
				Me.Onunderlying_rateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_networkinterface_identify1", DbType:="Int")>  _
	Public Property networkinterface_identify1() As System.Nullable(Of Integer)
		Get
			Return Me._networkinterface_identify1
		End Get
		Set
			If (Me._networkinterface_identify1.Equals(value) = false) Then
				If Me._NetworkInterface.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onnetworkinterface_identify1Changing(value)
				Me.SendPropertyChanging
				Me._networkinterface_identify1 = value
				Me.SendPropertyChanged("networkinterface_identify1")
				Me.Onnetworkinterface_identify1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_networkinterface_identify2", DbType:="Int")>  _
	Public Property networkinterface_identify2() As System.Nullable(Of Integer)
		Get
			Return Me._networkinterface_identify2
		End Get
		Set
			If (Me._networkinterface_identify2.Equals(value) = false) Then
				If Me._NetworkInterface1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onnetworkinterface_identify2Changing(value)
				Me.SendPropertyChanging
				Me._networkinterface_identify2 = value
				Me.SendPropertyChanged("networkinterface_identify2")
				Me.Onnetworkinterface_identify2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_carrier_identify", DbType:="Int")>  _
	Public Property carrier_identify() As System.Nullable(Of Integer)
		Get
			Return Me._carrier_identify
		End Get
		Set
			If (Me._carrier_identify.Equals(value) = false) Then
				Me.Oncarrier_identifyChanging(value)
				Me.SendPropertyChanging
				Me._carrier_identify = value
				Me.SendPropertyChanged("carrier_identify")
				Me.Oncarrier_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_purchase_date", DbType:="DateTime")>  _
	Public Property purchase_date() As System.Nullable(Of Date)
		Get
			Return Me._purchase_date
		End Get
		Set
			If (Me._purchase_date.Equals(value) = false) Then
				Me.Onpurchase_dateChanging(value)
				Me.SendPropertyChanging
				Me._purchase_date = value
				Me.SendPropertyChanged("purchase_date")
				Me.Onpurchase_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_renewal_date", DbType:="DateTime")>  _
	Public Property renewal_date() As System.Nullable(Of Date)
		Get
			Return Me._renewal_date
		End Get
		Set
			If (Me._renewal_date.Equals(value) = false) Then
				Me.Onrenewal_dateChanging(value)
				Me.SendPropertyChanging
				Me._renewal_date = value
				Me.SendPropertyChanged("renewal_date")
				Me.Onrenewal_dateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_decommissioning_date", DbType:="DateTime")>  _
	Public Property decommissioning_date() As System.Nullable(Of Date)
		Get
			Return Me._decommissioning_date
		End Get
		Set
			If (Me._decommissioning_date.Equals(value) = false) Then
				Me.Ondecommissioning_dateChanging(value)
				Me.SendPropertyChanging
				Me._decommissioning_date = value
				Me.SendPropertyChanged("decommissioning_date")
				Me.Ondecommissioning_dateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_WANLink", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.WANLink = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WANLink = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="Location_WANLink", Storage:="_Location", ThisKey:="location_identify1", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.WANLink.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WANLink.Add(Me)
					Me._location_identify1 = value._Identify
				Else
					Me._location_identify1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	<Association(Name:="Location_WANLink1", Storage:="_Location1", ThisKey:="location_identify2", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property Location1() As Location
		Get
			Return Me._Location1.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location1.Entity = Nothing
					previousValue.WANLink1.Remove(Me)
				End If
				Me._Location1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WANLink1.Add(Me)
					Me._location_identify2 = value._Identify
				Else
					Me._location_identify2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Location1")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_WANLink", Storage:="_NetworkInterface", ThisKey:="networkinterface_identify1", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property NetworkInterface() As NetworkInterface
		Get
			Return Me._NetworkInterface.Entity
		End Get
		Set
			Dim previousValue As NetworkInterface = Me._NetworkInterface.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkInterface.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkInterface.Entity = Nothing
					previousValue.WANLink.Remove(Me)
				End If
				Me._NetworkInterface.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WANLink.Add(Me)
					Me._networkinterface_identify1 = value._Identify
				Else
					Me._networkinterface_identify1 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NetworkInterface")
			End If
		End Set
	End Property
	
	<Association(Name:="NetworkInterface_WANLink1", Storage:="_NetworkInterface1", ThisKey:="networkinterface_identify2", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property NetworkInterface1() As NetworkInterface
		Get
			Return Me._NetworkInterface1.Entity
		End Get
		Set
			Dim previousValue As NetworkInterface = Me._NetworkInterface1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NetworkInterface1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NetworkInterface1.Entity = Nothing
					previousValue.WANLink1.Remove(Me)
				End If
				Me._NetworkInterface1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WANLink1.Add(Me)
					Me._networkinterface_identify2 = value._Identify
				Else
					Me._networkinterface_identify2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NetworkInterface1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.WebApplication")>  _
Partial Public Class WebApplication
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _webserver_identify As Integer
	
	Private _url As String
	
	Private __IsDeleted As Boolean
	
	Private _FunctionalCI As EntityRef(Of FunctionalCI)
	
	Private _WebServer As EntityRef(Of WebServer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onwebserver_identifyChanging(value As Integer)
    End Sub
    Partial Private Sub Onwebserver_identifyChanged()
    End Sub
    Partial Private Sub OnurlChanging(value As String)
    End Sub
    Partial Private Sub OnurlChanged()
    End Sub
    Partial Private Sub On_IsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub On_IsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalCI = CType(Nothing, EntityRef(Of FunctionalCI))
		Me._WebServer = CType(Nothing, EntityRef(Of WebServer))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._FunctionalCI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_webserver_identify", DbType:="Int NOT NULL")>  _
	Public Property webserver_identify() As Integer
		Get
			Return Me._webserver_identify
		End Get
		Set
			If ((Me._webserver_identify = value)  _
						= false) Then
				If Me._WebServer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onwebserver_identifyChanging(value)
				Me.SendPropertyChanging
				Me._webserver_identify = value
				Me.SendPropertyChanged("webserver_identify")
				Me.Onwebserver_identifyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_url", DbType:="VarChar(200)")>  _
	Public Property url() As String
		Get
			Return Me._url
		End Get
		Set
			If (String.Equals(Me._url, value) = false) Then
				Me.OnurlChanging(value)
				Me.SendPropertyChanging
				Me._url = value
				Me.SendPropertyChanged("url")
				Me.OnurlChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[_IsDeleted]", Storage:="__IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property _IsDeleted() As Boolean
		Get
			Return Me.__IsDeleted
		End Get
		Set
			If ((Me.__IsDeleted = value)  _
						= false) Then
				Me.On_IsDeletedChanging(value)
				Me.SendPropertyChanging
				Me.__IsDeleted = value
				Me.SendPropertyChanged("_IsDeleted")
				Me.On_IsDeletedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="FunctionalCI_WebApplication", Storage:="_FunctionalCI", ThisKey:="id", OtherKey:="_Identify", IsForeignKey:=true)>  _
	Public Property FunctionalCI() As FunctionalCI
		Get
			Return Me._FunctionalCI.Entity
		End Get
		Set
			Dim previousValue As FunctionalCI = Me._FunctionalCI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FunctionalCI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FunctionalCI.Entity = Nothing
					previousValue.WebApplication = Nothing
				End If
				Me._FunctionalCI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WebApplication = Me
					Me._id = value._Identify
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FunctionalCI")
			End If
		End Set
	End Property
	
	<Association(Name:="WebServer_WebApplication", Storage:="_WebServer", ThisKey:="webserver_identify", IsForeignKey:=true)>  _
	Public Property WebServer() As WebServer
		Get
			Return Me._WebServer.Entity
		End Get
		Set
			Dim previousValue As WebServer = Me._WebServer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WebServer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WebServer.Entity = Nothing
					previousValue.WebApplication.Remove(Me)
				End If
				Me._WebServer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WebApplication.Add(Me)
					Me._webserver_identify = value.id
				Else
					Me._webserver_identify = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("WebServer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
